<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NaSaの家</title>
  
  <subtitle>你要藏好软弱，世界大雨滂沱，万物苟且而活，无人为你背负更多。</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-29T16:44:34.013Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>NASA</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>注解实现接口幂等性(Easy版)</title>
    <link href="http://example.com/posts/8b17ba2.html"/>
    <id>http://example.com/posts/8b17ba2.html</id>
    <published>2023-03-30T00:04:40.000Z</published>
    <updated>2023-03-29T16:44:34.013Z</updated>
    
    <content type="html"><![CDATA[<h6 id="1-定义注解字段"><a href="#1-定义注解字段" class="headerlink" title="1.定义注解字段"></a>1.定义注解字段</h6><ul><li><p>需要支持映射字段</p></li><li><p>需要支持自定义时间</p></li><li><p>需要支持自定义时间单位</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Idempotent &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 别名 mappingParameter</span></span><br><span class="line"><span class="comment">     * 幂等性标识符 devId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AliasFor(&quot;mappingParameter&quot;)</span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 映射参数列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] mappingParameter() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">long</span> <span class="title function_">expireTime</span><span class="params">()</span> <span class="keyword">default</span>  <span class="number">3L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间单位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TimeUnit <span class="title function_">timeUnit</span><span class="params">()</span> <span class="keyword">default</span> TimeUnit.SECONDS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-实现切面"><a href="#2-实现切面" class="headerlink" title="2.实现切面"></a>2.实现切面</h6><p><code>根据传入的映射字段去查询方法参数中对应的字段值连接起来作为key，如果没有指定指定key的话，给个雪花Id过去（此时就感觉没必要了，每次进来都是新的，起不了保护作用，后续可以优化为，没有指定参数，就去拿请求头中的header的token）</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IdempotentAspect</span>  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.liu.aphrodite.handler.flowControl.annotations.Idempotent)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">validation</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;validation()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">idempotentCheck</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span>&#123;</span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) proceedingJoinPoint.getSignature();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> signature.getMethod();</span><br><span class="line">        <span class="type">Idempotent</span> <span class="variable">annotation</span> <span class="operator">=</span> method.getAnnotation(Idempotent.class);</span><br><span class="line">        <span class="comment">//step1: 判断是否有映射参数</span></span><br><span class="line">        <span class="comment">//step2: 没有映射参数则判断是否具有key</span></span><br><span class="line">        <span class="comment">//step3: 都没有,则以全部参数为key</span></span><br><span class="line">        <span class="comment">//step4: 啥都没有,拿头做幂等啊.(token)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">idempotentKey</span> <span class="operator">=</span> mapParameterAssemblyKey(annotation.mappingParameter(), method, proceedingJoinPoint.getArgs());</span><br><span class="line">        RedisUtil.setKeyExpire(idempotentKey,Boolean.TRUE.toString(), annotation.expireTime(), annotation.timeUnit());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;validation()&quot;,throwing = &quot;exception&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findException</span><span class="params">(JoinPoint joinPoint, Exception exception)</span>&#123;</span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> signature.getMethod();</span><br><span class="line">        <span class="type">Idempotent</span> <span class="variable">annotation</span> <span class="operator">=</span> method.getAnnotation(Idempotent.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">assemblyKey</span> <span class="operator">=</span> mapParameterAssemblyKey(annotation.mappingParameter(), method, joinPoint.getArgs());</span><br><span class="line">        RedisUtil.delete(assemblyKey);</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;#&#123;&#125; throw exception:&#123;&#125;&quot;</span>,joinPoint.getSignature().getDeclaringTypeName(),joinPoint.getSignature().getName(), exception);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Tips 1.暂且只能指定String类型变量 2.接口必须存在参数 3.</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">mapParameterAssemblyKey</span><span class="params">(String[] parameterNameList, Method method, Object[] args)</span> &#123;</span><br><span class="line">        <span class="type">DefaultParameterNameDiscoverer</span> <span class="variable">parameterNameDiscoverer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultParameterNameDiscoverer</span>();</span><br><span class="line">        String[] parameterNames = parameterNameDiscoverer.getParameterNames(method);</span><br><span class="line">        HashMap&lt;String, Object&gt; nameMappingArgs = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; Objects.requireNonNull(parameterNames).length; index++) &#123;</span><br><span class="line">            nameMappingArgs.put(parameterNames[index], args[index]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(parameterNameList))&#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.stream(parameterNameList).map(item -&gt; (String) nameMappingArgs.get(item)).collect(Collectors.joining(<span class="string">&quot;_&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> SnowflakeUtil.getAsString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">将本站针对butterfly主题的亿点点小改动做个集锦。</summary>
    
    
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="注解" scheme="http://example.com/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>自定义线程池精彩的使用方式</title>
    <link href="http://example.com/posts/ea641220.html"/>
    <id>http://example.com/posts/ea641220.html</id>
    <published>2022-11-30T23:50:54.000Z</published>
    <updated>2023-03-29T16:44:34.013Z</updated>
    
    <content type="html"><![CDATA[<h4 id="业务方法实现Callable接口"><a href="#业务方法实现Callable接口" class="headerlink" title="业务方法实现Callable接口"></a>业务方法实现Callable接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Callable&lt;String&gt; <span class="title function_">call</span><span class="params">(<span class="type">int</span> taskNum)</span> &#123;</span><br><span class="line">        Callable&lt;String&gt; task = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;&gt;&gt;&gt;&quot;</span> + taskNum + <span class="string">&quot;任务启动&quot;</span>);</span><br><span class="line">                <span class="type">Date</span> <span class="variable">dateTmp1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                <span class="type">Date</span> <span class="variable">dateTmp2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">                <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> dateTmp2.getTime() - dateTmp1.getTime();</span><br><span class="line">                System.out.println(<span class="string">&quot;&gt;&gt;&gt;&quot;</span> + taskNum + <span class="string">&quot;任务终止&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> taskNum + <span class="string">&quot;任务返回运行结果,当前任务时间【&quot;</span> + time + <span class="string">&quot;毫秒】\n&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> task;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建自定义线程池"><a href="#创建自定义线程池" class="headerlink" title="创建自定义线程池"></a>创建自定义线程池</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> : 2092669791@qq.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2022/12/18 15:02</span></span><br><span class="line"><span class="comment"> * description: 批量任务执行线程池</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BatchTaskThreadPool</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 核心线程数 = 计算机核心书 * 2 + 2</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">batchProcessTaskCorePoolSize</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors() * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 最大线程数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">batchProcessTaskMaxinumPoolSize</span> <span class="operator">=</span> batchProcessTaskCorePoolSize;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 保持活跃时间</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">keepActiveTime</span> <span class="operator">=</span> <span class="number">60L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 阻塞队列大小</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">blockingQuerySize</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 线程工厂</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ThreadFactory</span> <span class="variable">threadFactory</span> <span class="operator">=</span> Executors.defaultThreadFactory();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 日志线程池</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> ThreadPoolExecutor opLogThreadPool;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ThreadPoolExecutor <span class="title function_">batchTaskThreadPoolExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(batchProcessTaskCorePoolSize, batchProcessTaskMaxinumPoolSize, keepActiveTime, TimeUnit.SECONDS</span><br><span class="line">            , <span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;(blockingQuerySize), threadFactory);</span><br><span class="line">    threadPoolExecutor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">    opLogThreadPool = threadPoolExecutor;</span><br><span class="line">    <span class="keyword">return</span> threadPoolExecutor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> ThreadPoolExecutor <span class="title function_">getBatchTaskThreadPoolExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> batchTaskThreadPoolExecutor();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义线程任务操作"><a href="#自定义线程任务操作" class="headerlink" title="自定义线程任务操作"></a>自定义线程任务操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoAsynChron</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ListenableFuture&lt;T&gt; <span class="title function_">submit</span><span class="params">(Callable&lt;T&gt; task, Consumer&lt;T&gt; onSuccess, Consumer&lt;Throwable&gt; onFailure, Executor executor)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> submit(task, onSuccess, onFailure, executor, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ListenableFuture&lt;T&gt; <span class="title function_">submit</span><span class="params">(Callable&lt;T&gt; task, Consumer&lt;T&gt; onSuccess, Consumer&lt;Throwable&gt; onFailure, Executor executor, Executor callbackExecutor)</span> &#123;</span><br><span class="line">        ListenableFuture&lt;T&gt; future = Futures.submit(task, executor);</span><br><span class="line">        withCallBack(future, onSuccess, onFailure, callbackExecutor);</span><br><span class="line">        <span class="keyword">return</span> future;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">withCallBack</span><span class="params">(ListenableFuture&lt;T&gt; future, Consumer&lt;T&gt; onSuccess, Consumer&lt;Throwable&gt; onFailure, Executor callbackExecutor)</span> &#123;</span><br><span class="line">        FutureCallback&lt;T&gt; callback = <span class="keyword">new</span> <span class="title class_">FutureCallback</span>&lt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(T t)</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    onSuccess.accept(t);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    onFailure(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">                onFailure.accept(throwable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (callbackExecutor != <span class="literal">null</span>) &#123;</span><br><span class="line">            Futures.addCallback(future, callback, callbackExecutor);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Futures.addCallback(future, callback, MoreExecutors.directExecutor());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模拟多线程提交任务"><a href="#模拟多线程提交任务" class="headerlink" title="模拟多线程提交任务"></a>模拟多线程提交任务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">     List&lt; String&gt; resultArrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">     <span class="comment">//线程池</span></span><br><span class="line">     <span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BatchTaskThreadPool</span>().getBatchTaskThreadPoolExecutor();</span><br><span class="line">     <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">     <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(size);</span><br><span class="line">     <span class="type">MyService</span> <span class="variable">myService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyService</span>();</span><br><span class="line">     <span class="comment">// 创建多个有返回值的任务</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">         <span class="keyword">final</span> Callable&lt;String&gt; task = myService.call(i);</span><br><span class="line">         DoAsynChron.submit(task,</span><br><span class="line">                 successMsg -&gt;&#123;</span><br><span class="line">                     resultArrayList.add(successMsg);</span><br><span class="line">                     countDownLatch.countDown();</span><br><span class="line">                 &#125;,</span><br><span class="line">                 ex-&gt;&#123;</span><br><span class="line">                     countDownLatch.countDown();</span><br><span class="line">                 &#125;,</span><br><span class="line">                 executor</span><br><span class="line">         );&#125;</span><br><span class="line">     <span class="comment">// 关闭线程池</span></span><br><span class="line">     countDownLatch.await();</span><br><span class="line">     System.err.println(resultArrayList);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="模拟任务结果"><a href="#模拟任务结果" class="headerlink" title="模拟任务结果"></a>模拟任务结果</h4><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%8F%90%E4%BA%A4%E7%BB%93%E6%9E%9C.png" alt="多线程提交结果" style="zoom: 67%;" /></p>]]></content>
    
    
    <summary type="html">将本站针对butterfly主题的亿点点小改动做个集锦。</summary>
    
    
    
    
    <category term="线程池" scheme="http://example.com/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="后端" scheme="http://example.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="多线程" scheme="http://example.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>责任链模式的应用示例</title>
    <link href="http://example.com/posts/b6c1490f.html"/>
    <id>http://example.com/posts/b6c1490f.html</id>
    <published>2022-11-30T23:49:22.000Z</published>
    <updated>2023-03-29T16:44:34.013Z</updated>
    
    <content type="html"><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>责任链模式的应用场景，在实际工作中，通常有如下两种应用场景。</p><ul><li>操作需要经过一系列的校验，通过校验后才执行某些操作。</li><li>工作流。企业中通常会制定很多工作流程，一级一级的去处理任务。</li></ul><h2 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h2><p>以创建商品为例，假设商品创建逻辑分为以下三步完成：</p><ol><li>创建商品</li><li>校验商品参数、</li><li>保存商品。</li></ol><p>第2步校验商品又分为多种情况的校验，必填字段校验、规格校验、价格校验、库存校验等等。这些检验逻辑像一个流水线，要想创建出一个商品，必须通过这些校验。如下流程图所示</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F%E5%9B%BE%E8%A7%A3.png" alt="策略模式图解" style="zoom: 50%;" /></p><p>创建商品步骤，需要经过一系列的参数校验，如果参数校验失败，直接返回失败的结果；通过所有的参数校验后，最终保存商品信息。</p><p>但是随着业务需求不断地叠加，相关的校验逻辑也越来越多，新的功能使代码越来越臃肿，可维护性较差。更糟糕的是，这些校验组件不可复用，当你有其他需求也需要用到一些校验时，你又变成了Ctrl＋C , Ctrl＋V程序员，系统的维护成本也越来越高。如下图所示：</p><blockquote><p>———-&gt;创建商品</p><p>————&gt;校验参数是否为空</p><p>​            校验是否存在库存         ——-&gt;失败退出</p><p>​            校验规格是否合法</p><p>​            校验是否图片是否相同</p><p>————&gt;保存商品</p></blockquote><p>在这种情况下，改动的主要是真正业务之前的校验函数，在设计模式中存在一种思想就符合上述场景</p><p><strong>使用责任链模式优化</strong>：创建商品的每个校验步骤都可以作为一个单独的处理器，抽离为一个单独的类，便于复用。这些处理器形成一条链式调用，请求在处理器链上传递，如果校验条件不通过，则处理器不再向下传递请求，直接返回错误信息；若所有的处理器都通过检验，则执行保存商品步骤。</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/20230214214050.png" style="zoom: 33%;" /></p><p><strong>UML图：</strong></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E8%B4%A3%E4%BB%BB%E9%93%BEUML%E5%9B%BE.png" alt=""></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E5%9B%BE.png" style="zoom: 50%;" /></p><h3 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h3><h4 id="I-流程控制器"><a href="#I-流程控制器" class="headerlink" title="I.流程控制器"></a>I.流程控制器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2023/2/13 0:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 流程控制器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessController</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 模板映射</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, ProcessTemplate&gt; templateConfig = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 执行责任链</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 返回上下文内容</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> ProcessContext <span class="title function_">execute</span><span class="params">(ProcessContext context)</span> &#123;</span><br><span class="line">    <span class="comment">// 前置检查</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.preCheck(context);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ProcessException e) &#123;</span><br><span class="line">      <span class="keyword">return</span> e.getProcessContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历校验节点</span></span><br><span class="line">    List&lt;BusinessProcess&gt; processList = templateConfig.get(context.getCode()).getProcessList();</span><br><span class="line">    <span class="keyword">for</span> (BusinessProcess businessProcess : processList) &#123;</span><br><span class="line">      businessProcess.verify(context);</span><br><span class="line">      <span class="keyword">if</span> (context.getNeedBreak()) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> context;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">preCheck</span><span class="params">(ProcessContext context)</span> <span class="keyword">throws</span> ProcessException &#123;</span><br><span class="line">    <span class="comment">// 校验上下文</span></span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(context)) &#123;</span><br><span class="line">      context = <span class="keyword">new</span> <span class="title class_">ProcessContext</span>();</span><br><span class="line">      context.setResponse(BasicResultVO.fail(RespStatusEnum.CONTEXT_IS_NULL));</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ProcessException</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 业务代码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">businessCode</span> <span class="operator">=</span> context.getCode();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(businessCode)) &#123;</span><br><span class="line">      context.setResponse(BasicResultVO.fail(RespStatusEnum.BUSINESS_CODE_IS_NULL));</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ProcessException</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行模板</span></span><br><span class="line">    <span class="type">ProcessTemplate</span> <span class="variable">processTemplate</span> <span class="operator">=</span> templateConfig.get(businessCode);</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(processTemplate)) &#123;</span><br><span class="line">      context.setResponse(BasicResultVO.fail(RespStatusEnum.PROCESS_TEMPLATE_IS_NULL));</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ProcessException</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行模板列表</span></span><br><span class="line">    List&lt;BusinessProcess&gt; processList = processTemplate.getProcessList();</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(processList)) &#123;</span><br><span class="line">      context.setResponse(BasicResultVO.fail(RespStatusEnum.PROCESS_LIST_IS_NULL));</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ProcessException</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="II-业务执行模板"><a href="#II-业务执行模板" class="headerlink" title="II.业务执行模板"></a>II.业务执行模板</h4><p>通过执行模板获取到所有校验节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2023/2/12 23:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 业务执行模板（把责任链的逻辑串起来）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessTemplate</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 责任链节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;BusinessProcess&gt; processList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="III-责任链上下文"><a href="#III-责任链上下文" class="headerlink" title="III.责任链上下文"></a>III.责任链上下文</h4><p>流程控制器的入参，把请求参数构造成为上下文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2023/2/12 23:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 责任链上下文</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessContext</span>&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标识责任链的code</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储责任链上下文数据的模型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T processModel;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 责任链中断的标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Boolean needBreak;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 流程处理的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BasicResultVO&lt;T&gt; response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="IV-业务执行器"><a href="#IV-业务执行器" class="headerlink" title="IV.业务执行器"></a>IV.业务执行器</h4><p>业务执行模板中的校验节点，每一个节点都是一个环节的校验流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2023/2/12 23:45</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 业务执行器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BusinessProcess</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务校验逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 责任链上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">verify</span><span class="params">(ProcessContext&lt;T&gt; context)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模拟示例"><a href="#模拟示例" class="headerlink" title="模拟示例"></a>模拟示例</h3><p>通过容器中的ProcessController可以获取到项目中的所有执行模板，通过context上下文中的code,获取相应的校验链，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2023/2/14 23:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: XXXX</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SendService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProcessController processController;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SendResponse <span class="title function_">send</span><span class="params">(SendRequest sendRequest)</span> &#123;</span><br><span class="line">        <span class="type">SendTaskModel</span> <span class="variable">sendTaskModel</span> <span class="operator">=</span> SendTaskModel.builder()</span><br><span class="line">                .messageTemplateId(sendRequest.getMessageTemplateId())</span><br><span class="line">                .messageParamList(Collections.singletonList(sendRequest.getMessageParam()))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="type">ProcessContext</span> <span class="variable">context</span> <span class="operator">=</span> ProcessContext.builder()</span><br><span class="line">                .code(sendRequest.getCode())</span><br><span class="line">                .processModel(sendTaskModel)</span><br><span class="line">                .needBreak(<span class="literal">false</span>)</span><br><span class="line">                .response(BasicResultVO.success()).build();</span><br><span class="line"></span><br><span class="line">        <span class="type">ProcessContext</span> <span class="variable">process</span> <span class="operator">=</span> processController.execute(context);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SendResponse</span>(process.getResponse().getStatus(), process.getResponse().getMsg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SendResponse <span class="title function_">batchSend</span><span class="params">(BatchSendRequest batchSendRequest)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="校验函数"><a href="#校验函数" class="headerlink" title="校验函数"></a>校验函数</h4><h5 id="Step1-前置参数校验"><a href="#Step1-前置参数校验" class="headerlink" title="Step1:前置参数校验"></a>Step1:前置参数校验</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2023/2/14 22:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:  Step1:前置参数校验</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PreParamCheckAction</span> <span class="keyword">implements</span> <span class="title class_">BusinessProcess</span>&lt;SendTaskModel&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">verify</span><span class="params">(ProcessContext&lt;SendTaskModel&gt; context)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Step1:前置参数校验&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Step2-拼装参数"><a href="#Step2-拼装参数" class="headerlink" title="Step2: 拼装参数"></a>Step2: 拼装参数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2023/2/14 22:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Step2: 拼装参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AssembleAction</span> <span class="keyword">implements</span> <span class="title class_">BusinessProcess</span>&lt;SendTaskModel&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">verify</span><span class="params">(ProcessContext&lt;SendTaskModel&gt; context)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Step2: 拼装参数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Step3-后置参数校验"><a href="#Step3-后置参数校验" class="headerlink" title="Step3:后置参数校验"></a>Step3:后置参数校验</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2023/2/14 22:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Step3:后置参数校验</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AfterParamCheckAction</span> <span class="keyword">implements</span> <span class="title class_">BusinessProcess</span>&lt;SendTaskModel&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">verify</span><span class="params">(ProcessContext&lt;SendTaskModel&gt; context)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Step3:后置参数校验&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Step4-MQ消息发送"><a href="#Step4-MQ消息发送" class="headerlink" title="Step4: MQ消息发送"></a>Step4: MQ消息发送</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2023/2/14 22:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Step4: MQ消息发送   削峰,降流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMqAction</span> <span class="keyword">implements</span> <span class="title class_">BusinessProcess</span>&lt;SendTaskModel&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">verify</span><span class="params">(ProcessContext&lt;SendTaskModel&gt; context)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Step4: MQ消息发送&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">将本站针对butterfly主题的亿点点小改动做个集锦。</summary>
    
    
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="责任链模式" scheme="http://example.com/tags/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>MySQL安装与配置</title>
    <link href="http://example.com/posts/8ae56098.html"/>
    <id>http://example.com/posts/8ae56098.html</id>
    <published>2022-11-10T23:49:54.000Z</published>
    <updated>2023-03-29T16:44:34.013Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载MySQL压缩包"><a href="#下载MySQL压缩包" class="headerlink" title="下载MySQL压缩包"></a>下载MySQL压缩包</h2><p><a href="https://dev.mysql.com/downloads/mysql/" title="MySQL8.0下载">MySQL8.0下载</a><br><a href="https://downloads.mysql.com/archives/community/" title="MySQL5.7下载">MySQL5.7下载</a></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>新建data目录和my.ini文件<br><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/20220630134746.png" alt=""><br>修改my.ini文件用记事本打开my.ini 放入如下代码（basedir 和 datadir 的路径根据自己设置）。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[mysql]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置mysql客户端默认字符集</span></span><br><span class="line">default-character-set=utf8 </span><br><span class="line">[mysqld]</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置3306端口</span></span><br><span class="line">port = 3306 </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置mysql的安装目录</span></span><br><span class="line">basedir=D:\CODE-IDE\MySQL\mysql-5.7.32-winx64</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置mysql数据库的数据的存放目录</span></span><br><span class="line">datadir=D:\CODE-IDE\MySQL\mysql-5.7.32-winx64\data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">允许最大连接数</span></span><br><span class="line">max_connections=200</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务端使用的字符集默认为8比特编码的latin1字符集</span></span><br><span class="line">character-set-server=utf8</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建新表时将使用的默认存储引擎</span></span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure></p><h2 id="修改环境变量"><a href="#修改环境变量" class="headerlink" title="修改环境变量"></a>修改环境变量</h2><p>==在环境变量加入mysql的bin路径==<br><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/20220630135457.png" alt=""></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/20220630135550.png" alt=""></p><p>初始化mysql<br>切换到mysql的bin目录<br><code>mysqld --initialize</code><br><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/20220630135805.png" alt=""><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">如果此处报错 Can&#x27;t create/write to file 。。</span><br><span class="line">将my.ini文件如二 中的 basedir 和 datadir 路径见引号和双斜杠&amp;emsp;</span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir=&quot;D:\\tool\\Mysql\\mysql-5.7.26-winx64&quot;</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir=&quot;D:\\tool\\Mysql\\mysql-5.7.26-winx64\\data&quot;</span><br></pre></td></tr></table></figure></p><p><code>输入 mysqld --install</code></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/20220630140124.png" alt=""><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入 net start mysql         启动服务</span><br><span class="line">输入mysql -u root -p  回车  不用输入密码   继续回车进入数据库</span><br><span class="line">输入 use mysql</span><br><span class="line">输入  update mysql.user set authentication_string=password(&#x27;123456&#x27;) where user=&#x27;root&#x27;;    </span><br><span class="line">将修改 mysql中的 my.ini文件  删掉最后一行的代码（跳过表验证）skip-grant-tables</span><br><span class="line">重启服务（要切换到mysql的bin目录！！！！！！！！）   </span><br><span class="line">net stop mysql</span><br><span class="line">net start mysql</span><br></pre></td></tr></table></figure></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/20220630140251.png" alt=""></p>]]></content>
    
    
    <summary type="html">将本站针对butterfly主题的亿点点小改动做个集锦。</summary>
    
    
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
    <category term="数据库" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅的写Controller层</title>
    <link href="http://example.com/posts/0.html"/>
    <id>http://example.com/posts/0.html</id>
    <published>2022-11-06T15:08:30.000Z</published>
    <updated>2023-03-29T16:44:34.013Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p><p>本篇主要要介绍的就是 controller 层的处理，一个完整的后端请求由 4 部分组成：</p><ul><li>接口地址（也就是 URL 地址）</li><li>请求方式（一般就是 get、set，当然还有 put、delete）</li><li>请求数据（request，有 head 跟 body）</li><li>响应数据（response）</li></ul><p>本篇将解决以下 3 个问题：</p><ul><li>当接收到请求时，如何优雅的校验参数</li><li>返回响应数据该如何统一的进行处理</li><li>接收到请求，处理业务逻辑时抛出了异常又该如何处理</li></ul><p><strong>Controller 层参数接收（太基础了，可以跳过）</strong></p><p>常见的请求就分为 get 跟 post 两种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/product/product-info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductInfoController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ProductInfoService productInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findById&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ProductInfoQueryVo <span class="title function_">findById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> IPage <span class="title function_">findPage</span><span class="params">(Page page, ProductInfoQueryVo vo)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>RestController：</strong> 之前解释过，@RestController=@Controller+ResponseBody。</p><p>加上这个注解，springboot 就会吧这个类当成 controller 进行处理，然后把所有返回的参数放到 ResponseBody 中。</p><p><strong>@RequestMapping：</strong> 请求的前缀，也就是所有该 Controller 下的请求都需要加上 /product/product-info 的前缀。</p><p><strong>@GetMapping(“/findById”)：</strong> 标志这是一个 get 请求，并且需要通过 /findById 地址才可以访问到。</p><p><strong>@PostMapping(“/page”)：</strong> 同理，表示是个 post 请求。<br>参数：至于参数部分，只需要写上 ProductInfoQueryVo，前端过来的 json 请求便会通过映射赋值到对应的对象中，例如请求这么写，productId 就会自动被映射到 vo 对应的属性当中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">size : <span class="number">1</span></span><br><span class="line">current : <span class="number">1</span></span><br><span class="line"></span><br><span class="line">productId : <span class="number">1</span></span><br><span class="line">productName : 泡脚</span><br></pre></td></tr></table></figure><h4 id="返回格式"><a href="#返回格式" class="headerlink" title="| 返回格式"></a><strong>| 返回格式</strong></h4><p>为了跟前端妹妹打好关系，我们通常需要对后端返回的数据进行包装一下，增加一下状态码，状态信息，这样前端妹妹接收到数据就可以根据不同的状态码，判断响应数据状态，是否成功是否异常进行不同的显示。</p><p>当然这让你拥有了更多跟前端妹妹的交流机会，假设我们约定了 1000 就是成功的意思。</p><p>如果你不封装，那么返回的数据是这样子的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;productId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&quot;productName&quot;</span>: <span class="string">&quot;泡脚&quot;</span>,</span><br><span class="line">  <span class="string">&quot;productPrice&quot;</span>: <span class="number">100.00</span>,</span><br><span class="line">  <span class="string">&quot;productDescription&quot;</span>: <span class="string">&quot;中药泡脚加按摩&quot;</span>,</span><br><span class="line">  <span class="string">&quot;productStatus&quot;</span>: <span class="number">0</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过封装以后时这样子的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;code&quot;</span>: <span class="number">1000</span>,</span><br><span class="line">  <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;请求成功&quot;</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;productId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;productName&quot;</span>: <span class="string">&quot;泡脚&quot;</span>,</span><br><span class="line">    <span class="string">&quot;productPrice&quot;</span>: <span class="number">100.00</span>,</span><br><span class="line">    <span class="string">&quot;productDescription&quot;</span>: <span class="string">&quot;中药泡脚加按摩&quot;</span>,</span><br><span class="line">    <span class="string">&quot;productStatus&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="封装-ResultVo"><a href="#封装-ResultVo" class="headerlink" title="| 封装 ResultVo"></a><strong>| 封装 ResultVo</strong></h4><p>这些状态码肯定都是要预先编好的，怎么编呢？写个常量 1000？还是直接写死 1000？</p><p>要这么写就真的书白读的了，写状态码当然是用枚举拉：</p><p><strong>①</strong>首先先定义一个状态码的接口，所有状态码都需要实现它，有了标准才好做事：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StatusCode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>②</strong>然后去找前端妹妹，跟他约定好状态码（这可能是你们唯一的约定了）枚举类嘛，当然不能有 setter 方法了，因此我们不能在用 @Data 注解了，我们要用 @Getter。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ResultCode</span> <span class="keyword">implements</span> <span class="title class_">StatusCode</span>&#123;</span><br><span class="line">    SUCCESS(<span class="number">1000</span>, <span class="string">&quot;请求成功&quot;</span>),</span><br><span class="line">    FAILED(<span class="number">1001</span>, <span class="string">&quot;请求失败&quot;</span>),</span><br><span class="line">    VALIDATE_ERROR(<span class="number">1002</span>, <span class="string">&quot;参数校验失败&quot;</span>),</span><br><span class="line">    RESPONSE_PACK_ERROR(<span class="number">1003</span>, <span class="string">&quot;response返回包装失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    ResultCode(<span class="type">int</span> code, String msg) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>③</strong>写好枚举类，就开始写 ResultVo 包装类了，我们预设了几种默认的方法，比如成功的话就默认传入 object 就可以了，我们自动包装成 success。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultVo</span> &#123;</span><br><span class="line">    <span class="comment">// 状态码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 状态信息</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回对象</span></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 手动设置返回vo</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResultVo</span><span class="params">(<span class="type">int</span> code, String msg, Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认返回成功状态码，数据对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResultVo</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = ResultCode.SUCCESS.getCode();</span><br><span class="line">        <span class="built_in">this</span>.msg = ResultCode.SUCCESS.getMsg();</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回指定状态码，数据对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResultVo</span><span class="params">(StatusCode statusCode, Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = statusCode.getCode();</span><br><span class="line">        <span class="built_in">this</span>.msg = statusCode.getMsg();</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只返回状态码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResultVo</span><span class="params">(StatusCode statusCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = statusCode.getCode();</span><br><span class="line">        <span class="built_in">this</span>.msg = statusCode.getMsg();</span><br><span class="line">        <span class="built_in">this</span>.data = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用，现在的返回肯定就不是 return data；这么简单了，而是需要 new ResultVo(data)；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/findByVo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResultVo <span class="title function_">findByVo</span><span class="params">(<span class="meta">@Validated</span> ProductInfoVo vo)</span> &#123;</span><br><span class="line">    <span class="type">ProductInfo</span> <span class="variable">productInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProductInfo</span>();</span><br><span class="line">    BeanUtils.copyProperties(vo, productInfo);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultVo</span>(productInfoService.getOne(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>(productInfo)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后返回就会是上面带了状态码的数据了。</p><p><strong>统一校验</strong></p><h4 id="原始做法"><a href="#原始做法" class="headerlink" title="| 原始做法"></a><strong>| 原始做法</strong></h4><p>假设有一个添加 ProductInfo 的接口，在没有统一校验时，我们需要这么做。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductInfoVo</span> &#123;</span><br><span class="line">    <span class="comment">// 商品名称</span></span><br><span class="line">    <span class="keyword">private</span> String productName;</span><br><span class="line">    <span class="comment">// 商品价格</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal productPrice;</span><br><span class="line">    <span class="comment">// 上架状态</span></span><br><span class="line">    <span class="keyword">private</span> Integer productStatus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/findByVo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ProductInfo <span class="title function_">findByVo</span><span class="params">(ProductInfoVo vo)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotBlank(vo.getProductName())) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">APIException</span>(<span class="string">&quot;商品名称不能为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != vo.getProductPrice() &amp;&amp; vo.getProductPrice().compareTo(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">0</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">APIException</span>(<span class="string">&quot;商品价格不能为负数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="type">ProductInfo</span> <span class="variable">productInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProductInfo</span>();</span><br><span class="line">    BeanUtils.copyProperties(vo, productInfo);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultVo</span>(productInfoService.getOne(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>(productInfo)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这 if 写的人都傻了，能忍吗？肯定不能忍啊。</p><h4 id="Validated-参数校验"><a href="#Validated-参数校验" class="headerlink" title="| @Validated 参数校验"></a><strong>| @Validated 参数校验</strong></h4><p>好在有 @Validated，又是一个校验参数必备良药了。有了 @Validated 我们只需要再 vo 上面加一点小小的注解，便可以完成校验功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductInfoVo</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull(message = &quot;商品名称不允许为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String productName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min(value = 0, message = &quot;商品价格不允许为负数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal productPrice;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer productStatus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/findByVo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ProductInfo <span class="title function_">findByVo</span><span class="params">(<span class="meta">@Validated</span> ProductInfoVo vo)</span> &#123;</span><br><span class="line">    <span class="type">ProductInfo</span> <span class="variable">productInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProductInfo</span>();</span><br><span class="line">    BeanUtils.copyProperties(vo, productInfo);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultVo</span>(productInfoService.getOne(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>(productInfo)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行看看，如果参数不对会发生什么？</p><p>我们故意传一个价格为 -1 的参数过去：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">productName : 泡脚</span><br><span class="line">productPrice : -<span class="number">1</span></span><br><span class="line">productStatus : <span class="number">1</span></span><br></pre></td></tr></table></figure><p>我们故意传一个价格为 -1 的参数过去：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-04-19T03:06:37.268+0000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">400</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bad Request&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;errors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;codes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;Min.productInfoVo.productPrice&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;Min.productPrice&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;Min.java.math.BigDecimal&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;Min&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;arguments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;codes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;productInfoVo.productPrice&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;productPrice&quot;</span></span><br><span class="line">          <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;defaultMessage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;productPrice&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;productPrice&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">0</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;defaultMessage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;商品价格不允许为负数&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;objectName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;productInfoVo&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;productPrice&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;rejectedValue&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;bindingFailure&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Min&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Validation failed for object\u003d\u0027productInfoVo\u0027. Error count: 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;trace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 1 errors\nField error in object \u0027productInfoVo\u0027 on field \u0027productPrice\u0027: rejected value [-1]; codes [Min.productInfoVo.productPrice,Min.productPrice,Min.java.math.BigDecimal,Min]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [productInfoVo.productPrice,productPrice]; arguments []; default message [productPrice],0]; default message [商品价格不允许为负数]\n\tat&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/leilema/product/product-info/findByVo&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>大功告成了吗？虽然成功校验了参数，也返回了异常，并且带上”商品价格不允许为负数”的信息。</p><p>但是你要是这样返回给前端，前端妹妹就提刀过来了，当年约定好的状态码，你个负心人说忘就忘？</p><p>用户体验小于等于 0 啊！所以我们要进行优化一下，每次出现异常的时候，自动把状态码写好，不负妹妹之约！</p><h4 id="优化异常处理"><a href="#优化异常处理" class="headerlink" title="| 优化异常处理"></a><strong>| 优化异常处理</strong></h4><p>首先我们先看看校验参数抛出了什么异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Resolved [org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: <span class="number">1</span> errors</span><br></pre></td></tr></table></figure><p>我们看到代码抛出了 org.springframework.validation.BindException 的绑定异常，因此我们的思路就是 AOP 拦截所有 controller，然后异常的时候统一拦截起来，进行封装！完美！</p><p>玩你个头啊完美，这么呆瓜的操作 springboot 不知道吗？spring mvc 当然知道拉，所以给我们提供了一个 @RestControllerAdvice 来增强所有 @RestController，然后使用 @ExceptionHandler 注解，就可以拦截到对应的异常。</p><p>这里我们就拦截 BindException.class 就好了。最后在返回之前，我们对异常信息进行包装一下，包装成 ResultVo，当然要跟上 ResultCode.VALIDATE_ERROR 的异常状态码。</p><p>这样前端妹妹看到 VALIDATE_ERROR 的状态码，就会调用数据校验异常的弹窗提示用户哪里没填好。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerExceptionAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;BindException.class&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultVo <span class="title function_">MethodArgumentNotValidExceptionHandler</span><span class="params">(BindException e)</span> &#123;</span><br><span class="line">        <span class="comment">// 从异常对象中拿到ObjectError对象</span></span><br><span class="line">        <span class="type">ObjectError</span> <span class="variable">objectError</span> <span class="operator">=</span> e.getBindingResult().getAllErrors().get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultVo</span>(ResultCode.VALIDATE_ERROR, objectError.getDefaultMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来看看效果，完美。1002 与前端妹妹约定好的状态码：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">1002</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;参数校验失败&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;商品价格不允许为负数&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>统一响应</strong></p><h4 id="统一包装响应"><a href="#统一包装响应" class="headerlink" title="| 统一包装响应"></a><strong>| 统一包装响应</strong></h4><p>再回头看一下 controller 层的返回：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultVo</span>(productInfoService.getOne(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>(productInfo)));</span><br></pre></td></tr></table></figure><p>开发小哥肯定不乐意了，谁有空天天写 new ResultVo(data) 啊，我就想返回一个实体！怎么实现我不管！</p><p>好把，那就是 AOP 拦截所有 Controller，再 @After 的时候统一帮你封装一下咯!</p><p>怕是上一次脸打的不够疼，springboot 能不知道这么个操作吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice(basePackages = &#123;&quot;com.bugpool.leilema&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerResponseAdvice</span> <span class="keyword">implements</span> <span class="title class_">ResponseBodyAdvice</span>&lt;Object&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(MethodParameter methodParameter, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass)</span> &#123;</span><br><span class="line">        <span class="comment">// response是ResultVo类型，或者注释了NotControllerResponseAdvice都不进行包装</span></span><br><span class="line">        <span class="keyword">return</span> !methodParameter.getParameterType().isAssignableFrom(ResultVo.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">beforeBodyWrite</span><span class="params">(Object data, MethodParameter returnType, MediaType mediaType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass, ServerHttpRequest request, ServerHttpResponse response)</span> &#123;</span><br><span class="line">        <span class="comment">// String类型不能直接包装</span></span><br><span class="line">        <span class="keyword">if</span> (returnType.getGenericParameterType().equals(String.class)) &#123;</span><br><span class="line">            <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 将数据包装在ResultVo里后转换为json串进行返回</span></span><br><span class="line">                <span class="keyword">return</span> objectMapper.writeValueAsString(<span class="keyword">new</span> <span class="title class_">ResultVo</span>(data));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">APIException</span>(ResultCode.RESPONSE_PACK_ERROR, e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 否则直接包装成ResultVo返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultVo</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>①@RestControllerAdvice(basePackages = {“com.bugpool.leilema”}) 自动扫描了所有指定包下的 controller，在 Response 时进行统一处理。</p><p>②重写 supports 方法，也就是说，当返回类型已经是 ResultVo 了，那就不需要封装了，当不等与 ResultVo 时才进行调用 beforeBodyWrite 方法，跟过滤器的效果是一样的。</p><p>③最后重写我们的封装方法 beforeBodyWrite，注意除了 String 的返回值有点特殊，无法直接封装成 json，我们需要进行特殊处理，其他的直接 new ResultVo(data); 就 ok 了。</p><p>打完收工，看看效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/findByVo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ProductInfo <span class="title function_">findByVo</span><span class="params">(<span class="meta">@Validated</span> ProductInfoVo vo)</span> &#123;</span><br><span class="line">    <span class="type">ProductInfo</span> <span class="variable">productInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProductInfo</span>();</span><br><span class="line">    BeanUtils.copyProperties(vo, productInfo);</span><br><span class="line">    <span class="keyword">return</span> productInfoService.getOne(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>(productInfo));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时就算我们返回的是 po，接收到的返回就是标准格式了，开发小哥露出了欣慰的笑容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;code&quot;</span>: <span class="number">1000</span>,</span><br><span class="line">  <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;请求成功&quot;</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;productId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;productName&quot;</span>: <span class="string">&quot;泡脚&quot;</span>,</span><br><span class="line">    <span class="string">&quot;productPrice&quot;</span>: <span class="number">100.00</span>,</span><br><span class="line">    <span class="string">&quot;productDescription&quot;</span>: <span class="string">&quot;中药泡脚加按摩&quot;</span>,</span><br><span class="line">    <span class="string">&quot;productStatus&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="NOT-统一响应"><a href="#NOT-统一响应" class="headerlink" title="| NOT 统一响应"></a><strong>| NOT 统一响应</strong></h4><p><strong>不开启统一响应原因： 开发小哥是开心了，可是其他系统就不开心了。举个例子：我们项目中集成了一个健康检测的功能，也就是这货。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HealthController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/health&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">health</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>公司部署了一套校验所有系统存活状态的工具，这工具就定时发送 get 请求给我们系统：</p><blockquote><p>“兄弟，你死了吗？”<br>“我没死，滚”<br>“兄弟，你死了吗？”<br>“我没死，滚”</p></blockquote><p><strong>是的，web 项目的本质就是复读机。一旦发送的请求没响应，就会给负责人发信息（企业微信或者短信之类的），你的系统死啦！赶紧回来排查 bug 吧！</strong></p><p><strong>好吧，没办法，人家是老大，人家要的返回不是：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;请求成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;success&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>人家要的返回只要一个 success，人家定的标准不可能因为你一个系统改。俗话说的好，如果你改变不了环境，那你就只能改变我自己</p><p><strong>新增不进行封装注解： 因为百分之 99 的请求还是需要包装的，只有个别不需要，写在包装的过滤器吧？又不是很好维护，那就加个注解好了。所有不需要包装的就加上这个注解。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NotControllerResponseAdvice &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在我们的增强过滤方法上过滤包含这个注解的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice(basePackages = &#123;&quot;com.bugpool.leilema&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerResponseAdvice</span> <span class="keyword">implements</span> <span class="title class_">ResponseBodyAdvice</span>&lt;Object&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(MethodParameter methodParameter, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass)</span> &#123;</span><br><span class="line">        <span class="comment">// response是ResultVo类型，或者注释了NotControllerResponseAdvice都不进行包装</span></span><br><span class="line">        <span class="keyword">return</span> !(methodParameter.getParameterType().isAssignableFrom(ResultVo.class)</span><br><span class="line">                || methodParameter.hasMethodAnnotation(NotControllerResponseAdvice.class));</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>最后就在不需要包装的方法上加上注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HealthController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/health&quot;)</span></span><br><span class="line">    <span class="meta">@NotControllerResponseAdvice</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">health</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候就不会自动封装了，而其他没加注解的则依旧自动包装：<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b14ee0c1a9874565bd6a016a74614813~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="图片"></p><p><strong>统一异常</strong></p><p>每个系统都会有自己的业务异常，比如库存不能小于 0 子类的，这种异常并非程序异常，而是业务操作引发的异常，我们也需要进行规范的编排业务异常状态码，并且写一个专门处理的异常类，最后通过刚刚学习过的异常拦截统一进行处理，以及打日志.</p><p>①异常状态码枚举，既然是状态码，那就肯定要实现我们的标准接口 StatusCode。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  <span class="title class_">AppCode</span> <span class="keyword">implements</span> <span class="title class_">StatusCode</span> &#123;</span><br><span class="line"></span><br><span class="line">    APP_ERROR(<span class="number">2000</span>, <span class="string">&quot;业务异常&quot;</span>),</span><br><span class="line">    PRICE_ERROR(<span class="number">2001</span>, <span class="string">&quot;价格异常&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    AppCode(<span class="type">int</span> code, String msg) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②异常类，这里需要强调一下，code 代表 AppCode 的异常状态码，也就是 2000；msg 代表业务异常，这只是一个大类，一般前端会放到弹窗 title 上；最后 super(message); 这才是抛出的详细信息，在前端显示在弹窗体中，在 ResultVo 则保存在 data 中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">APIException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 手动设置异常</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">APIException</span><span class="params">(StatusCode statusCode, String message)</span> &#123;</span><br><span class="line">        <span class="comment">// message用于用户设置抛出错误详情，例如：当前价格-5，小于0</span></span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="comment">// 状态码</span></span><br><span class="line">        <span class="built_in">this</span>.code = statusCode.getCode();</span><br><span class="line">        <span class="comment">// 状态码配套的msg</span></span><br><span class="line">        <span class="built_in">this</span>.msg = statusCode.getMsg();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认异常使用APP_ERROR状态码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">APIException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = AppCode.APP_ERROR.getCode();</span><br><span class="line">        <span class="built_in">this</span>.msg = AppCode.APP_ERROR.getMsg();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>③</strong>最后进行统一异常的拦截，这样无论在 service 层还是 controller 层，开发人员只管抛出 API 异常，不需要关系怎么返回给前端，更不需要关心日志的打印。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerExceptionAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;BindException.class&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultVo <span class="title function_">MethodArgumentNotValidExceptionHandler</span><span class="params">(BindException e)</span> &#123;</span><br><span class="line">        <span class="comment">// 从异常对象中拿到ObjectError对象</span></span><br><span class="line">        <span class="type">ObjectError</span> <span class="variable">objectError</span> <span class="operator">=</span> e.getBindingResult().getAllErrors().get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultVo</span>(ResultCode.VALIDATE_ERROR, objectError.getDefaultMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(APIException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResultVo <span class="title function_">APIExceptionHandler</span><span class="params">(APIException e)</span> &#123;</span><br><span class="line">        <span class="comment">// log.error(e.getMessage(), e); 由于还没集成日志框架，暂且放着，写上TODO</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultVo</span>(e.getCode(), e.getMsg(), e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>④</strong>最后使用，我们的代码只需要这么写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> == orderMaster) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">APIException</span>(AppCode.ORDER_NOT_EXIST, <span class="string">&quot;订单号不存在：&quot;</span> + orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">2003</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;订单不存在&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;订单号不存在：1998&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>就会自动抛出 AppCode.ORDER_NOT_EXIST 状态码的响应，并且带上异常详细信息订单号不存在：xxxx。</p><h4 id="统一权限验证"><a href="#统一权限验证" class="headerlink" title="| 统一权限验证"></a>| 统一权限验证</h4><p>在某个控制器中的参数中，需要从Request的Header中取到Authorization请求头，其中Authorization是Jwt的身份Token，我们需要取到Token中的uid字段，以用来判断当前的用户身份，在没有使用任何的权限身份管理框架的前提下，那么我们只能在Controller层进行一步步的调取，如果是有多个控制器的话，这样会增加很多的冗余代码，所以我们可以自己定义一个注解来减少我们的工作量</p><p>①首先，我们需要定义一个自定义注解，命名为<code>JwtToken</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.PARAMETER)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> JwtToken &#123;</span><br><span class="line"> </span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;uid&quot;</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②接下来我们需要一个解析器，其实在SpringBoot中已经为我们提供了相关的处理解析器-<code>HandlerMethodArgumentResolver</code>，我们只需要实现接口完成业务逻辑处理即可。</p><p><strong>supportsParameter</strong></p><p><code>supportsParameter</code>接口是用于判断是否需要对该参数进行解析，如果该接口的返回值为true，则会继续执行resolveArgument接口方法，所以我们这里应为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> parameter.hasParameterAnnotation(JwtToken.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>resolveArgument</strong></p><p><code>resolveArgument</code>接口是处理参数的分解，只有<code>supportsParameter</code>为true时才会调用此方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> webRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class="line">    <span class="type">String</span> <span class="variable">authorization</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">JwtToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(authorization!=<span class="literal">null</span>)&#123;</span><br><span class="line">        Annotation[] methodAnnotations = parameter.getParameterAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation methodAnnotation : methodAnnotations) &#123;</span><br><span class="line">            <span class="keyword">if</span>(methodAnnotation <span class="keyword">instanceof</span> JwtToken)&#123;</span><br><span class="line">                token = (JwtToken) methodAnnotation;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(token!=<span class="literal">null</span>)&#123;</span><br><span class="line">            result = JwtUtil.get(authorization,token.value());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中JwtUtil中取Token中的信息的方法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">get</span><span class="params">(String token,String key)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">DecodedJWT</span> <span class="variable">jwt</span> <span class="operator">=</span> JWT.decode(token);</span><br><span class="line">        <span class="keyword">return</span> jwt.getClaim(key).asString();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JWTDecodeException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这一步我们的所有步骤就已经完成了，于是我们可以给需要取值的参数加上<code>@JwtToken</code>即可，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">list</span><span class="params">(<span class="meta">@JwtToken</span> String uid)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okHasData(shopsService.list(uid));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本篇主要要介绍的就是 controller 层的处理，一个完整的后端请求由 4 部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接口地址（也就是 URL 地址）&lt;/li&gt;
&lt;li&gt;请求方式（一般就是 get、set，当然还有 pu</summary>
      
    
    
    
    
    <category term="后端" scheme="http://example.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="springboot" scheme="http://example.com/tags/springboot/"/>
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
</feed>
