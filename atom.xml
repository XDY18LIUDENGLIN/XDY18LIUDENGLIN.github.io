<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NaSaの家</title>
  
  <subtitle>你要藏好软弱，世界大雨滂沱，万物苟且而活，无人为你背负更多。</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-05-14T03:51:21.669Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>NASA</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ElasticSearch8-6学习 II</title>
    <link href="http://example.com/posts/f4106030.html"/>
    <id>http://example.com/posts/f4106030.html</id>
    <published>2023-05-12T22:38:11.000Z</published>
    <updated>2023-05-14T03:51:21.669Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>1.和现有数据中间件对比</p><p>现有流行的数据库中间件主要有关系型数据库，经典代表是 MySQL。</p><p>非关系型数据库有 Mongo， Redis，Es.</p><p>其中MySQL 为关系型数据库，支持事务，在存储数据前需要建立对应字段的类型，非常适合于结构化的的数据存储与查询，在数据查询场景下，默认返回所有满足匹配条件的记录，是我们使用最为频繁的数据库。</p><p>Mongo:非关系型数据库，适合于非结构化文档类型数据存储.Mongo最大的特点是表结构灵活可变，字段类型可以随时修改,在插入数据之前是不需要去指定字段的类型的，可以直接把我们想要的数据直接插入到Mongo中。MongoDB很适合那些表结构经常改变，数据的逻辑结构没又没那么复杂不需要多表查询操作，数据量又比较大的应用场景。同样的原因，MongoDB不需要定义表结构这个特点给表结构的修改带来了极大的方便，但是也给多表查询、复杂事务等高级操作带来了阻碍。因此，如果想要存的数据的逻辑结构非常复杂，经常需要进行复杂的多表查询或者事务操作，那显然还是MySQL这类关系型数据库更合适。</p><p>Redis: 非关系型数据库，Redis本质上是一个Key-Value类型的内存数据库，整个数据库加载在内存当中操作,因此，性能特别出色，是已知性能最快的Key-Value 数据库。能够支持事务，但仅能保证语句的顺序执行。</p><p>Es： se本质是一个搜索引擎，但是它也具有分布式存储的能力。使用Json格式来承载数据模型，已经成为事实上的文档型数据库。相对与Mongo来说，他们都是文档型的数据库，只不过在产品的定位方面有所区分，Elasticsearch是更加擅长的基于查询搜索的分析型数据库，没有事务性需求,倾向OLAP；MongoDB定位于事务型应用层面OLTP</p><p><a href="https://www.oracle.com/cn/database/what-is-oltp/">什么是联机事务处理 (OLTP)？| Oracle 中国</a></p><div class="table-container"><table><thead><tr><th></th><th>MysQL</th><th>mongo</th><th>Redis</th><th>ElasticSerch</th></tr></thead><tbody><tr><td>查询速度(相对)</td><td>慢</td><td>中</td><td>快</td><td>快</td></tr><tr><td>支持事务</td><td>是</td><td>是()</td><td>是(仅能保证按顺序执行)</td><td>否</td></tr><tr><td>存储方式</td><td>在不同的引擎有不同的存储方式(常涉及IO)</td><td>虚拟内存+持久化</td><td>全部在内存，定期持久化备份</td><td>内存</td></tr><tr><td>数据结构</td><td>类似于excel</td><td>JSON格式和BSON格式</td><td>K-V格式</td><td>JSON格式</td></tr><tr><td>查询失效性</td><td>中等</td><td>高</td><td>极高</td><td>较高</td></tr><tr><td>关系型</td><td>是</td><td>否</td><td>否</td><td>否</td></tr><tr><td>拓展性</td><td>可通过分表等操作</td><td>通过复制集分片等</td><td>集群分片</td><td>集群分片</td></tr></tbody></table></div><p>2.使用场景</p><p><strong>ElasticSearch是什么？</strong></p><blockquote><p>Elasticsearch is a real-time, distributed storage, search, and analytics engine</p></blockquote><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.8/elasticsearch-intro.html">What is Elasticsearch? </a></p><p>Elasticsearch简称ES，是一个高扩展、开源、分布式的<strong>全文检索</strong>的<strong>检索引擎</strong>，它可以准实时地快速存储、搜索、分析海量的数据。而且ES本身扩展性很好，既可以扩展到上百台服务器，处理PB级别(大数据时代）的数据。</p><p>全文检索是指计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户的检索方式。这个过程类似于通过字典中的检索字表查字的过程。</p><p><strong>为什么要用ElasticSearch?</strong></p><p>我们在日常开发中，明明数据库也能实现相同的功能（实时、存储、搜索、分析），那我们为什么要用ElasticSearch,而不是上述的其他数据库。</p><p>那我们就先说一下其它数据库在全文检索这方面的缺陷，同时这也就是es在全文检索方面的优点。</p><p>首先是Mongo,同为文档型数据库，ES支持复杂的查询和聚合操作，支持分页、排序等高级查询操作，优化了查询和聚合性能，具有较高的查询效率，对于大数据量的搜索和聚合处理有较好的支持，适合用于数据分析和搜索等场景。而Mongo支持基本的查询和聚合操作，对于复杂查询和聚合操作的支持相对较弱，适合用于文档存储和简单的查询应用,性能相对较低，查询效率与数据量成正比，对于大数据量的查询和聚合处理存在一定的局限性。</p><p>其次是Redis.Redis的话，我们主要把它当作缓存来用的，很少使用Redis来进行全文检索这功能，因为他是一种k-v型的数据库，并不具有复杂的查询语句。</p><p>最后登场的就是MySQL，和Mongo类似，简单的查询应用,性能相对较低，查询效率与数据量成正比，对于大数据量的查询是非常慢的，例如，如果我想在数据库中查询一个关键词  [测试]</p><p><code>select * from content where name like &#39;%测试%&#39;</code></p><p>对于这种模糊查询，由于不符合最左前缀原则，是不会走索引的，如果数据量很小，暂且还没什么事情，如果数据量一旦大了起来，就会对整个表进行扫描，那么这种查询语句就会很慢了。</p><p>还有一种情况就是，我需要查询的关键词输错了，但是我仍然想要查询到对应的信息，例如,我在检索的时候输入的是EsssSearch，但是我仍然需要检索出ElasticSearch的相关信息。这种情况是其他几种数据库无法简单完成的，而对于Es来说，它是专门用来做检索的，这些情况就是它的应用场景。</p><div class="table-container"><table><thead><tr><th><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/Es%E8%81%94%E6%83%B3.png" style="zoom: 30%;" /><img src="https://img.zcool.cn/community/011a9d5968623fa8012193a3942f88.jpg@2o.jpg" style="zoom: 20%;" /></th><th></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p>3.原理依据</p><p><strong>为什么ElasticSearch那么快？</strong></p><p><a href="https://developer.aliyun.com/article/1082558?spm=a2c6h.24874632.expert-profile.83.3ace286bwa88Jn">倒排索引：ES倒排索引底层原理及FST算法的实现过程（一）</a></p><p><a href="https://developer.aliyun.com/article/1082566">倒排索引：ES倒排索引底层原理及FST算法的实现过程（二）</a></p><p>底层设计决定查询速度。</p><p>一本汉语字典，如果我们想要从中找到某个字，通常我们会通过字典最前面的拼音检索或者是部首检索来查找。其实汉语字典的正文本身就是一个索引，比如我们要查找“吴”字，很自然的就想到了“吴”的拼音是“wu”，w在26个字母中在很靠后的位置，基本上就可以确定“吴”字的大致位置，然后按照字典序可以在w字母的汉字里精确的找到这个字，因为汉字本身就是按照字典序排列的，这种按照一定规则排序的目录在关系型数据库中一般叫做“聚集索引”。</p><p>其中MySQL的底层也就是B+数据，但是这种数据结构并不适用于倒排索引。</p><p>而在Lucene中，存在一种数据结构也就是倒排索引【<a href="https://www.elastic.co/cn/what-is/elasticsearch">Elasticsearch索引</a>】，es的底层也就是Lucene，ucene会在Index time把索引字段的所有词项切分计算出来，并且按照字典序生成一个词项字典（Term Dictionary),  此项字段存储的是去重之后的所有词项。我们假设上图左侧的表格中term dictionary字段就是最终生成的词项字典，那么右侧的倒排表（Posting List）保存的就是所有包含当前词项的元数据的id的有序int数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1:Java is the best programming language</span><br><span class="line"></span><br><span class="line">2:C is the best programming language</span><br><span class="line"></span><br><span class="line">3:Golang is the best programming language</span><br></pre></td></tr></table></figure><p>这三份文本在插入的时候，会被分词器分割成类似于表格中的数据</p><div class="table-container"><table><thead><tr><th>term index</th><th>Term Dictionary</th><th>Posting List</th><th>标记匹配</th></tr></thead><tbody><tr><td></td><td>best</td><td>123</td><td></td></tr><tr><td></td><td>c</td><td>2</td><td></td></tr><tr><td></td><td>golang</td><td>3</td><td></td></tr><tr><td></td><td>is</td><td>123</td><td></td></tr><tr><td></td><td>java</td><td>1</td><td></td></tr><tr><td></td><td>language</td><td>123</td><td></td></tr><tr><td></td><td>programming</td><td>123</td><td></td></tr><tr><td></td><td>the</td><td>123</td></tr></tbody></table></div><p>换成图的话，就大概如同下面</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/20230505235829.png" style="zoom: 50%;" /></p><p>由于Term Dictionary 的数据是有序的，所有在查找的时候就可以通过二分查找去找到我们想要的数据，不需要去遍历整个Term  Dictionary.</p><p>但由于这个Term Dictionary会随着数据量的增加而暴增，所以肯定不能直接放到内存中，所以，Es在又加了一层Term index，Term Index在内存中是以<a href="https://developer.aliyun.com/article/1085384?spm=a2c6h.14164896.0.0.3e566d10n7oVrG">FST（Finite State Transducers）)</a>形式保存的，会很节省内存</p><p>除了Term Dictionary会随着数据量的上升而暴增，<strong>倒排表</strong>(Post List)这个里面的数据也会越来越多，在Term Dictionary 和Post List这两暴增的情况下，这个文件可能就会很大，所以需要对Post List也需要进行压缩。</p><p>PostList 使用两种压缩算法：<a href="https://juejin.cn/post/7085352076595134494">FOR(Frame Of Reference)算法</a>和<a href="https://cloud.tencent.com/developer/beta/article/1452030">RBM(Roaring Bitmaps)算法</a>，我们就只讲FOR算法。</p><p>我们以” The “这个Term 来为例，可能存在100W的倒排文件都有这个词，那么其Post List 展现的情况就是[1,2,3…100W]，</p><p>如果我们想要完全表示出这些id,那么就需要2的n次方&gt;100w,取最小值也就是20，但是对于其他大部分id来说，20个bit是远远足够的，这时就可以考虑是否可以用差值存储（dealta list），即不存储原本的数值，而是存储每个数值与前一个数字的差值，这时原本的数字组就变成了[1,1,1…1]，数组中共包含100W个1，难么所有的id都能够使用1个Bit存储下。当然实际情况不可能这个巧合，以下图[73，300，302，332，343，372]为例，就会存在需要2*8&gt;227, 每个Id就需要8Bit来存储，但实际上[2,30,11,29]只需要5Bit就够了，而第一个数组[73,227]还是使用8个bit存储每一个数字就够了，还需要存储一个元数据 73 记录第一个数据是多少，后面的数据才能知道自己的Id。</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/FOR%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95.png" alt="FOR压缩算法" style="zoom:67%;" /></p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.0/glossary.html">术语表 (elastic.co)</a></p><p>在这之中出现过以下几个概念</p><ol><li><strong>词条（term Index）</strong>：索引里面最小的存储和查询单元，对于英文来说是一个词，对于中文来说一般指分词后的一个词。</li><li><strong>词典</strong>(Term Dictionary) ：词条的组合。搜索引擎的通常索引单位是单词，单词词典是文档集合中出现过的所有单词构成的字符串集合，单词词典内每条索引项记载单词本身的一些信息以及指向倒排所有的指针。</li><li><strong>倒排表</strong>(Post List)：一个文档通常由多个词组成，倒排表记录的是某个词在哪些文档里出现过及出现的位置。每个记录称为一个倒排项，倒排表记录的不单单是文档编号，还记录了词频等信息。</li><li><strong>倒排文件</strong>：所有单词的倒排列表往往顺序地存储在磁盘的某个文件里，这个文件被称之为倒排文件，倒排文件是存储倒排索引的物理文件。</li></ol><p>4.优点和特性</p><ol><li>分布式性：ES是基于分布式的架构设计，可以很方便地进行横向扩展，满足高并发场景下的需求。</li><li>强大的搜索能力：ES具有全文搜索、聚合搜索、地理空间搜索等多种搜索能力，支持各种查询方式（如全文搜索、词条搜索、模糊搜索、正则表达式搜索等），并提供了高亮、排序、分页等功能。</li><li>高性能：ES使用倒排索引和分词技术，可以实现快速的搜索和数据分析，处理海量数据的能力非常强。</li><li>数据安全：ES提供了数据备份和容灾恢复功能，可以在节点故障或数据丢失时自动恢复数据，同时也提供了访问控制、身份认证等安全特性。</li><li>可扩展性：ES提供了插件和API接口，可以很方便地进行二次开发，扩展其功能。</li><li>易用性：ES提供了友好的Web界面，可以对索引、数据、节点等进行管理和监控。</li><li>社区支持：ES有一个庞大的社区支持，可以获得开源代码、插件、文档等支持。</li></ol><p>5.实际操作示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#创建索引</span><br><span class="line">PUT student</span><br><span class="line"></span><br><span class="line">#创建映射</span><br><span class="line">PUT student/_mapping</span><br><span class="line">&#123;</span><br><span class="line">    &quot;properties&quot;:&#123;</span><br><span class="line">        &quot;name&quot;:&#123;</span><br><span class="line">            &quot;type&quot;:&quot;text&quot;,</span><br><span class="line">            &quot;index&quot;:true</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sex&quot;:&#123;</span><br><span class="line">            &quot;type&quot;:&quot;keyword&quot;,</span><br><span class="line">            &quot;index&quot;:true</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;age&quot;:&#123;</span><br><span class="line">            &quot;type&quot;:&quot;keyword&quot;,</span><br><span class="line">            &quot;index&quot;:true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 插入相关数据</span><br><span class="line">POST student/_doc</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;张三&quot;,</span><br><span class="line">&quot;sex&quot;:&quot;man&quot;,</span><br><span class="line">&quot;age&quot;: &quot;18&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#查询指定索引下所有数据</span><br><span class="line">GET student/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;match_all&quot;:&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.优缺点</p><p>综上所述，Es在其查询分析这个主场上，拥有这个无可匹敌的优势，基于倒排索引以及Es的优化，可以快速查询文本内容和聚合信息，支持多种查询方式、聚合、地理空间搜索等功能，可以满足多种应用场景需求，具有非常丰富的功能。但是也存在相应的缺点，他需要专门的人员去维护他，然后非常消耗硬盘空间，还有重要的点是，需要一定花一定的时间和精力去学习和理解。</p><h3 id="Es基本概念"><a href="#Es基本概念" class="headerlink" title="Es基本概念"></a>Es基本概念</h3><p>ElasticSearch是面向文档型数据库的，一条数据就是一个文档。类比于关系型数据库MySQL，Es中的index相当于Database,Type相当于表(在7版本中已经删除了)，Document相当与表中的数据。</p><p>其类比关系如图:</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/Es%E7%BB%93%E6%9E%84%E7%B1%BB%E6%AF%94%E5%85%B3%E7%B3%BB%E5%9B%BE.png" alt="Es结构关系类比图" style="zoom: 33%;" /></p><p>在数据库的操作过程中，我们通常要存在对应的库，然后创建相应的表结构</p><p>在es中也需要执行相应的操作</p><ul><li>创建索引</li><li>创建映射</li><li>添加数据</li><li>条件查询</li></ul><h4 id="索引"><a href="#索引" class="headerlink" title=" 索引"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-create-index.html"> 索引</a></h4><p>我们可以通过 <code>PUT 索引名称</code>来创建对应的索引，如果创建 索引成功，会有下图提示</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/20230506003031.png" style="zoom:50%;" /></p><p>如果创建索引失败，那么就会返回如下错误</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/es%E9%87%8D%E5%A4%8D%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95%E5%A4%B1%E8%B4%A5.png" alt="重复创建索引" style="zoom: 25%;" /></p><h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.6/mapping.html">映射</a></h4><p>类型类似于 MySQL 中的字段类型，ES 字段类型主要有：核心类型、复杂类型、地理类型以及特殊类型，具体的数据类型可以从官网查看：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/mapping.html">Mapping | Elasticsearch</a></p><p>在创建完索之后 ，我们需要定义这个索引对应参数的类型，就需要通过创建对应的映射来确定字段的类型，我们可以通过以下命令来创建映射</p><p><code>PUS student/_mapping + 请求体内容</code>，例如</p><div class="table-container"><table><thead><tr><th><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E4%B8%BAsudent%E5%88%9B%E5%BB%BA%E6%98%A0%E5%B0%84.png" style="zoom: 33%;" /></th><th><img src="https://img-blog.csdnimg.cn/20200317003814117.png" alt="Es字段类型图" style="zoom: 25%;" /></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p>其中的参数类型示意如图下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- 字段名: 任意填写</span><br><span class="line">- type : 类型 Es中支持的数据类型存在有很多种，其中最为常用的是</span><br><span class="line">-String类型， 字符串类型 分两种</span><br><span class="line">-text : 可分词，支持模糊查询，支持准确查询，不支持聚合查询</span><br><span class="line">-keyword : 不可分词，数据只能最小单词来进行匹配，支持模糊查询，支持准确查询，支持聚合查询</span><br><span class="line">-Numerical： 数值类型 分两类</span><br><span class="line">基本数值类型: long， integer, short, byte, double, float, half_float</span><br><span class="line">浮点型的高精度类型: scaled_float</span><br><span class="line">-Date : 日期类型</span><br><span class="line">-Array: 数组类型</span><br><span class="line">-Object: 对象</span><br><span class="line">- index : 是否索引，默认为ture，意思就是说不进行配置，默认所有字段都能被检索出来</span><br><span class="line">-true : 字段能够被索引，能够被进行搜索</span><br><span class="line">-false : 字段不能被索引，不能用来进行搜索</span><br><span class="line">-ignore_above : 表示最大的字段值长度，超出这个长度的字段将不会被索引，但是会存储。</span><br></pre></td></tr></table></figure><blockquote><p>Tips1: Nested 嵌套类型</p></blockquote><p>需要注意的是嵌套类型Nested这种,如果用对象类型存放的是这种数据，由于Lucene 没有对象的概念，所以会将对象扁平化处理，此时数据之间就会丢失他们之间的关系，此时如果去查询不符合条件的数据，此时也可能查询的到。而Nested就是解决这种问题的，嵌套类型会将数据单独作为一个文挡独立存储</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#存放数据</span><br><span class="line">&#123;</span><br><span class="line">  &quot;group&quot;: &quot;users&quot;,</span><br><span class="line">  &quot;username&quot;: [</span><br><span class="line">&#123; &quot;first&quot;: &quot;wu&quot;, &quot;last&quot;: &quot;px&quot;&#125;,</span><br><span class="line">&#123; &quot;first&quot;: &quot;hu&quot;, &quot;last&quot;: &quot;xy&quot;&#125;,</span><br><span class="line">&#123; &quot;first&quot;: &quot;wu&quot;, &quot;last&quot;: &quot;mx&quot;&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#实际转换为</span><br><span class="line">&#123;</span><br><span class="line">  &quot;group&quot;: &quot;users&quot;,</span><br><span class="line">  &quot;username.first&quot;: [&quot;wu&quot;, &quot;hu&quot;, &quot;wu&quot;],</span><br><span class="line">  &quot;username.last&quot;: [&quot;px&quot;, &quot;xy&quot;, &quot;mx&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Tips2: <a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.6/dynamic.html">Dynamic Mapping  动态字段映射</a></p></blockquote><p>Mapping中的字段类型一旦设定后，禁止直接修改。是因为Lucene实现的倒排索引生成后不允许修改，如果修改了字段的数据类型，会导致已被索引的无法被搜索，但是如果是增加新的字段，就不会有这样的影响。默认<strong>dynamic</strong>是为True,可以添加新字段。</p><p>Dynamic Mapping 机制使我们不需要手动定义mapping, Es就能够文档信息来自动推断字段的类型。我们可以在创建索引的时候直接插入文档，或者说是在原有映射上插入了一个更多字段的文档。此时Es自动跟根据我们存入的文档信息来自动推断出合适的类型。</p><p>Es为这种机制提供了一个参数 <strong>dynamic</strong>，通过控制这个参数的值，我们就可以根据自己的业务在一开始就指定这个索引是否能够动态增加字段。</p><div class="table-container"><table><thead><tr><th style="text-align:left">策略</th><th style="text-align:left">功能说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>true</code></td><td style="text-align:left">新字段将添加到映射中（默认）。</td></tr><tr><td style="text-align:left"><code>false</code></td><td style="text-align:left">新字段将被忽略。这些字段不会被编入索引 或可搜索，但仍会显示在返回的命中字段中。不会添加这些字段到映射中，并且必须显式添加新字段</td></tr><tr><td style="text-align:left"><code>strict</code></td><td style="text-align:left">遇到陌生字段时, 作报错处理如，必须将新字段显式添加到映射中。</td></tr><tr><td style="text-align:left"><code>runtime</code></td><td style="text-align:left">新字段将作为<a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.6/runtime.html">运行时字段</a>添加到映射中。 这些字段不会编制索引，而是在查询时加载</td></tr></tbody></table></div><hr><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html">插入数据</a></h4><p>在创建了索引和映射后，我们就已经确定了哪些字段能够被检索到，哪些能够被精确检索到,我们可以通过以下语句来为指定索引插入对应数据</p><p><strong>单条写入PUT/POST：</strong></p><ol><li>PUT:     需要设定数据ID [同一条数据首次插入是created，再次插入会updated</li><li>POST:     可选择设定数据ID[不指定id情况下：同一条数据首次插入是created，再次插入还是created，但_id会变，等于是新加了一条一样的数据；如果指定id若id不变第二次插入失败]</li></ol><p><strong>多条写入</strong></p><p>如果是需要多条写入的话，就需要</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST _bulk</span><br><span class="line">&#123;index:&#123;&quot;_index&quot;:<span class="string">&quot;student&quot;</span>, <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;&#125;</span><br><span class="line">...</span><br><span class="line">&#123;index:&#123;&quot;_index&quot;:<span class="string">&quot;student&quot;</span>, <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;2&quot;</span>&#125;&#125;</span><br><span class="line">...</span><br><span class="line">&#123;index:&#123;&quot;_index&quot;:<span class="string">&quot;student&quot;</span>, <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;3&quot;</span>&#125;&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>PUT sutdent/_doc + 插入数据</code>，例如，我需要插入以下数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST student/_doc</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;张三&quot;,</span><br><span class="line">&quot;sex&quot;:&quot;man&quot;,</span><br><span class="line">&quot;age&quot;: &quot;18&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询-DSL-SQL"><a href="#查询-DSL-SQL" class="headerlink" title="查询 DSL + SQL"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/query-dsl-bool-query.html">查询 DSL</a> + SQL</h4><p>此时如果我想要像MySQL一样条件查询Es的话</p><div class="table-container"><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>must</code></td><td>子句（查询）必须出现在匹配的文档中，并且将 贡献分数。</td></tr><tr><td><code>filter</code></td><td>子句（查询）必须出现在匹配的文档中。但是，与查询的分数不同的是，该查询的分数将被忽略。执行筛选子句 在<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/query-filter-context.html">筛选器上下文</a>中，意味着忽略评分 和子句考虑用于缓存。<code>must</code></td></tr><tr><td><code>should</code></td><td>子句（查询）应出现在匹配文档中。</td></tr><tr><td><code>must_not</code></td><td>子句（查询）不得出现在匹配项中 文件。子句在<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/query-filter-context.html">过滤器上下文</a>中执行，含义 该评分将被忽略，子句被考虑用于缓存。因为得分是 忽略，则返回“对于所有文档”的分数。<code>0</code></td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; </span><br><span class="line">    &quot;bool&quot;: &#123; </span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;title&quot;:   &quot;Search&quot;        &#125;&#125;, </span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;content&quot;: &quot;Elasticsearch&quot; &#125;&#125;  </span><br><span class="line">      ],</span><br><span class="line">      &quot;filter&quot;: [ </span><br><span class="line">        &#123; &quot;term&quot;:  &#123; &quot;status&quot;: &quot;published&quot; &#125;&#125;, </span><br><span class="line">        &#123; &quot;range&quot;: &#123; &quot;publish_date&quot;: &#123; &quot;gte&quot;: &quot;2015-01-01&quot; &#125;&#125;&#125; </span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.6/sql-getting-started.html">Elasticsearch SQL</a></p><p>一般使用 <code>Elasticsearch</code> 的时候，会使用 <code>Query DSL</code> 来查询数据，从 <code>Elasticsearch6.3</code> 版本以后，<code>Elasticsearch</code> 已经支持<code>SQL</code>查询了。</p><p><code>Elasticsearch SQL</code> 是一个 <code>X-Pack</code> 组件，它允许针对 <code>Elasticsearch</code> 实时执行类似<code>SQL</code>的 查询。无论使用<code>REST</code>接口，命令行还是<code>JDBC</code>，任何客户端都可以使用<code>SQL</code>对 <code>Elasticsearch</code>中的数据进行原生搜索和聚合数据。可以将 <code>Elasticsearch SQL</code> 看作是一种翻译器，它可以将 <code>SQL</code>翻译成 <code>Query DSL</code>。</p><p>Elasticsearch_SQL具有如下特性</p><ul><li>原生集成 <code>Elasticsearch SQL</code> 是为 <code>Elasticsearch</code> 从头开始构建的。每个查询都根据底层存储有效地针对相关节点执行。</li><li>没有外部零件 无需额外的硬件、进程、运行时或库来查询 <code>Elasticsearch</code>；<code>Elasticsearch SQL</code> 通过在<code>Elasticsearch</code> 内部运行消除了额外的移动部件。</li><li>轻巧高效 <code>Elasticsearch SQL</code>并未抽象化其搜索功能，相反的它拥抱并接受了<code>SQL</code>来 实现全文搜索，以简洁的方式实时运行全文搜索。</li></ul><p>其中SQL和Es的映射关系可以看上图，也可以通过官网查看对应关系 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.6/_mapping_concepts_across_sql_and_elasticsearch.html">结构关系对应</a></p><p><em>示例</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 可以通过 format参数控制返回结果的格式，默认为  json格式 </span><br><span class="line">#       txt:表示文本格式，看起来更直观点. </span><br><span class="line">#       csv:使用逗号隔开的数据 </span><br><span class="line">#       json:JSON格式数据 </span><br><span class="line">#       tsv: 使用  tab键隔开数据 </span><br><span class="line">#       yaml:属性配置格式 </span><br><span class="line">POST _sql?format=txt </span><br><span class="line">&#123; </span><br><span class="line">    &quot;query&quot;: &quot;&quot;&quot; </span><br><span class="line">      SELECT * FROM &quot;my-sql-index&quot; </span><br><span class="line">    &quot;&quot;&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="聚合分析"><a href="#聚合分析" class="headerlink" title="聚合分析"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.6/search-aggregations.html">聚合分析</a></h4>]]></content>
    
    
    <summary type="html">将本站针对butterfly主题的亿点点小改动做个集锦。</summary>
    
    
    
    
    <category term="ElasticSearch" scheme="http://example.com/tags/ElasticSearch/"/>
    
    <category term="搜索" scheme="http://example.com/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>DateTime时间工具类</title>
    <link href="http://example.com/posts/d78cedf0.html"/>
    <id>http://example.com/posts/d78cedf0.html</id>
    <published>2023-04-11T23:58:12.000Z</published>
    <updated>2023-05-14T03:51:21.669Z</updated>
    
    <content type="html"><![CDATA[<h4 id="DateTime时间工具类"><a href="#DateTime时间工具类" class="headerlink" title="DateTime时间工具类"></a>DateTime时间工具类</h4><p>```java<br>public class DateUtil {</p><pre><code>/** * 显示年月日时分秒，例如 2015-08-11 09:51:53. */public static final String DATETIME_PATTERN = &quot;yyyy-MM-dd HH:mm:ss&quot;;/** * 仅显示年月日，例如 2015-08-11. */public static final String DATE_PATTERN = &quot;yyyy-MM-dd&quot;;/** * 仅显示时分秒，例如 09:51:53. */public static final String TIME_PATTERN = &quot;HH:mm:ss&quot;;/** * 显示年月日时分秒(无符号)，例如 20150811095153. */public static final String UNSIGNED_DATETIME_PATTERN = &quot;yyyyMMddHHmmss&quot;;/** * 仅显示年月日(无符号)，例如 20150811. */public static final String UNSIGNED_DATE_PATTERN = &quot;yyyyMMdd&quot;;/** * 春天; */public static final Integer SPRING = 1;/** * 夏天; */public static final Integer SUMMER = 2;/** * 秋天; */public static final Integer AUTUMN = 3;/** * 冬天; */public static final Integer WINTER = 4;/** * 星期日; */public static final String SUNDAY = &quot;星期日&quot;;/** * 星期一; */public static final String MONDAY = &quot;星期一&quot;;/** * 星期二; */public static final String TUESDAY = &quot;星期二&quot;;/** * 星期三; */public static final String WEDNESDAY = &quot;星期三&quot;;/** * 星期四; */public static final String THURSDAY = &quot;星期四&quot;;/** * 星期五; */public static final String FRIDAY = &quot;星期五&quot;;/** * 星期六; */public static final String SATURDAY = &quot;星期六&quot;;/** * 年 */private static final String YEAR = &quot;year&quot;;/** * 月 */private static final String MONTH = &quot;month&quot;;/** * 周 */private static final String WEEK = &quot;week&quot;;/** * 日 */private static final String DAY = &quot;day&quot;;/** * 时 */private static final String HOUR = &quot;hour&quot;;/** * 分 */private static final String MINUTE = &quot;minute&quot;;/** * 秒 */private static final String SECOND = &quot;second&quot;;/** * 获取当前日期和时间字符串. * * @return String 日期时间字符串，例如 2015-08-11 09:51:53 */public static String getLocalDateTimeStr() &#123;    return format(LocalDateTime.now(), DATETIME_PATTERN);&#125;/** * 获取当前日期字符串. * * @return String 日期字符串，例如2015-08-11 */public static String getLocalDateStr() &#123;    return format(LocalDate.now(), DATE_PATTERN);&#125;/** * 获取当前时间字符串. * * @return String 时间字符串，例如 09:51:53 */public static String getLocalTimeStr() &#123;    return format(LocalTime.now(), TIME_PATTERN);&#125;/** * 获取当前星期字符串. * * @return String 当前星期字符串，例如 星期二 */public static String getDayOfWeekStr() &#123;    return format(LocalDate.now(), &quot;E&quot;);&#125;/** * 获取指定日期是星期几 * * @param localDate 日期 * @return String 星期几 */public static String getDayOfWeekStr(LocalDate localDate) &#123;    String[] weekOfDays = &#123;MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY&#125;;    int dayOfWeek = localDate.getDayOfWeek().getValue() - 1;    return weekOfDays[dayOfWeek];&#125;/** * 获取日期时间字符串 * * @param temporal 需要转化的日期时间 * @param pattern  时间格式 * @return String 日期时间字符串，例如 2015-08-11 09:51:53 */public static String format(TemporalAccessor temporal, String pattern) &#123;    DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(pattern);    return dateTimeFormatter.format(temporal);&#125;/** * 日期时间字符串转换为日期时间(java.time.LocalDateTime) * * @param localDateTimeStr 日期时间字符串 * @param pattern          日期时间格式 例如DATETIME_PATTERN * @return LocalDateTime 日期时间 */public static LocalDateTime parseLocalDateTime(String localDateTimeStr, String pattern) &#123;    DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(pattern);    return LocalDateTime.parse(localDateTimeStr, dateTimeFormatter);&#125;/** * 日期字符串转换为日期(java.time.LocalDate) * * @param localDateStr 日期字符串 * @param pattern      日期格式 例如DATE_PATTERN * @return LocalDate 日期 */public static LocalDate parseLocalDate(String localDateStr, String pattern) &#123;    DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(pattern);    return LocalDate.parse(localDateStr, dateTimeFormatter);&#125;/** * 获取指定日期时间加上指定数量日期时间单位之后的日期时间. * * @param localDateTime 日期时间 * @param num           数量 * @param chronoUnit    日期时间单位 * @return LocalDateTime 新的日期时间 */public static LocalDateTime plus(LocalDateTime localDateTime, int num, ChronoUnit chronoUnit) &#123;    return localDateTime.plus(num, chronoUnit);&#125;/** * 获取指定日期时间减去指定数量日期时间单位之后的日期时间. * * @param localDateTime 日期时间 * @param num           数量 * @param chronoUnit    日期时间单位 * @return LocalDateTime 新的日期时间 */public static LocalDateTime minus(LocalDateTime localDateTime, int num, ChronoUnit chronoUnit) &#123;    return localDateTime.minus(num, chronoUnit);&#125;/** * 根据ChronoUnit计算两个日期时间之间相隔日期时间 * * @param start      开始日期时间 * @param end        结束日期时间 * @param chronoUnit 日期时间单位 * @return long 相隔日期时间 */public static long getChronoUnitBetween(LocalDateTime start, LocalDateTime end, ChronoUnit chronoUnit) &#123;    return Math.abs(start.until(end, chronoUnit));&#125;/** * 根据ChronoUnit计算两个日期之间相隔年数或月数或天数 * * @param start      开始日期 * @param end        结束日期 * @param chronoUnit 日期时间单位,(ChronoUnit.YEARS,ChronoUnit.MONTHS,ChronoUnit.WEEKS,ChronoUnit.DAYS) * @return long 相隔年数或月数或天数 */public static long getChronoUnitBetween(LocalDate start, LocalDate end, ChronoUnit chronoUnit) &#123;    return Math.abs(start.until(end, chronoUnit));&#125;/** * 获取本年第一天的日期字符串 * * @return String 格式：yyyy-MM-dd 00:00:00 */public static String getFirstDayOfYearStr() &#123;    return getFirstDayOfYearStr(LocalDateTime.now());&#125;/** * 获取本年最后一天的日期字符串 * * @return String 格式：yyyy-MM-dd 23:59:59 */public static String getLastDayOfYearStr() &#123;    return getLastDayOfYearStr(LocalDateTime.now());&#125;/** * 获取指定日期当年第一天的日期字符串 * * @param localDateTime 指定日期时间 * @return String 格式：yyyy-MM-dd 00:00:00 */public static String getFirstDayOfYearStr(LocalDateTime localDateTime) &#123;    return getFirstDayOfYearStr(localDateTime, DATETIME_PATTERN);&#125;/** * 获取指定日期当年最后一天的日期字符串 * * @param localDateTime 指定日期时间 * @return String 格式：yyyy-MM-dd 23:59:59 */public static String getLastDayOfYearStr(LocalDateTime localDateTime) &#123;    return getLastDayOfYearStr(localDateTime, DATETIME_PATTERN);&#125;/** * 获取指定日期当年第一天的日期字符串,带日期格式化参数 * * @param localDateTime 指定日期时间 * @param pattern       日期时间格式 * @return String 格式：yyyy-MM-dd 00:00:00 */public static String getFirstDayOfYearStr(LocalDateTime localDateTime, String pattern) &#123;    return format(localDateTime.withDayOfYear(1).withHour(0).withMinute(0).withSecond(0), pattern);&#125;/** * 获取指定日期当年最后一天的日期字符串,带日期格式化参数 * * @param localDateTime 指定日期时间 * @param pattern       日期时间格式 * @return String 格式：yyyy-MM-dd 23:59:59 */public static String getLastDayOfYearStr(LocalDateTime localDateTime, String pattern) &#123;    return format(localDateTime.with(TemporalAdjusters.lastDayOfYear()).withHour(23).withMinute(59).withSecond(59), pattern);&#125;/** * 获取本月第一天的日期字符串 * * @return String 格式：yyyy-MM-dd 00:00:00 */public static String getFirstDayOfMonthStr() &#123;    return getFirstDayOfMonthStr(LocalDateTime.now());&#125;/** * 获取本月最后一天的日期字符串 * * @return String 格式：yyyy-MM-dd 23:59:59 */public static String getLastDayOfMonthStr() &#123;    return getLastDayOfMonthStr(LocalDateTime.now());&#125;/** * 获取指定日期当月第一天的日期字符串 * * @param localDateTime 指定日期时间 * @return String 格式：yyyy-MM-dd 23:59:59 */public static String getFirstDayOfMonthStr(LocalDateTime localDateTime) &#123;    return getFirstDayOfMonthStr(localDateTime, DATETIME_PATTERN);&#125;/** * 获取指定日期当月最后一天的日期字符串 * * @param localDateTime 指定日期时间 * @return String 格式：yyyy-MM-dd 23:59:59 */public static String getLastDayOfMonthStr(LocalDateTime localDateTime) &#123;    return getLastDayOfMonthStr(localDateTime, DATETIME_PATTERN);&#125;/** * 获取指定日期当月第一天的日期字符串,带日期格式化参数 * * @param localDateTime 指定日期时间 * @return String 格式：yyyy-MM-dd 00:00:00 */public static String getFirstDayOfMonthStr(LocalDateTime localDateTime, String pattern) &#123;    return format(localDateTime.withDayOfMonth(1).withHour(0).withMinute(0).withSecond(0), pattern);&#125;/** * 获取指定日期当月最后一天的日期字符串,带日期格式化参数 * * @param localDateTime 指定日期时间 * @param pattern       日期时间格式 * @return String 格式：yyyy-MM-dd 23:59:59 */public static String getLastDayOfMonthStr(LocalDateTime localDateTime, String pattern) &#123;    return format(localDateTime.with(TemporalAdjusters.lastDayOfMonth()).withHour(23).withMinute(59).withSecond(59), pattern);&#125;/** * 获取本周第一天的日期字符串 * * @return String 格式：yyyy-MM-dd 00:00:00 */public static String getFirstDayOfWeekStr() &#123;    return getFirstDayOfWeekStr(LocalDateTime.now());&#125;/** * 获取本周最后一天的日期字符串 * * @return String 格式：yyyy-MM-dd 23:59:59 */public static String getLastDayOfWeekStr() &#123;    return getLastDayOfWeekStr(LocalDateTime.now());&#125;/** * 获取指定日期当周第一天的日期字符串,这里第一天为周一 * * @param localDateTime 指定日期时间 * @return String 格式：yyyy-MM-dd 00:00:00 */public static String getFirstDayOfWeekStr(LocalDateTime localDateTime) &#123;    return getFirstDayOfWeekStr(localDateTime, DATETIME_PATTERN);&#125;/** * 获取指定日期当周最后一天的日期字符串,这里最后一天为周日 * * @param localDateTime 指定日期时间 * @return String 格式：yyyy-MM-dd 23:59:59 */public static String getLastDayOfWeekStr(LocalDateTime localDateTime) &#123;    return getLastDayOfWeekStr(localDateTime, DATETIME_PATTERN);&#125;/** * 获取指定日期当周第一天的日期字符串,这里第一天为周一,带日期格式化参数 * * @param localDateTime 指定日期时间 * @param pattern       日期时间格式 * @return String 格式：yyyy-MM-dd 00:00:00 */public static String getFirstDayOfWeekStr(LocalDateTime localDateTime, String pattern) &#123;    return format(localDateTime.with(DayOfWeek.MONDAY).withHour(0).withMinute(0).withSecond(0), pattern);&#125;/** * 获取指定日期当周最后一天的日期字符串,这里最后一天为周日,带日期格式化参数 * * @param localDateTime 指定日期时间 * @param pattern       日期时间格式 * @return String 格式：yyyy-MM-dd 23:59:59 */public static String getLastDayOfWeekStr(LocalDateTime localDateTime, String pattern) &#123;    return format(localDateTime.with(DayOfWeek.SUNDAY).withHour(23).withMinute(59).withSecond(59), pattern);&#125;/** * 获取今天开始时间的日期字符串 * * @return String 格式：yyyy-MM-dd 00:00:00 */public static String getStartTimeOfDayStr() &#123;    return getStartTimeOfDayStr(LocalDateTime.now());&#125;/** * 获取今天结束时间的日期字符串 * * @return String 格式：yyyy-MM-dd 23:59:59 */public static String getEndTimeOfDayStr() &#123;    return getEndTimeOfDayStr(LocalDateTime.now());&#125;/** * 获取指定日期开始时间的日期字符串 * * @param localDateTime 指定日期时间 * @return String 格式：yyyy-MM-dd 00:00:00 */public static String getStartTimeOfDayStr(LocalDateTime localDateTime) &#123;    return getStartTimeOfDayStr(localDateTime, DATETIME_PATTERN);&#125;/** * 获取指定日期结束时间的日期字符串 * * @param localDateTime 指定日期时间 * @return String 格式：yyyy-MM-dd 23:59:59 */public static String getEndTimeOfDayStr(LocalDateTime localDateTime) &#123;    return getEndTimeOfDayStr(localDateTime, DATETIME_PATTERN);&#125;/** * 获取指定日期开始时间的日期字符串,带日期格式化参数 * * @param localDateTime 指定日期时间 * @param pattern       日期时间格式 * @return String 格式：yyyy-MM-dd HH:mm:ss */public static String getStartTimeOfDayStr(LocalDateTime localDateTime, String pattern) &#123;    return format(localDateTime.withHour(0).withMinute(0).withSecond(0), pattern);&#125;/** * 获取指定日期结束时间的日期字符串,带日期格式化参数 * * @param localDateTime 指定日期时间 * @param pattern       日期时间格式 * @return String 格式：yyyy-MM-dd 23:59:59 */public static String getEndTimeOfDayStr(LocalDateTime localDateTime, String pattern) &#123;    return format(localDateTime.withHour(23).withMinute(59).withSecond(59), pattern);&#125;/** * 切割日期。按照周期切割成小段日期段。例如： &lt;br&gt; * * @param startDate 开始日期（yyyy-MM-dd） * @param endDate   结束日期（yyyy-MM-dd） * @param period    周期（天，周，月，年） * @return 切割之后的日期集合 * &lt;li&gt;startDate=&quot;2019-02-28&quot;,endDate=&quot;2019-03-05&quot;,period=&quot;day&quot;&lt;/li&gt; * &lt;li&gt;结果为：[2019-02-28, 2019-03-01, 2019-03-02, 2019-03-03, 2019-03-04, 2019-03-05]&lt;/li&gt;&lt;br&gt; * &lt;li&gt;startDate=&quot;2019-02-28&quot;,endDate=&quot;2019-03-25&quot;,period=&quot;week&quot;&lt;/li&gt; * &lt;li&gt;结果为：[2019-02-28,2019-03-06, 2019-03-07,2019-03-13, 2019-03-14,2019-03-20, * 2019-03-21,2019-03-25]&lt;/li&gt;&lt;br&gt; * &lt;li&gt;startDate=&quot;2019-02-28&quot;,endDate=&quot;2019-05-25&quot;,period=&quot;month&quot;&lt;/li&gt; * &lt;li&gt;结果为：[2019-02-28,2019-02-28, 2019-03-01,2019-03-31, 2019-04-01,2019-04-30, * 2019-05-01,2019-05-25]&lt;/li&gt;&lt;br&gt; * &lt;li&gt;startDate=&quot;2019-02-28&quot;,endDate=&quot;2020-05-25&quot;,period=&quot;year&quot;&lt;/li&gt; * &lt;li&gt;结果为：[2019-02-28,2019-12-31, 2020-01-01,2020-05-25]&lt;/li&gt;&lt;br&gt; */public static List&lt;String&gt; listDateStrs(String startDate, String endDate, String period) &#123;    List&lt;String&gt; result = new ArrayList&lt;&gt;();    DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(DATE_PATTERN);    LocalDate end = LocalDate.parse(endDate, dateTimeFormatter);    LocalDate start = LocalDate.parse(startDate, dateTimeFormatter);    LocalDate tmp = start;    switch (period) &#123;        case DAY:            while (start.isBefore(end) || start.isEqual(end)) &#123;                result.add(start.toString());                start = start.plusDays(1);            &#125;            break;        case WEEK:            while (tmp.isBefore(end) || tmp.isEqual(end)) &#123;                if (tmp.plusDays(6).isAfter(end)) &#123;                    result.add(tmp.toString() + &quot;,&quot; + end);                &#125; else &#123;                    result.add(tmp.toString() + &quot;,&quot; + tmp.plusDays(6));                &#125;                tmp = tmp.plusDays(7);            &#125;            break;        case MONTH:            while (tmp.isBefore(end) || tmp.isEqual(end)) &#123;                LocalDate lastDayOfMonth = tmp.with(TemporalAdjusters.lastDayOfMonth());                if (lastDayOfMonth.isAfter(end)) &#123;                    result.add(tmp.toString() + &quot;,&quot; + end);                &#125; else &#123;                    result.add(tmp.toString() + &quot;,&quot; + lastDayOfMonth);                &#125;                tmp = lastDayOfMonth.plusDays(1);            &#125;            break;        case YEAR:            while (tmp.isBefore(end) || tmp.isEqual(end)) &#123;                LocalDate lastDayOfYear = tmp.with(TemporalAdjusters.lastDayOfYear());                if (lastDayOfYear.isAfter(end)) &#123;                    result.add(tmp.toString() + &quot;,&quot; + end);                &#125; else &#123;                    result.add(tmp.toString() + &quot;,&quot; + lastDayOfYear);                &#125;                tmp = lastDayOfYear.plusDays(1);            &#125;            break;        default:            break;    &#125;    return result;&#125;public static void main(String[] args) &#123;    System.out.println(getLocalDateTimeStr());    System.out.println(getLocalDateStr());    System.out.println(getLocalTimeStr());    System.out.println(getDayOfWeekStr());    System.out.println(getDayOfWeekStr(LocalDate.now()));    System.out.println(&quot;========&quot;);    System.out.println(format(LocalDate.now(), UNSIGNED_DATE_PATTERN));    System.out.println(&quot;========&quot;);    System.out.println(parseLocalDateTime(&quot;2020-12-13 11:14:12&quot;, DATETIME_PATTERN));    System.out.println(parseLocalDate(&quot;2020-12-13&quot;, DATE_PATTERN));    System.out.println(&quot;========&quot;);    System.out.println(plus(LocalDateTime.now(), 3, ChronoUnit.HOURS));    System.out.println(minus(LocalDateTime.now(), 4, ChronoUnit.DAYS));    System.out.println(&quot;========&quot;);    System.out.println(getChronoUnitBetween(LocalDateTime.now(), parseLocalDateTime(&quot;2020-12-12 12:03:12&quot;, DATETIME_PATTERN), ChronoUnit.MINUTES));    System.out.println(getChronoUnitBetween(LocalDate.now(), parseLocalDate(&quot;2021-12-12&quot;, DATE_PATTERN), ChronoUnit.WEEKS));    System.out.println(&quot;========&quot;);    System.out.println(getFirstDayOfYearStr());    System.out.println(getFirstDayOfYearStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN)));    System.out.println(getFirstDayOfYearStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN), UNSIGNED_DATETIME_PATTERN));    System.out.println(getLastDayOfYearStr());    System.out.println(getLastDayOfYearStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN)));    System.out.println(getLastDayOfYearStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN), UNSIGNED_DATETIME_PATTERN));    System.out.println(&quot;========&quot;);    System.out.println(getFirstDayOfMonthStr());    System.out.println(getFirstDayOfMonthStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN)));    System.out.println(getFirstDayOfMonthStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN), UNSIGNED_DATETIME_PATTERN));    System.out.println(getLastDayOfMonthStr());    System.out.println(getLastDayOfMonthStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN)));    System.out.println(getLastDayOfMonthStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN), UNSIGNED_DATETIME_PATTERN));    System.out.println(&quot;========&quot;);    System.out.println(getFirstDayOfWeekStr());    System.out.println(getFirstDayOfWeekStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN)));    System.out.println(getFirstDayOfWeekStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN), UNSIGNED_DATETIME_PATTERN));    System.out.println(getLastDayOfWeekStr());    System.out.println(getLastDayOfWeekStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN)));    System.out.println(getLastDayOfWeekStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN), UNSIGNED_DATETIME_PATTERN));    System.out.println(&quot;========&quot;);    System.out.println(getStartTimeOfDayStr());    System.out.println(getStartTimeOfDayStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN)));    System.out.println(getStartTimeOfDayStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN), UNSIGNED_DATETIME_PATTERN));    System.out.println(getEndTimeOfDayStr());    System.out.println(getEndTimeOfDayStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN)));    System.out.println(getEndTimeOfDayStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN), UNSIGNED_DATETIME_PATTERN));    System.out.println(&quot;========&quot;);    List&lt;String&gt; dateStrs = listDateStrs(&quot;2019-01-30&quot;, &quot;2020-12-13&quot;, YEAR);    for (String dateStr : dateStrs) &#123;        System.out.println(dateStr);    &#125;    System.out.println(&quot;========&quot;);    List&lt;String&gt; dateStrs1 = listDateStrs(&quot;2019-01-30&quot;, &quot;2020-12-13&quot;, MONTH);    for (String dateStr : dateStrs1) &#123;        System.out.println(dateStr);    &#125;    System.out.println(&quot;========&quot;);    List&lt;String&gt; dateStrs2 = listDateStrs(&quot;2020-12-01&quot;, &quot;2020-12-13&quot;, DAY);    for (String dateStr : dateStrs2) &#123;        System.out.println(dateStr);    &#125;&#125;</code></pre><p>}</p>]]></content>
    
    
    <summary type="html">将本站针对butterfly主题的亿点点小改动做个集锦。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Jackson序列化工具类</title>
    <link href="http://example.com/posts/b9bf9abc.html"/>
    <id>http://example.com/posts/b9bf9abc.html</id>
    <published>2023-04-11T23:51:20.000Z</published>
    <updated>2023-05-14T03:51:21.669Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Jackson序列化工具类"><a href="#Jackson序列化工具类" class="headerlink" title="Jackson序列化工具类"></a>Jackson序列化工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JacksonUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;ObjectMapper&gt; om = ThreadLocal.withInitial(() -&gt; &#123;</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line">        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL); <span class="comment">//属性为NULL不序列化</span></span><br><span class="line">        <span class="comment">// 设置输入时忽略在JSON字符串中存在但Java对象实际没有的属性</span></span><br><span class="line">        objectMapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line">        objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="literal">false</span>);</span><br><span class="line">        objectMapper.configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, <span class="literal">true</span>);</span><br><span class="line">        objectMapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, <span class="literal">true</span>);</span><br><span class="line">        objectMapper.configure(JsonParser.Feature.ALLOW_COMMENTS, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> objectMapper;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> om.get();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JsonNode <span class="title function_">getJsonNode</span><span class="params">(String json)</span> &#123;</span><br><span class="line">        isJson(json);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mapper.readTree(json);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;JsonNode&gt; <span class="title function_">getJsonNodeList</span><span class="params">(String json)</span> &#123;</span><br><span class="line">        isJson(json);</span><br><span class="line">        List&lt;JsonNode&gt; jsonNodeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">JsonNode</span> <span class="variable">jsonNode</span> <span class="operator">=</span> mapper.readTree(json);</span><br><span class="line">            jsonNode.forEach(jsonNodeList::add);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jsonNodeList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;JsonNode&gt; <span class="title function_">getJsonNodeList</span><span class="params">(JsonNode jsonNode)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(jsonNode)) &#123;</span><br><span class="line">            List&lt;JsonNode&gt; jsonNodeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            jsonNode.forEach(jsonNodeList::add);</span><br><span class="line">            <span class="keyword">return</span> jsonNodeList;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将对象转换成JSON数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> JSON数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toJson</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mapper.writeValueAsString(data);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将JSON数据转换成对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonData JSON数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanType 对象类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getJsonToBean</span><span class="params">(String jsonData, Class&lt;T&gt; beanType)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mapper.readValue(jsonData, beanType);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getJsonToBean</span><span class="params">(String jsonData, Class&lt;T&gt; beanType, Class&lt;?&gt; targetClazz)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">JavaType</span> <span class="variable">javaType</span> <span class="operator">=</span> mapper.getTypeFactory().constructParametricType(beanType, targetClazz);</span><br><span class="line">            <span class="keyword">return</span> mapper.readValue(jsonData, javaType);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将JSON数据转换成列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonData JSON数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanType 对象类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">getJsonToList</span><span class="params">(String jsonData, Class&lt;T&gt; beanType)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">JavaType</span> <span class="variable">javaType</span> <span class="operator">=</span> mapper.getTypeFactory().constructParametricType(List.class, beanType);</span><br><span class="line">            <span class="keyword">return</span> mapper.readValue(jsonData, javaType);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">getJsonToList</span><span class="params">(String jsonData, Class&lt;T&gt; beanType, Class&lt;?&gt; targetClazz)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">JavaType</span> <span class="variable">javaType</span> <span class="operator">=</span> mapper.getTypeFactory().constructParametricType(beanType, targetClazz);</span><br><span class="line">            <span class="type">CollectionType</span> <span class="variable">collectionType</span> <span class="operator">=</span> mapper.getTypeFactory().constructCollectionType(List.class, javaType);</span><br><span class="line">            <span class="keyword">return</span> mapper.readValue(jsonData, collectionType);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将JSON数据转换成Set集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonData    JSON数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> elementType 元素类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Set集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; Set&lt;E&gt; <span class="title function_">getJsonToSet</span><span class="params">(String jsonData, Class&lt;E&gt; elementType)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">JavaType</span> <span class="variable">javaType</span> <span class="operator">=</span> mapper.getTypeFactory().constructCollectionType(Set.class, elementType);</span><br><span class="line">            <span class="keyword">return</span> mapper.readValue(jsonData, javaType);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将JSON数据转换成Map集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonData  JSON数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyType   键类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> valueType 值类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Map集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;K, V&gt; Map&lt;K, V&gt; <span class="title function_">getJsonToMap</span><span class="params">(String jsonData, Class&lt;K&gt; keyType, Class&lt;V&gt; valueType)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">JavaType</span> <span class="variable">javaType</span> <span class="operator">=</span> mapper.getTypeFactory().constructMapType(Map.class, keyType, valueType);</span><br><span class="line">            <span class="keyword">return</span> mapper.readValue(jsonData, javaType);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断字符串是否为一个Json</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isJson</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mapper.readTree(str);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">将本站针对butterfly主题的亿点点小改动做个集锦。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>雪花算法工具类及原理</title>
    <link href="http://example.com/posts/b8efd782.html"/>
    <id>http://example.com/posts/b8efd782.html</id>
    <published>2023-04-11T23:45:32.000Z</published>
    <updated>2023-05-14T03:51:21.669Z</updated>
    
    <content type="html"><![CDATA[<h4 id="雪花算法工具类"><a href="#雪花算法工具类" class="headerlink" title="雪花算法工具类"></a>雪花算法工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SnowflakeUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始时间截 (2015-01-01)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">TWEPOCH</span> <span class="operator">=</span> <span class="number">1420041600000L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工作机器ID(0~31)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> WORKER_ID;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据中心ID(0~31)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> DATA_CENTER_ID;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机器id所占的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">WORKER_ID_BITS</span> <span class="operator">=</span> <span class="number">8L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据标识id所占的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">DATA_CENTER_ID_BITS</span> <span class="operator">=</span> <span class="number">2L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">MAX_WORKER_ID</span> <span class="operator">=</span> ~(-<span class="number">1L</span> &lt;&lt; WORKER_ID_BITS);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持的最大数据标识id，结果是31</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">MAX_DATA_CENTER_ID</span> <span class="operator">=</span> ~(-<span class="number">1L</span> &lt;&lt; DATA_CENTER_ID_BITS);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列在id中占的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">SEQUENCE_BITS</span> <span class="operator">=</span> <span class="number">12L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机器ID向左移12位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">WORKER_ID_SHIFT</span> <span class="operator">=</span> SEQUENCE_BITS;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据标识id向左移17位(12+5)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">DATA_CENTER_ID_SHIFT</span> <span class="operator">=</span> SEQUENCE_BITS + WORKER_ID_BITS;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间截向左移22位(5+5+12)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">TIMESTAMP_LEFT_SHIFT</span> <span class="operator">=</span> SEQUENCE_BITS + WORKER_ID_BITS + DATA_CENTER_ID_BITS;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">SEQUENCE_MASK</span> <span class="operator">=</span> ~(-<span class="number">1L</span> &lt;&lt; SEQUENCE_BITS);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 毫秒内序列(0~4095)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">sequence</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上次生成ID的时间截</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">lastTimestamp</span> <span class="operator">=</span> -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    SnowflakeUtil() &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">dataCenterId</span> <span class="operator">=</span> getDataCenterId(MAX_DATA_CENTER_ID);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">workerId</span> <span class="operator">=</span> getWorkerId(dataCenterId, MAX_WORKER_ID);</span><br><span class="line">        <span class="built_in">this</span>.checkAndSetWorkerIdAndDatacenterId(workerId, dataCenterId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkAndSetWorkerIdAndDatacenterId</span><span class="params">(<span class="type">long</span> workerId, <span class="type">long</span> datacenterId)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (workerId &gt; MAX_WORKER_ID || workerId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(String.format(<span class="string">&quot;worker Id can&#x27;t be greater than %d or less than 0&quot;</span>, MAX_WORKER_ID));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (datacenterId &gt; MAX_WORKER_ID || datacenterId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(String.format(<span class="string">&quot;datacenter Id can&#x27;t be greater than %d or less than 0&quot;</span>, MAX_WORKER_ID));</span><br><span class="line">        &#125;</span><br><span class="line">        WORKER_ID = workerId;</span><br><span class="line">        DATA_CENTER_ID = datacenterId;</span><br><span class="line">        log.info(<span class="string">&quot;snowflake workerId: &#123;&#125;&quot;</span>, workerId);</span><br><span class="line">        log.info(<span class="string">&quot;snowflake datacenterId: &#123;&#125;&quot;</span>, datacenterId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//================================================METHOD====================================================</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">getAsLong</span><span class="params">()</span> &#123;<span class="keyword">return</span> nextId();&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getAsString</span><span class="params">()</span> &#123;<span class="keyword">return</span> String.valueOf(nextId());&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得下一个ID (该方法是线程安全的)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SnowflakeId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="type">long</span> <span class="title function_">nextId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (WORKER_ID &gt; MAX_WORKER_ID || WORKER_ID &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(String.format(<span class="string">&quot;worker Id can&#x27;t be greater than %d or less than 0&quot;</span>, MAX_WORKER_ID));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (DATA_CENTER_ID &gt; MAX_DATA_CENTER_ID || DATA_CENTER_ID &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(String.format(<span class="string">&quot;datacenter Id can&#x27;t be greater than %d or less than 0&quot;</span>, MAX_DATA_CENTER_ID));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (timestamp &lt; lastTimestamp) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(String.format(<span class="string">&quot;Clock moved backwards.  Refusing to generate id for %d milliseconds&quot;</span>, lastTimestamp - timestamp));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果是同一时间生成的，则进行毫秒内序列</span></span><br><span class="line">        <span class="keyword">if</span> (lastTimestamp == timestamp) &#123;</span><br><span class="line">            sequence = (sequence + <span class="number">1</span>) &amp; SEQUENCE_MASK;</span><br><span class="line">            <span class="comment">// 毫秒内序列溢出</span></span><br><span class="line">            <span class="keyword">if</span> (sequence == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 阻塞到下一个毫秒,获得新的时间戳</span></span><br><span class="line">                timestamp = tilNextMillis(lastTimestamp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 时间戳改变，毫秒内序列重置</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            sequence = <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 上次生成ID的时间截</span></span><br><span class="line">        lastTimestamp = timestamp;</span><br><span class="line">        <span class="comment">// 移位并通过或运算拼到一起组成64位的ID</span></span><br><span class="line">        <span class="keyword">return</span> ((timestamp - TWEPOCH) &lt;&lt; TIMESTAMP_LEFT_SHIFT) <span class="comment">//</span></span><br><span class="line">                | (DATA_CENTER_ID &lt;&lt; DATA_CENTER_ID_SHIFT) <span class="comment">//</span></span><br><span class="line">                | (WORKER_ID &lt;&lt; WORKER_ID_SHIFT) <span class="comment">//</span></span><br><span class="line">                | sequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阻塞到下一个毫秒，直到获得新的时间戳</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastTimestamp 上次生成ID的时间截</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">tilNextMillis</span><span class="params">(<span class="type">long</span> lastTimestamp)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;</span><br><span class="line">            timestamp = System.currentTimeMillis();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getWorkerId</span><span class="params">(Long dataCenterId, Long maxWorkerId)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        buffer.append(dataCenterId);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> ManagementFactory.getRuntimeMXBean().getName();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(name)) &#123;</span><br><span class="line">            buffer.append(name.split(<span class="string">&quot;@&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Mac + PID 的hashCode 获取16个低位</span></span><br><span class="line">        <span class="keyword">return</span> (buffer.toString().hashCode() &amp; <span class="number">0xffff</span>) % (dataCenterId + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据标识部分</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getDataCenterId</span><span class="params">(Long maxDatacenterId)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">ip</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">            <span class="type">NetworkInterface</span> <span class="variable">network</span> <span class="operator">=</span> NetworkInterface.getByInetAddress(ip);</span><br><span class="line">            <span class="keyword">if</span> (network == <span class="literal">null</span>) &#123;</span><br><span class="line">                id = <span class="number">1L</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">byte</span>[] mac = network.getHardwareAddress();</span><br><span class="line">                <span class="keyword">if</span> (mac != <span class="literal">null</span>) &#123;</span><br><span class="line">                    id = ((<span class="number">0x000000FF</span> &amp; (<span class="type">long</span>) mac[mac.length - <span class="number">1</span>]) | (<span class="number">0x0000FF00</span> &amp; (((<span class="type">long</span>) mac[mac.length - <span class="number">2</span>]) &lt;&lt; <span class="number">8</span>))) &gt;&gt; <span class="number">6</span>;</span><br><span class="line">                    id = id % (maxDatacenterId + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot; getDatacenterId error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">将本站针对butterfly主题的亿点点小改动做个集锦。</summary>
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="后端" scheme="http://example.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="雪花算法" scheme="http://example.com/tags/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 学习分享8.6 (一)</title>
    <link href="http://example.com/posts/7837d6a9.html"/>
    <id>http://example.com/posts/7837d6a9.html</id>
    <published>2023-04-11T23:16:42.000Z</published>
    <updated>2023-05-14T03:51:21.669Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ElasticSearch概念"><a href="#ElasticSearch概念" class="headerlink" title="ElasticSearch概念"></a>ElasticSearch概念</h2><p><a href="https://www.elastic.co/cn/elasticsearch/">Elasticsearch：官方分布式搜索和分析引擎 | Elastic</a></p><p>一切为了检索 [you konw,for search]</p><h2 id="ElasticSearch基本操作"><a href="#ElasticSearch基本操作" class="headerlink" title="ElasticSearch基本操作"></a>ElasticSearch基本操作</h2><h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h3><p>ElasticSearch是面向文档型数据库的，一条数据就是一个文档。类比于关系型数据库MySQL，Es中的index相当于Database,Type相当于表(在7版本中已经删除了)，Document相当与表中的数据。</p><p>其类比关系如图:</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/Es%E7%BB%93%E6%9E%84%E7%B1%BB%E6%AF%94%E5%85%B3%E7%B3%BB%E5%9B%BE.png" alt="Es结构关系类比图"></p><h3 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h3><h4 id="创建索引-PUT"><a href="#创建索引-PUT" class="headerlink" title="创建索引 | PUT"></a>创建索引 | PUT</h4><ul><li><p>类比于MySQL，其对应操作就是create database ,创建数据库</p></li><li><p><code>PUT 索引名称</code></p></li><li><p>正常返回结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;acknowledged&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>  # <span class="literal"><span class="keyword">true</span></span> 操作成功</span><br><span class="line">  <span class="attr">&quot;shards_acknowledged&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> # 分片操作成功</span><br><span class="line">  <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span> # 索引名称</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>如果重复添加索引，则会抛出错误，就如同数据库不能创建两个相同名字的库</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/es%E9%87%8D%E5%A4%8D%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95%E5%A4%B1%E8%B4%A5.png" alt="重复创建索引" style="zoom: 33%;" /></p></li></ul><h4 id="查看全部索引-GET"><a href="#查看全部索引-GET" class="headerlink" title="查看全部索引 | GET"></a>查看全部索引 | GET</h4><ul><li><code>GET _cat/indices?v</code></li><li><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/Es%E6%9F%A5%E7%9C%8B%E7%B4%A2%E5%BC%95.png" alt="Es查看索引"></li></ul><p>查询参数:</p><ul><li><strong>_cat</strong>: 表示查看</li><li><strong>indices</strong>: 表示索引</li></ul><p>返回参数</p><ul><li><strong>health</strong>: 当前服务器健康状态  <strong>green</strong> [集群完整] <strong>yellow</strong> [单点正常,集群不完整]，<strong>red</strong>[单点不正常]</li><li><strong>index</strong>: 索引名</li><li><strong>status</strong>: 索引关闭状态</li><li><strong>uuid</strong>: 索引唯一Id</li><li><strong>pri:</strong> 主分片数量</li><li><strong>rep</strong>: 副本数量</li><li><strong>docs.deleted</strong> : 文档删除状态（逻辑删除）</li><li><strong>docs.count</strong>: 可用文档数量</li><li><strong>store.size</strong>: 主分片和副分片整体空间大小</li></ul><h4 id="查看单个索引-GET"><a href="#查看单个索引-GET" class="headerlink" title="查看单个索引 | GET"></a>查看单个索引 | GET</h4><ul><li><p><code>GET  索引名</code></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/Es%E6%9F%A5%E7%9C%8B%E5%8D%95%E4%B8%AA%E7%B4%A2%E5%BC%95%E8%AF%A6%E6%83%85.png" alt="Es查询索引详情"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="string">&quot;user&quot;</span>【索引名】<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="string">&quot;aliases&quot;</span>【别名】<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;mappings&quot;</span>【映射】<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;settings&quot;</span>【设置】<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="string">&quot;index&quot;</span>【设置 - 索引】<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="string">&quot;routing&quot;</span>【设置 - 索引路由】<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;allocation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;_tier_preference&quot;</span><span class="punctuation">:</span> <span class="string">&quot;data_content&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;number_of_shards&quot;</span>【设置 - 索引 - 主分片数量】<span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;provided_name&quot;</span>【设置 - 索引 - 名称】<span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;creation_date&quot;</span>【设置 - 索引 - 创建时间】<span class="punctuation">:</span> <span class="string">&quot;1659678930693&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;number_of_replicas&quot;</span>【设置 - 索引 - 副分片数量】<span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;uuid&quot;</span>【设置 - 索引 - 唯一标识】<span class="punctuation">:</span> <span class="string">&quot;P0pIpPyTSa-zS7kJCeE7Ng&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;version&quot;</span>【设置 - 索引版本号】<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8030399&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="删除索引-DELETE"><a href="#删除索引-DELETE" class="headerlink" title="删除索引 | DELETE"></a>删除索引 | DELETE</h4><ul><li><p><code>DELETE 索引名称</code>      tip:慎用</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/ES%E5%88%A0%E9%99%A4%E7%B4%A2%E5%BC%95.png" alt="Es删除索引"></p></li></ul><h3 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h3><h4 id="创建文档-POST"><a href="#创建文档-POST" class="headerlink" title="创建文档 | POST"></a>创建文档 | POST</h4><p>在创建了索引的前提下，为这个索引添加数据。document类比于SQL中的表数据，Es中添加的数据为JSON格式</p><ul><li><p><code>POST 索引名/_doc</code></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/Es%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE.png" alt="Es添加数据"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="string">&quot;_index&quot;</span>【索引】<span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;_id&quot;</span>【文档唯一标识，支持自定义】<span class="punctuation">:</span> <span class="string">&quot;C1yqbIIBJVfoW_YKu2D5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;_version&quot;</span>【版本】<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;result&quot;</span>【结果】<span class="punctuation">:</span> <span class="string">&quot;created&quot;</span><span class="punctuation">,</span>#这里的 create 表示创建成功</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span>【分片】<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="string">&quot;total&quot;</span>【分片 - 总数】<span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;successful&quot;</span>【分片 - 成功】<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;failed&quot;</span>【分片 - 失败】<span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>POST 索引名/_doc/自定义ID</code></p></li></ul><h4 id="查看文档-GET"><a href="#查看文档-GET" class="headerlink" title="查看文档 | GET"></a>查看文档 | GET</h4><ul><li><p>不指定查看文档的唯一Id时，类似于MySQL中的<code>select * from table</code></p></li><li><p>查看索引下指定文档: <code>GET 索引名称/_doc/文档唯一标识</code></p></li><li><p>查看索引下全部文档: <code>GET 索引名/_search</code></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E6%9F%A5%E7%9C%8B%E7%B4%A2%E5%BC%95%E6%8C%87%E5%AE%9A%E6%95%B0%E6%8D%AE.png" alt="Es查看索引指定数据"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="string">&quot;_index&quot;</span>【索引】<span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C1yqbIIBJVfoW_YKu2D5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;found&quot;</span>【查询结果】<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;_source&quot;</span>【文档源信息】<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;userName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A佳技术&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="string">&quot;28&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p>或者</p><ul><li><p><code>GET /_mget</code></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/Es%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E7%B4%A2%E5%BC%95%E4%B8%8B%E6%8C%87%E5%AE%9Aid%E7%9A%84%E6%95%B0%E6%8D%AE.png" style="zoom: 67%;" /></p></li></ul><ul><li>参考章节 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.7/docs-multi-get.html">Multi get (mget) API | Elasticsearch Guide [8.7] | Elastic</a></li></ul><h4 id="修改文档-POST"><a href="#修改文档-POST" class="headerlink" title="修改文档 | POST"></a>修改文档 | POST</h4><ul><li><p><code>POST 索引名/_doc/(唯一标识)</code></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E5%85%A8%E5%B1%80%E4%BF%AE%E6%94%B9document%E5%8F%82%E6%95%B0.png" alt="全局更新文档字段"></p></li></ul><ul><li><p><code>POST 索引名/_update/(唯一标识)</code></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/Es7-X%E6%9B%B4%E6%96%B0%E6%96%87%E6%A1%A3.png" alt=""></p></li></ul><h4 id="删除文档-DELETE"><a href="#删除文档-DELETE" class="headerlink" title="删除文档 | DELETE"></a>删除文档 | DELETE</h4><h5 id="删除指定Id文档"><a href="#删除指定Id文档" class="headerlink" title="删除指定Id文档"></a>删除指定Id文档</h5><ul><li><p>Es删除文档不会立即从磁盘上删除，只是被标记为逻辑删除，通过<code>GET _cat/indices?v</code>能够看到这个索引被逻辑删除的文档数量</p></li><li><p><code>DELETE 索引名/_doc/(唯一标识)</code></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E5%88%A0%E9%99%A4%E6%96%87%E6%A1%A3%E9%80%BB%E8%BE%91.png" alt=""></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C1yqbIIBJVfoW_YKu2D5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;_version&quot;</span>【版本<span class="punctuation">:</span>对数据的操作，都会更新版本】<span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;result&quot;</span>【结果】<span class="punctuation">:</span> <span class="string">&quot;deleted&quot;</span><span class="punctuation">,</span># deleted 表示数据被标记为删除</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="条件删除文档"><a href="#条件删除文档" class="headerlink" title="条件删除文档"></a>条件删除文档</h5><ul><li><p><code>POST 索引名称/delet_by_query</code>  <img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E6%9D%A1%E4%BB%B6%E5%88%A0%E9%99%A4.png" alt=""></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="string">&quot;took&quot;</span>【耗时】<span class="punctuation">:</span> <span class="number">17</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;timed_out&quot;</span>【是否超时】<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;total&quot;</span>【总数】<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;deleted&quot;</span>【删除数量】<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;batches&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version_conflicts&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;noops&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;retries&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bulk&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;search&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;throttled_millis&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;requests_per_second&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;throttled_until_millis&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;failures&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="映射基本操作"><a href="#映射基本操作" class="headerlink" title="映射基本操作"></a>映射基本操作</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>Es映射相当于MySQL中的表结构，在MySQL建表的时候需要指定相应的字段为对应的类型，而Es的映射也具有同样的作用。索引也一样，需要知道这个类型下有哪些字段，每个字段有哪些约束信息，这就叫做映射</p><h4 id="创建索引-PUT-1"><a href="#创建索引-PUT-1" class="headerlink" title="创建索引|PUT"></a>创建索引|PUT</h4><p><code>PUT student</code> 创建student索引</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E5%88%9B%E5%BB%BAstudent%E7%B4%A2%E5%BC%95.png" style="zoom:50%;" /></p><h4 id="创建映射-PUT"><a href="#创建映射-PUT" class="headerlink" title="创建映射|PUT"></a>创建映射|PUT</h4><p>为这个索引创建映射</p><p><code>PUS student/_mapping + 请求体内容</code>，例如</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E4%B8%BAsudent%E5%88%9B%E5%BB%BA%E6%98%A0%E5%B0%84.png" style="zoom: 50%;" /></p><h5 id="映射数据说明"><a href="#映射数据说明" class="headerlink" title="映射数据说明"></a>映射数据说明</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- 字段名: 任意填写</span><br><span class="line">- type : 类型 Es中支持的数据类型存在有很多种，其中最为常用的是</span><br><span class="line">-String类型， 字符串类型 分两种</span><br><span class="line">-text : 可分词，支持模糊查询，支持准确查询，不支持聚合查询</span><br><span class="line">-keyword : 不可分词，数据只能最小单词来进行匹配，支持模糊查询，支持准确查询，支持聚合查询</span><br><span class="line">-Numerical： 数值类型 分两类</span><br><span class="line">基本数值类型: long， integer, short, byte, double, float, half_float</span><br><span class="line">浮点型的高精度类型: scaled_float</span><br><span class="line">-Date : 日期类型</span><br><span class="line">-Array: 数组类型</span><br><span class="line">-Object: 对象</span><br><span class="line">- index : 是否索引，默认为ture，意思就是说不进行配置，默认所有字段都能被检索出来</span><br><span class="line">-true : 字段能够被索引，能够被进行搜索</span><br><span class="line">-false : 字段不能被索引，不能用来进行搜索</span><br><span class="line">-ignore_above : 表示最大的字段值长度，超出这个长度的字段将不会被索引，但是会存储。</span><br></pre></td></tr></table></figure><h5 id="Nested"><a href="#Nested" class="headerlink" title="Nested"></a>Nested</h5><p>其中Nested 是Object类型中的一种，也是比较特殊的一种，在实际场景中，通常会存在这种。我创建了一个位置信息，其中数据是这样的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;labels&quot;: [&#123;</span><br><span class="line">        &quot;key&quot;: &quot;ip&quot;,</span><br><span class="line">        &quot;value&quot;: &quot;127.0.0.1&quot;</span><br><span class="line">     &#125;]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    &quot;labels&quot;: [&#123;</span><br><span class="line">        &quot;key&quot;: &quot;ip&quot;,</span><br><span class="line">        &quot;value&quot;: &quot;127.0.0.2&quot;</span><br><span class="line">     &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果我们需要查询的是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;bool&quot;:&#123;</span><br><span class="line">            &quot;must&quot;:[</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;match&quot;:&#123;</span><br><span class="line">                        &quot;key&quot;:&quot;ip&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;match&quot;:&#123;</span><br><span class="line">                        &quot;value&quot;:&quot;127.0.0.1&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就会出现结果为这样的情况，这种结果显然是不对的。出现这样的原因是什么呢？Es是没有内部对象的概念的，因此，ES在存储复杂类型的时候会把对象的复杂层次结果扁平化为一个键值对列表。如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;labels.key&quot;:[</span><br><span class="line">        &quot;ip&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;labels.value&quot;:[</span><br><span class="line">        &quot;127.0.0.1&quot;,</span><br><span class="line">        &quot;127.0.0.2&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于这种情况，Esh提供的nested结构可以帮助我们解决类似的问题。Nested结构保留了子文档数据中的关联性，如果labels的数据格式被定义为nested，那么每一个nested object将会作为一个隐藏的单独文本建立索引。如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     &quot;labels.key&quot;:&quot;ip&quot;,</span><br><span class="line">     &quot;labels.value&quot;:&quot;127.0.0.1&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">     &quot;labels.key&quot;:&quot;ip&quot;,</span><br><span class="line">     &quot;labels.value&quot;:&quot;127.0.0.2&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样通过分开给每个nested object建索引，object内部的字段间的关系就能保持。当执行查询时，只会匹配同时出现在相同的nested object的结果。</p><h6 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h6><p>对于创建对应的映射，如下所示</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;demoType&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;labels&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="comment">// 字段类型设置为nested</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nested&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h6 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h6><p>nested结构的数据查询和普通object有些不同，nested object作为一个独立隐藏文档单独建索引，因此，不能直接查询到它们。取而代之，我们必须使用nested查询或者nested filter。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;nested&quot;: &#123;</span><br><span class="line">            &quot;path&quot;: &quot;labels&quot;,</span><br><span class="line">            &quot;query&quot;: &#123;</span><br><span class="line">              &quot;bool&quot;: &#123;</span><br><span class="line">                &quot;must&quot;: [</span><br><span class="line">                  &#123;</span><br><span class="line">                    &quot;term&quot;: &#123;</span><br><span class="line">                      &quot;labels.key&quot;: &quot;ip&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;,</span><br><span class="line">                  &#123;</span><br><span class="line">                    &quot;term&quot;: &#123;</span><br><span class="line">                      &quot;labels.value&quot;: &quot;127.0.0.1&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                ]</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后就能够达到我们想要的结果</p><h4 id="查看映射-GET"><a href="#查看映射-GET" class="headerlink" title="查看映射|GET"></a>查看映射|GET</h4><p><code>GET 索引名/_mapping</code> 获取到指定索引的映射</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E6%9F%A5%E7%9C%8B%E7%B4%A2%E5%BC%95.png" style="zoom: 50%;" /></p><h4 id="索引关联映射-PUT"><a href="#索引关联映射-PUT" class="headerlink" title="索引关联映射| PUT"></a>索引关联映射| PUT</h4><ul><li>创建新的索引 student1，并设置对应对应的索引，实现 <code>PUT index 和 PUT index/_mapping + 条件</code>相同的功能</li><li>PUT student1 + 请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">PUT Student<span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;long&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="ElasticSearch高级操作"><a href="#ElasticSearch高级操作" class="headerlink" title="ElasticSearch高级操作"></a>ElasticSearch高级操作</h3><h4 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h4><h5 id="分词查询"><a href="#分词查询" class="headerlink" title="分词查询"></a>分词查询</h5><ul><li><code>请求方式：GET 索引名/_search</code> + 请求体内容</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lisi&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/es35.png" style="zoom:50%;" /></p><h5 id="查询所有文档"><a href="#查询所有文档" class="headerlink" title="查询所有文档"></a>查询所有文档</h5><ul><li><code>GET 索引名/_search</code></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"># <span class="string">&quot;query&quot;</span>：这里的 query 代表一个查询对象，里面可以有不同的查询属性</span><br><span class="line"># <span class="string">&quot;match_all&quot;</span>：查询类型，例如：match_all(代表查询所有)，match，term，range 等等</span><br><span class="line"># <span class="punctuation">&#123;</span>查询条件<span class="punctuation">&#125;</span>：查询条件会根据类型的不同，写法也有差异</span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/es36.png" style="zoom:50%;" /></p><h5 id="字段匹配查询"><a href="#字段匹配查询" class="headerlink" title="字段匹配查询"></a>字段匹配查询</h5><ul><li><p><code>multi_match</code> 与 <code>match</code> 类似，不同的是它可以在多个字段中查询。</p></li><li><p>请求方式 : GET 索引名/_search</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;multi_match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zhangsan&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;name&quot;</span><span class="punctuation">,</span><span class="string">&quot;nickname&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>查询字段名为name和nickname为zhangsan的doc数据</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/es37.png" style="zoom: 50%;" /></p><h5 id="单关键字精确查询"><a href="#单关键字精确查询" class="headerlink" title="单关键字精确查询"></a>单关键字精确查询</h5><ul><li><code>term</code> 查询，精确的关键词匹配查询，不对查询条件进行分词，即只能单关键字精确查询。</li><li>请求方式：<code>GET 索引名/_search</code> + 请求体内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: &quot;zhangsan&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/es38.png" style="zoom:50%;" /></p><h5 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h5><ul><li>wildcard 通配符模糊查询  ? 代表匹配任意字符    *代表匹配0个或多个字符</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET /basic_index*/_search</span><br><span class="line">&#123;</span><br><span class="line">&quot;size&quot;: 20,</span><br><span class="line">&quot;from&quot;: 0,</span><br><span class="line">&quot;query&quot;: &#123;</span><br><span class="line">&quot;bool&quot;: &#123;</span><br><span class="line">&quot;should&quot;: [&#123;</span><br><span class="line">&quot;wildcard&quot;: &#123;</span><br><span class="line">&quot;form_name&quot;: &quot;*very*</span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="多关键字精确查询"><a href="#多关键字精确查询" class="headerlink" title="多关键字精确查询"></a>多关键字精确查询</h5><ul><li>terms 查询和 term 查询一样，但它允许你指定多值进行匹配。如果这个字段包含了指定值中的任何一个值，那么这个文档满足条件，类似于 mysql 的 in</li><li>请求方式：<code>GET 索引名/_search</code> + 请求体内容</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;zhangsan&quot;</span><span class="punctuation">,</span><span class="string">&quot;lisi&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/es39.png" style="zoom:50%;" /></p><h5 id="查询指定字段"><a href="#查询指定字段" class="headerlink" title="查询指定字段"></a>查询指定字段</h5><ul><li>默认情况下，Elasticsearch 在搜索的结果中，会把文档中保存在 <code>_source</code> 的所有字段都返回。</li><li>如果我们只想获取其中的部分字段，我们可以添加 <code>_source</code> 的过滤</li><li>请求方式：<code>GET 索引名/_search</code> + 请求体内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;_source&quot;: [&quot;name&quot;,&quot;nickname&quot;], </span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;terms&quot;: &#123;</span><br><span class="line">            &quot;nickname&quot;: [&quot;zhangsan&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/es40.png" style="zoom:50%;" /></p><h5 id="过滤字段"><a href="#过滤字段" class="headerlink" title="过滤字段"></a>过滤字段</h5><ul><li>includes&amp;excludes</li><li>includes：来指定想要显示的字段 与 <code>&quot;_source&quot;: [&quot;name&quot;,&quot;nickname&quot;],</code> 一样的效果</li><li>excludes：来指定不想要显示的字段</li><li>请求方式：<code>GET 索引名/_search</code> + 请求体内容</li></ul><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/es41.png" style="zoom:50%;" /></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/es42.png" style="zoom: 50%;" /></p><h5 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h5><ul><li><code>bool</code> 把各种其它查询通过 <code>must</code>（必须，类似 and）、<code>must_not</code>（必须不，类似 not）、<code>should</code>（应该 类似 or）的方式进行组合</li><li>请求方式：<code>GET 索引名/_search</code>  + 请求体内容</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;must_not&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="string">&quot;40&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;should&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;男&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/es43.png" style="zoom:50%;" /></p><h4 id="结果集操作"><a href="#结果集操作" class="headerlink" title="结果集操作"></a>结果集操作</h4><h5 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h5><ul><li><code>range</code> 查询找出那些落在指定区间内的数字或者时间。<code>range</code> 查询允许以下字符</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center"><strong>操作符</strong></th><th style="text-align:center"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:center">gt</td><td style="text-align:center">&gt;</td></tr><tr><td style="text-align:center">gte</td><td style="text-align:center">&gt;=</td></tr><tr><td style="text-align:center">lt</td><td style="text-align:center">&lt;</td></tr><tr><td style="text-align:center">lte</td><td style="text-align:center">&lt;=</td></tr></tbody></table></div><ul><li>请求方式：<code>GET 索引名/_search</code> + 请求体内容</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">30</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">35</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/es44.png" style="zoom:50%;" /></p><h5 id="多IDs查询"><a href="#多IDs查询" class="headerlink" title="多IDs查询"></a>多IDs查询</h5><p>​            指定多个id进行查询</p><ul><li>请求方式：<code>GET 索引名/_search</code> + 请求体</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;ids&quot; : &#123;</span><br><span class="line">            &quot;values&quot; : [&quot;1001&quot;, &quot;1004&quot;, &quot;1006&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/es47.png" style="zoom:50%;" /></p><h5 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h5><ul><li><p>from&amp;size</p></li><li><p><code>from</code>：当前页的起始索引，默认从 0 开始。 <strong>from = (pageNum - 1) * size</strong></p></li><li><code>size</code>：每页显示多少条</li><li>请求方式：<code>GET 索引名/_search</code> + 请求体内容</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/es52.png" style="zoom:50%;" /></p><h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h4><hr><h2 id="ElasticSearch-SQL"><a href="#ElasticSearch-SQL" class="headerlink" title="ElasticSearch SQL"></a>ElasticSearch SQL</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/sql-overview.html#sql-why">官方操作文档 </a></p><p>一般使用 <code>Elasticsearch</code> 的时候，会使用 <code>Query DSL</code> 来查询数据，从 <code>Elasticsearch6.3</code> 版本以后，<code>Elasticsearch</code> 已经支持<code>SQL</code>查询了。</p><p><code>Elasticsearch SQL</code> 是一个 <code>X-Pack</code> 组件，它允许针对 <code>Elasticsearch</code> 实时执行类似<code>SQL</code>的 查询。无论使用<code>REST</code>接口，命令行还是<code>JDBC</code>，任何客户端都可以使用<code>SQL</code>对 <code>Elasticsearch</code>中的数据进行原生搜索和聚合数据。可以将 <code>Elasticsearch SQL</code> 看作是一种翻译器，它可以将 <code>SQL</code>翻译成 <code>Query DSL</code>。</p><h4 id="Elasticsearch-SQL具有如下特性"><a href="#Elasticsearch-SQL具有如下特性" class="headerlink" title="Elasticsearch_SQL具有如下特性"></a>Elasticsearch_SQL具有如下特性</h4><ul><li>原生集成 <code>Elasticsearch SQL</code> 是为 <code>Elasticsearch</code> 从头开始构建的。每个查询都根据底层存储有效地针对相关节点执行。</li><li>没有外部零件 无需额外的硬件、进程、运行时或库来查询 <code>Elasticsearch</code>；<code>Elasticsearch SQL</code> 通过在<code>Elasticsearch</code> 内部运行消除了额外的移动部件。</li><li>轻巧高效 <code>Elasticsearch SQL</code>并未抽象化其搜索功能，相反的它拥抱并接受了<code>SQL</code>来 实现全文搜索，以简洁的方式实时运行全文搜索。</li></ul><h4 id="SQL和Elasticsearch的对应关系"><a href="#SQL和Elasticsearch的对应关系" class="headerlink" title="SQL和Elasticsearch的对应关系"></a>SQL和Elasticsearch的对应关系</h4><div class="table-container"><table><thead><tr><th>SQL</th><th>ES</th><th>说明</th></tr></thead><tbody><tr><td>Column</td><td>field</td><td>对比两个，数据都存储在命名条目中，具有多种数据类型，包含一 个值。        SQL  将此类条目称为列，而 Elasticsearch  称为字段。请注意，在 Elasticsearch  中，一个字段可以包含多个相同类型的值（本质上是一个列表），而在 SQL  中，一个列可以只包含一个所述类型的值。Elasticsearch SQL  将尽最大努力保留    SQL  语义，并根据查询拒 绝那些返回具有多个值的字段的查询</td></tr><tr><td>Row</td><td>document</td><td>Columns  和 fields 本身不存在；它们是 row 或 document 的一部分 。两者的语义略有不同：row 趋于严格（并且有更多的强制执行），而 document 趋于更加灵活或松散（同时仍然具有结构）。</td></tr><tr><td>Table</td><td>Index</td><td>执行查询的目标</td></tr><tr><td>Schema</td><td>Mapping</td><td>在 RDBMS 中，schem 主要是表的命名空间，通常用作安全边界。 Elasticsearch 没有为它提供等效的概念。但是，当启用安全性时， Elasticsearch 会自动应用安全性强制，以便角色只能看到它被允许访 问的数据</td></tr><tr><td>Database</td><td>Cluster 实例</td><td>在 SQL 中，catalog 或者 database 从概念上可以互换使用，表示一组 模式，即多个表。在 Elasticsearch  中，可用的索引集被分组在一个 cluster，语义也有所不同。database 本质上是另一个命名空间（可能对数据的存储方式有一些影响），而 Elasticsearch  cluster 是一个运行时实例，或者更确切地说是一组至少一个 Elasticsearch  实例（通 常是分布式运行）。在实践中，这意味着虽然在 SQL  中，一个实例中可能有多个目录，但在 Elasticsearch  中，一个目录仅限于一个</td></tr></tbody></table></div><h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><ul><li>创建索引并增加数据，等同于创建表和数据</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT my-sql-index/_bulk?refresh </span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;: &quot;JAVA&quot;&#125;&#125; </span><br><span class="line">&#123;&quot;name&quot;:  &quot;JAVA&quot;,  &quot;author&quot;:  &quot;zhangsan&quot;,  &quot;release_date&quot;:  &quot;2022-08-10&quot;,&quot;page_count&quot;: 561&#125; </span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;: &quot;BIGDATA&quot;&#125;&#125; </span><br><span class="line">&#123;&quot;name&quot;: &quot;BIGDATA&quot;, &quot;author&quot;: &quot;lisi&quot;, &quot;release_date&quot;: &quot;2022-08-11&quot;, &quot;page_count&quot;: 482&#125; </span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;: &quot;SCALA&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;: &quot;SCALA&quot;, &quot;author&quot;: &quot;wangwu&quot;, &quot;release_date&quot;: &quot;2022-08-12&quot;, &quot;page_count&quot;: 604&#125;</span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/ESSQL%20%E6%95%B0%E6%8D%AE%E6%8F%92%E5%85%A5.png" style="zoom:50%;" /></p><h4 id="第一个SQL查询"><a href="#第一个SQL查询" class="headerlink" title="第一个SQL查询"></a>第一个SQL查询</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># SQL </span><br><span class="line"># 这里的表就是索引 </span><br><span class="line"># 可以通过 format参数控制返回结果的格式，默认为  json格式 </span><br><span class="line">#       txt:表示文本格式，看起来更直观点. </span><br><span class="line">#       csv:使用逗号隔开的数据 </span><br><span class="line">#       json:JSON格式数据 </span><br><span class="line">#       tsv: 使用  tab键隔开数据 </span><br><span class="line">#       yaml:属性配置格式 </span><br><span class="line">POST _sql?format=txt </span><br><span class="line">&#123; </span><br><span class="line">    &quot;query&quot;: &quot;&quot;&quot; </span><br><span class="line">      SELECT * FROM &quot;my-sql-index&quot; </span><br><span class="line">    &quot;&quot;&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/SQl%E6%9F%A5%E8%AF%A2.png" alt=""></p><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">条件查询</span> </span><br><span class="line">POST _sql?format=txt </span><br><span class="line">&#123; </span><br><span class="line">    &quot;query&quot;: &quot;&quot;&quot; </span><br><span class="line">      SELECT * FROM &quot;my-sql-index&quot; where page_count &gt; 500</span><br><span class="line">    &quot;&quot;&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2.png" style="zoom:50%;" /></p><h3 id="SQL转换为DSL使用"><a href="#SQL转换为DSL使用" class="headerlink" title="SQL转换为DSL使用"></a>SQL转换为DSL使用</h3><p>当我们需要使用<code>Query DSL</code>时，也可以先使用<code>SQL</code>来查询，然后通过<code>Translate API</code>转换即可，查询的结果为<code>DSL</code>方式的结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">转换  SQL为  DSL进行操作</span> </span><br><span class="line">POST _sql/translate </span><br><span class="line">&#123; </span><br><span class="line">    &quot;query&quot;: &quot;&quot;&quot; </span><br><span class="line">      SELECT * FROM &quot;my-sql-index&quot; where page_count &gt; 500 </span><br><span class="line">    &quot;&quot;&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/SQL%E8%BD%ACDSL.png" style="zoom: 33%;" /></p><h3 id="SQL和DSL混合使用"><a href="#SQL和DSL混合使用" class="headerlink" title="SQL和DSL混合使用"></a>SQL和DSL混合使用</h3><p>我们如果在优化<code>SQL</code>语句之后还不满足查询需求，可以拿<code>SQL</code>和 <code>DSL</code> 混用，<code>ES</code>会先根据<code>SQL</code> 进行查询，然后根据<code>DSL</code>语句对<code>SQL</code>的执行结果进行二次查询</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SQL和  DSL混合使用</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">由于索引中含有横线，所以作为表名时需要采用双引号，且外层需要三个引号包含</span> </span><br><span class="line">POST _sql?format=txt </span><br><span class="line">&#123; </span><br><span class="line">    &quot;query&quot;: &quot;&quot;&quot;SELECT * FROM &quot;my-sql-index&quot; &quot;&quot;&quot;, </span><br><span class="line">    &quot;filter&quot; : &#123; </span><br><span class="line">      &quot;range&quot;: &#123; </span><br><span class="line">        &quot;page_count&quot;: &#123; </span><br><span class="line">          &quot;gte&quot;: 400, </span><br><span class="line">          &quot;lte&quot;: 600 </span><br><span class="line">        &#125; </span><br><span class="line">      &#125; </span><br><span class="line">    &#125;, </span><br><span class="line">    &quot;fetch_size&quot;: 2 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/DSL%E4%B8%8ESQL%E6%B7%B7%E7%94%A8.png" alt=""></p><h3 id="常用SQL操作"><a href="#常用SQL操作" class="headerlink" title="常用SQL操作"></a>常用SQL操作</h3><h4 id="查询所有索引"><a href="#查询所有索引" class="headerlink" title="查询所有索引"></a>查询所有索引</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET _sql?format=txt</span><br><span class="line">&#123; </span><br><span class="line">    &quot;query&quot;: &quot;&quot;&quot; </span><br><span class="line">      show tables </span><br><span class="line">    &quot;&quot;&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/Es%20SQl%E6%9F%A5%E8%AF%A2%E7%B4%A2%E5%BC%95.png" alt=""></p><h4 id="查询指定索引"><a href="#查询指定索引" class="headerlink" title="查询指定索引"></a>查询指定索引</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET _sql?format=txt</span><br><span class="line">&#123; </span><br><span class="line">    &quot;query&quot;: &quot;&quot;&quot; </span><br><span class="line">      show tables like &#x27;my-sql-index&#x27;</span><br><span class="line">    &quot;&quot;&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E6%9F%A5%E8%AF%A2%E6%8C%87%E5%AE%9A%E7%B4%A2%E5%BC%95SQL.png" alt=""></p><h4 id="模糊查询索引"><a href="#模糊查询索引" class="headerlink" title="模糊查询索引"></a>模糊查询索引</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET _sql?format=txt</span><br><span class="line">&#123; </span><br><span class="line">    &quot;query&quot;: &quot;&quot;&quot; </span><br><span class="line">      show tables like &#x27;my-%&#x27;</span><br><span class="line">    &quot;&quot;&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2%E7%B4%A2%E5%BC%95.png" alt=""></p><h4 id="查看索引结构"><a href="#查看索引结构" class="headerlink" title="查看索引结构"></a>查看索引结构</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 先创建一个索引</span><br><span class="line">put myindex</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;sku_id&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;long&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sku_name&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;text&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sku_url&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET _sql?format=txt</span><br><span class="line">&#123; </span><br><span class="line">    &quot;query&quot;: &quot;&quot;&quot; </span><br><span class="line">      describe myindex</span><br><span class="line">    &quot;&quot;&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E6%9F%A5%E7%9C%8B%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84.png" alt=""></p><h3 id="基本查询操作"><a href="#基本查询操作" class="headerlink" title="基本查询操作"></a>基本查询操作</h3><ul><li>在<code>ES</code>中使用<code>SQL</code>查询的语法与在数据库中使用基本一致</li></ul><h4 id="where"><a href="#where" class="headerlink" title="where"></a>where</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 条件过滤 </span><br><span class="line">POST _sql?format=txt </span><br><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="string">&quot; SELECT * FROM &quot;</span>my-sql-index<span class="string">&quot; where name = &#x27;JAVA&#x27; &quot;</span><span class="string">&quot;&quot;</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2.png" alt=""></p><h4 id="group-by"><a href="#group-by" class="headerlink" title="group-by"></a>group-by</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 按照日期进行分组 </span><br><span class="line">GET _sql?format=txt </span><br><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="string">&quot; </span></span><br><span class="line"><span class="string">      SELECT release_date FROM &quot;</span>my-sql-index<span class="string">&quot; group by release_date </span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/GroupBy.png" alt=""></p><h4 id="Having"><a href="#Having" class="headerlink" title="Having"></a>Having</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 对分组后的数据进行过滤 </span><br><span class="line">GET _sql?format=txt </span><br><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="string">&quot; </span></span><br><span class="line"><span class="string">    SELECT sum(page_count), release_date as datacnt FROM &quot;</span>my-sql-index<span class="string">&quot; group by release_date having sum(page_count) &gt; 1000 </span></span><br><span class="line"><span class="string">  &quot;</span><span class="string">&quot;&quot;</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/having.png" alt=""></p><h4 id="order-by"><a href="#order-by" class="headerlink" title="order-by"></a>order-by</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 对分组后的数据进行过滤 </span><br><span class="line">GET _sql?format=txt </span><br><span class="line">&#123; </span><br><span class="line">  &quot;query&quot;: &quot;&quot;&quot; </span><br><span class="line">    SELECT sum(page_count), release_date as datacnt FROM &quot;my-sql-index&quot; group by release_date having sum(page_count) &gt; 1000 </span><br><span class="line">  &quot;&quot;&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/order-by.png" alt=""></p><h4 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 限定查询数量 </span><br><span class="line">GET _sql?format=txt </span><br><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="string">&quot; </span></span><br><span class="line"><span class="string">      select * from &quot;</span>my-sql-index<span class="string">&quot; limit 3</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/limit.png" alt=""></p><h4 id="cursor"><a href="#cursor" class="headerlink" title="cursor"></a>cursor</h4><p>游标（cursor）是系统为用户开设的一个数据缓冲区，存储sql语句的执行结果，每个游标区都有一个名字，用户可以用 sql 语句逐一从游标中获取记录，并赋给主变量，交由主语言进一步处理。就本质而言，游标实际上是一种能从包括多条数据记录的结果集中每次提取一条或多条记录的机制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查询数据 </span><br><span class="line"># 因为查询结果较多，但是获取的数据较少，所以为了提高效果，会将数据存储到临时缓冲区中 </span><br><span class="line"># 此处数据展示格式为   json </span><br><span class="line">POST _sql?format=json </span><br><span class="line">&#123; </span><br><span class="line">    &quot;query&quot;: &quot;&quot;&quot; SELECT * FROM &quot;my-sql-index&quot; order by page_count desc &quot;&quot;&quot;, </span><br><span class="line">    &quot;fetch_size&quot;: 2 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回结果中的<code>cursor</code>就是缓冲区的标识，这就意味着可以从缓冲区中直接获取后续数据，操作上有点类似于java迭代器，可多次执行。类比于 迭代器的next</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/esql17.png" alt=""></p><p>如果执行后，无任何结果返回，说明数据已经读取完毕</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/esql18.png" alt=""></p><p>如果拿这个游标继续执行，就会返回错误信息</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/esql19.png" alt=""></p><p>如果需要关闭缓冲区，执行以下命令即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST _sql/close</span><br><span class="line">&#123; </span><br><span class="line">  &quot;cursor&quot;: &quot;xxxxxxxxxxxx&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">将本站针对butterfly主题的亿点点小改动做个集锦。</summary>
    
    
    
    
    <category term="ElasticSearch" scheme="http://example.com/tags/ElasticSearch/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="后端" scheme="http://example.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>注解实现接口幂等性(Easy版)</title>
    <link href="http://example.com/posts/8b17ba2.html"/>
    <id>http://example.com/posts/8b17ba2.html</id>
    <published>2023-03-30T00:04:40.000Z</published>
    <updated>2023-05-14T03:51:21.669Z</updated>
    
    <content type="html"><![CDATA[<h6 id="定义注解-Idempotent"><a href="#定义注解-Idempotent" class="headerlink" title="定义注解 |  Idempotent"></a>定义注解 |  Idempotent</h6><ul><li><p>需要支持映射字段</p></li><li><p>需要支持自定义时间</p></li><li><p>需要支持自定义时间单位</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Idempotent &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 别名 mappingParameter</span></span><br><span class="line"><span class="comment">     * 幂等性标识符 devId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AliasFor(&quot;mappingParameter&quot;)</span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 映射参数列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] mappingParameter() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">long</span> <span class="title function_">expireTime</span><span class="params">()</span> <span class="keyword">default</span>  <span class="number">3L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间单位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TimeUnit <span class="title function_">timeUnit</span><span class="params">()</span> <span class="keyword">default</span> TimeUnit.SECONDS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="切面类实现-IdempotentAspect"><a href="#切面类实现-IdempotentAspect" class="headerlink" title="切面类实现 | IdempotentAspect"></a>切面类实现 | IdempotentAspect</h6><p><code>根据传入的映射字段去查询方法参数中对应的字段值连接起来作为key，如果没有指定指定key的话，给个雪花Id过去（此时就感觉没必要了，每次进来都是新的，起不了保护作用，后续可以优化为，没有指定参数，就去拿请求头中的header的token）</code></p><p>通过反射获取到涵盖该注解的方法参数，指定映射参数为唯一Id来实现幂等性，如果没有指定但涵盖这个参数，则设置这个方法中所有类型为String的参数值组合为Key</p><p>如果方法返回了异常或正常返回则需要把这个key 删除掉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IdempotentAspect</span>  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.liu.aphrodite.handler.flowControl.annotations.Idempotent)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">validation</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;validation()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">idempotentCheck</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span>&#123;</span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) proceedingJoinPoint.getSignature();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> signature.getMethod();</span><br><span class="line">        <span class="type">Idempotent</span> <span class="variable">annotation</span> <span class="operator">=</span> method.getAnnotation(Idempotent.class);</span><br><span class="line">        <span class="comment">//step1: 判断是否有映射参数</span></span><br><span class="line">        <span class="comment">//step2: 没有映射参数则判断是否具有key</span></span><br><span class="line">        <span class="comment">//step3: 都没有,则以全部参数为key</span></span><br><span class="line">        <span class="comment">//step4: 啥都没有,拿头做幂等啊.(token)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">idempotentKey</span> <span class="operator">=</span> mapParameterAssemblyKey(annotation.mappingParameter(), method, proceedingJoinPoint.getArgs());</span><br><span class="line">        RedisUtil.setKeyExpire(idempotentKey,Boolean.TRUE.toString(), annotation.expireTime(), annotation.timeUnit());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;validation()&quot;,throwing = &quot;exception&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findException</span><span class="params">(JoinPoint joinPoint, Exception exception)</span>&#123;</span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> signature.getMethod();</span><br><span class="line">        <span class="type">Idempotent</span> <span class="variable">annotation</span> <span class="operator">=</span> method.getAnnotation(Idempotent.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">assemblyKey</span> <span class="operator">=</span> mapParameterAssemblyKey(annotation.mappingParameter(), method, joinPoint.getArgs());</span><br><span class="line">        RedisUtil.delete(assemblyKey);</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;#&#123;&#125; throw exception:&#123;&#125;&quot;</span>,joinPoint.getSignature().getDeclaringTypeName(),joinPoint.getSignature().getName(), exception);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@After(value = &quot;validation()&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAssemblyKey</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class="line">    <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> signature.getMethod();</span><br><span class="line">    <span class="type">Idempotent</span> <span class="variable">annotation</span> <span class="operator">=</span> method.getAnnotation(Idempotent.class);</span><br><span class="line">    <span class="type">String</span> <span class="variable">assemblyKey</span> <span class="operator">=</span> mapParameterAssemblyKey(annotation.mappingParameter(), method, joinPoint.getArgs());</span><br><span class="line">    RedisUtil.delete(assemblyKey);</span><br><span class="line">    log.info(<span class="string">&quot;&#123;&#125;#&#123;&#125; delete AssemblyKey&quot;</span>, joinPoint.getSignature().getDeclaringTypeName(),joinPoint.getSignature().getName());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Tips 1.暂且只能指定String类型变量 2.接口必须存在参数 3.</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">mapParameterAssemblyKey</span><span class="params">(String[] parameterNameList, Method method, Object[] args)</span> &#123;</span><br><span class="line">        <span class="type">DefaultParameterNameDiscoverer</span> <span class="variable">parameterNameDiscoverer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultParameterNameDiscoverer</span>();</span><br><span class="line">        String[] parameterNames = parameterNameDiscoverer.getParameterNames(method);</span><br><span class="line">        HashMap&lt;String, Object&gt; nameMappingArgs = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; Objects.requireNonNull(parameterNames).length; index++) &#123;</span><br><span class="line">            nameMappingArgs.put(parameterNames[index], args[index]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(parameterNameList))&#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.stream(parameterNameList).map(item -&gt; (String) nameMappingArgs.get(item)).collect(Collectors.joining(<span class="string">&quot;_&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> SnowflakeUtil.getAsString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">将本站针对butterfly主题的亿点点小改动做个集锦。</summary>
    
    
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="注解" scheme="http://example.com/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>自定义线程池精彩的使用方式</title>
    <link href="http://example.com/posts/ea641220.html"/>
    <id>http://example.com/posts/ea641220.html</id>
    <published>2022-11-30T23:50:54.000Z</published>
    <updated>2023-05-14T03:51:21.669Z</updated>
    
    <content type="html"><![CDATA[<h4 id="业务方法实现Callable接口"><a href="#业务方法实现Callable接口" class="headerlink" title="业务方法实现Callable接口"></a>业务方法实现Callable接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Callable&lt;String&gt; <span class="title function_">call</span><span class="params">(<span class="type">int</span> taskNum)</span> &#123;</span><br><span class="line">        Callable&lt;String&gt; task = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;&gt;&gt;&gt;&quot;</span> + taskNum + <span class="string">&quot;任务启动&quot;</span>);</span><br><span class="line">                <span class="type">Date</span> <span class="variable">dateTmp1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                <span class="type">Date</span> <span class="variable">dateTmp2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">                <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> dateTmp2.getTime() - dateTmp1.getTime();</span><br><span class="line">                System.out.println(<span class="string">&quot;&gt;&gt;&gt;&quot;</span> + taskNum + <span class="string">&quot;任务终止&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> taskNum + <span class="string">&quot;任务返回运行结果,当前任务时间【&quot;</span> + time + <span class="string">&quot;毫秒】\n&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> task;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建自定义线程池"><a href="#创建自定义线程池" class="headerlink" title="创建自定义线程池"></a>创建自定义线程池</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> : 2092669791@qq.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2022/12/18 15:02</span></span><br><span class="line"><span class="comment"> * description: 批量任务执行线程池</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BatchTaskThreadPool</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 核心线程数 = 计算机核心书 * 2 + 2</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">batchProcessTaskCorePoolSize</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors() * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 最大线程数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">batchProcessTaskMaxinumPoolSize</span> <span class="operator">=</span> batchProcessTaskCorePoolSize;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 保持活跃时间</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">keepActiveTime</span> <span class="operator">=</span> <span class="number">60L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 阻塞队列大小</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">blockingQuerySize</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 线程工厂</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ThreadFactory</span> <span class="variable">threadFactory</span> <span class="operator">=</span> Executors.defaultThreadFactory();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 日志线程池</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> ThreadPoolExecutor opLogThreadPool;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ThreadPoolExecutor <span class="title function_">batchTaskThreadPoolExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(batchProcessTaskCorePoolSize, batchProcessTaskMaxinumPoolSize, keepActiveTime, TimeUnit.SECONDS</span><br><span class="line">            , <span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;(blockingQuerySize), threadFactory);</span><br><span class="line">    threadPoolExecutor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">    opLogThreadPool = threadPoolExecutor;</span><br><span class="line">    <span class="keyword">return</span> threadPoolExecutor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> ThreadPoolExecutor <span class="title function_">getBatchTaskThreadPoolExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> batchTaskThreadPoolExecutor();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义线程任务操作"><a href="#自定义线程任务操作" class="headerlink" title="自定义线程任务操作"></a>自定义线程任务操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoAsynChron</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ListenableFuture&lt;T&gt; <span class="title function_">submit</span><span class="params">(Callable&lt;T&gt; task, Consumer&lt;T&gt; onSuccess, Consumer&lt;Throwable&gt; onFailure, Executor executor)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> submit(task, onSuccess, onFailure, executor, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ListenableFuture&lt;T&gt; <span class="title function_">submit</span><span class="params">(Callable&lt;T&gt; task, Consumer&lt;T&gt; onSuccess, Consumer&lt;Throwable&gt; onFailure, Executor executor, Executor callbackExecutor)</span> &#123;</span><br><span class="line">        ListenableFuture&lt;T&gt; future = Futures.submit(task, executor);</span><br><span class="line">        withCallBack(future, onSuccess, onFailure, callbackExecutor);</span><br><span class="line">        <span class="keyword">return</span> future;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">withCallBack</span><span class="params">(ListenableFuture&lt;T&gt; future, Consumer&lt;T&gt; onSuccess, Consumer&lt;Throwable&gt; onFailure, Executor callbackExecutor)</span> &#123;</span><br><span class="line">        FutureCallback&lt;T&gt; callback = <span class="keyword">new</span> <span class="title class_">FutureCallback</span>&lt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(T t)</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    onSuccess.accept(t);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    onFailure(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">                onFailure.accept(throwable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (callbackExecutor != <span class="literal">null</span>) &#123;</span><br><span class="line">            Futures.addCallback(future, callback, callbackExecutor);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Futures.addCallback(future, callback, MoreExecutors.directExecutor());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模拟多线程提交任务"><a href="#模拟多线程提交任务" class="headerlink" title="模拟多线程提交任务"></a>模拟多线程提交任务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">     List&lt; String&gt; resultArrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">     <span class="comment">//线程池</span></span><br><span class="line">     <span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BatchTaskThreadPool</span>().getBatchTaskThreadPoolExecutor();</span><br><span class="line">     <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">     <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(size);</span><br><span class="line">     <span class="type">MyService</span> <span class="variable">myService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyService</span>();</span><br><span class="line">     <span class="comment">// 创建多个有返回值的任务</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">         <span class="keyword">final</span> Callable&lt;String&gt; task = myService.call(i);</span><br><span class="line">         DoAsynChron.submit(task,</span><br><span class="line">                 successMsg -&gt;&#123;</span><br><span class="line">                     resultArrayList.add(successMsg);</span><br><span class="line">                     countDownLatch.countDown();</span><br><span class="line">                 &#125;,</span><br><span class="line">                 ex-&gt;&#123;</span><br><span class="line">                     countDownLatch.countDown();</span><br><span class="line">                 &#125;,</span><br><span class="line">                 executor</span><br><span class="line">         );&#125;</span><br><span class="line">     <span class="comment">// 关闭线程池</span></span><br><span class="line">     countDownLatch.await();</span><br><span class="line">     System.err.println(resultArrayList);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="模拟任务结果"><a href="#模拟任务结果" class="headerlink" title="模拟任务结果"></a>模拟任务结果</h4><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%8F%90%E4%BA%A4%E7%BB%93%E6%9E%9C.png" alt="多线程提交结果" style="zoom: 67%;" /></p>]]></content>
    
    
    <summary type="html">将本站针对butterfly主题的亿点点小改动做个集锦。</summary>
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="后端" scheme="http://example.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="线程池" scheme="http://example.com/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
    <category term="多线程" scheme="http://example.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>责任链模式的应用示例</title>
    <link href="http://example.com/posts/b6c1490f.html"/>
    <id>http://example.com/posts/b6c1490f.html</id>
    <published>2022-11-30T23:49:22.000Z</published>
    <updated>2023-05-14T03:51:21.669Z</updated>
    
    <content type="html"><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>责任链模式的应用场景，在实际工作中，通常有如下两种应用场景。</p><ul><li>操作需要经过一系列的校验，通过校验后才执行某些操作。</li><li>工作流。企业中通常会制定很多工作流程，一级一级的去处理任务。</li></ul><h2 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h2><p>以创建商品为例，假设商品创建逻辑分为以下三步完成：</p><ol><li>创建商品</li><li>校验商品参数、</li><li>保存商品。</li></ol><p>第2步校验商品又分为多种情况的校验，必填字段校验、规格校验、价格校验、库存校验等等。这些检验逻辑像一个流水线，要想创建出一个商品，必须通过这些校验。如下流程图所示</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F%E5%9B%BE%E8%A7%A3.png" alt="策略模式图解" style="zoom: 50%;" /></p><p>创建商品步骤，需要经过一系列的参数校验，如果参数校验失败，直接返回失败的结果；通过所有的参数校验后，最终保存商品信息。</p><p>但是随着业务需求不断地叠加，相关的校验逻辑也越来越多，新的功能使代码越来越臃肿，可维护性较差。更糟糕的是，这些校验组件不可复用，当你有其他需求也需要用到一些校验时，你又变成了Ctrl＋C , Ctrl＋V程序员，系统的维护成本也越来越高。如下图所示：</p><blockquote><p>———-&gt;创建商品</p><p>————&gt;校验参数是否为空</p><p>​            校验是否存在库存         ——-&gt;失败退出</p><p>​            校验规格是否合法</p><p>​            校验是否图片是否相同</p><p>————&gt;保存商品</p></blockquote><p>在这种情况下，改动的主要是真正业务之前的校验函数，在设计模式中存在一种思想就符合上述场景</p><p><strong>使用责任链模式优化</strong>：创建商品的每个校验步骤都可以作为一个单独的处理器，抽离为一个单独的类，便于复用。这些处理器形成一条链式调用，请求在处理器链上传递，如果校验条件不通过，则处理器不再向下传递请求，直接返回错误信息；若所有的处理器都通过检验，则执行保存商品步骤。</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/20230214214050.png" style="zoom: 33%;" /></p><p><strong>UML图：</strong></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E8%B4%A3%E4%BB%BB%E9%93%BEUML%E5%9B%BE.png" alt=""></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E5%9B%BE.png" style="zoom: 50%;" /></p><h3 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h3><h4 id="I-流程控制器"><a href="#I-流程控制器" class="headerlink" title="I.流程控制器"></a>I.流程控制器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2023/2/13 0:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 流程控制器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessController</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 模板映射</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, ProcessTemplate&gt; templateConfig = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 执行责任链</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 返回上下文内容</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> ProcessContext <span class="title function_">execute</span><span class="params">(ProcessContext context)</span> &#123;</span><br><span class="line">    <span class="comment">// 前置检查</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.preCheck(context);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ProcessException e) &#123;</span><br><span class="line">      <span class="keyword">return</span> e.getProcessContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历校验节点</span></span><br><span class="line">    List&lt;BusinessProcess&gt; processList = templateConfig.get(context.getCode()).getProcessList();</span><br><span class="line">    <span class="keyword">for</span> (BusinessProcess businessProcess : processList) &#123;</span><br><span class="line">      businessProcess.verify(context);</span><br><span class="line">      <span class="keyword">if</span> (context.getNeedBreak()) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> context;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">preCheck</span><span class="params">(ProcessContext context)</span> <span class="keyword">throws</span> ProcessException &#123;</span><br><span class="line">    <span class="comment">// 校验上下文</span></span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(context)) &#123;</span><br><span class="line">      context = <span class="keyword">new</span> <span class="title class_">ProcessContext</span>();</span><br><span class="line">      context.setResponse(BasicResultVO.fail(RespStatusEnum.CONTEXT_IS_NULL));</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ProcessException</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 业务代码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">businessCode</span> <span class="operator">=</span> context.getCode();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(businessCode)) &#123;</span><br><span class="line">      context.setResponse(BasicResultVO.fail(RespStatusEnum.BUSINESS_CODE_IS_NULL));</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ProcessException</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行模板</span></span><br><span class="line">    <span class="type">ProcessTemplate</span> <span class="variable">processTemplate</span> <span class="operator">=</span> templateConfig.get(businessCode);</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(processTemplate)) &#123;</span><br><span class="line">      context.setResponse(BasicResultVO.fail(RespStatusEnum.PROCESS_TEMPLATE_IS_NULL));</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ProcessException</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行模板列表</span></span><br><span class="line">    List&lt;BusinessProcess&gt; processList = processTemplate.getProcessList();</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(processList)) &#123;</span><br><span class="line">      context.setResponse(BasicResultVO.fail(RespStatusEnum.PROCESS_LIST_IS_NULL));</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ProcessException</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="II-业务执行模板"><a href="#II-业务执行模板" class="headerlink" title="II.业务执行模板"></a>II.业务执行模板</h4><p>通过执行模板获取到所有校验节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2023/2/12 23:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 业务执行模板（把责任链的逻辑串起来）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessTemplate</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 责任链节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;BusinessProcess&gt; processList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="III-责任链上下文"><a href="#III-责任链上下文" class="headerlink" title="III.责任链上下文"></a>III.责任链上下文</h4><p>流程控制器的入参，把请求参数构造成为上下文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2023/2/12 23:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 责任链上下文</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessContext</span>&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标识责任链的code</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储责任链上下文数据的模型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T processModel;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 责任链中断的标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Boolean needBreak;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 流程处理的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BasicResultVO&lt;T&gt; response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="IV-业务执行器"><a href="#IV-业务执行器" class="headerlink" title="IV.业务执行器"></a>IV.业务执行器</h4><p>业务执行模板中的校验节点，每一个节点都是一个环节的校验流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2023/2/12 23:45</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 业务执行器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BusinessProcess</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务校验逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 责任链上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">verify</span><span class="params">(ProcessContext&lt;T&gt; context)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模拟示例"><a href="#模拟示例" class="headerlink" title="模拟示例"></a>模拟示例</h3><p>通过容器中的ProcessController可以获取到项目中的所有执行模板，通过context上下文中的code,获取相应的校验链，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2023/2/14 23:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: XXXX</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SendService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProcessController processController;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SendResponse <span class="title function_">send</span><span class="params">(SendRequest sendRequest)</span> &#123;</span><br><span class="line">        <span class="type">SendTaskModel</span> <span class="variable">sendTaskModel</span> <span class="operator">=</span> SendTaskModel.builder()</span><br><span class="line">                .messageTemplateId(sendRequest.getMessageTemplateId())</span><br><span class="line">                .messageParamList(Collections.singletonList(sendRequest.getMessageParam()))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="type">ProcessContext</span> <span class="variable">context</span> <span class="operator">=</span> ProcessContext.builder()</span><br><span class="line">                .code(sendRequest.getCode())</span><br><span class="line">                .processModel(sendTaskModel)</span><br><span class="line">                .needBreak(<span class="literal">false</span>)</span><br><span class="line">                .response(BasicResultVO.success()).build();</span><br><span class="line"></span><br><span class="line">        <span class="type">ProcessContext</span> <span class="variable">process</span> <span class="operator">=</span> processController.execute(context);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SendResponse</span>(process.getResponse().getStatus(), process.getResponse().getMsg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SendResponse <span class="title function_">batchSend</span><span class="params">(BatchSendRequest batchSendRequest)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="校验函数"><a href="#校验函数" class="headerlink" title="校验函数"></a>校验函数</h4><h5 id="Step1-前置参数校验"><a href="#Step1-前置参数校验" class="headerlink" title="Step1:前置参数校验"></a>Step1:前置参数校验</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2023/2/14 22:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:  Step1:前置参数校验</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PreParamCheckAction</span> <span class="keyword">implements</span> <span class="title class_">BusinessProcess</span>&lt;SendTaskModel&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">verify</span><span class="params">(ProcessContext&lt;SendTaskModel&gt; context)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Step1:前置参数校验&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Step2-拼装参数"><a href="#Step2-拼装参数" class="headerlink" title="Step2: 拼装参数"></a>Step2: 拼装参数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2023/2/14 22:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Step2: 拼装参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AssembleAction</span> <span class="keyword">implements</span> <span class="title class_">BusinessProcess</span>&lt;SendTaskModel&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">verify</span><span class="params">(ProcessContext&lt;SendTaskModel&gt; context)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Step2: 拼装参数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Step3-后置参数校验"><a href="#Step3-后置参数校验" class="headerlink" title="Step3:后置参数校验"></a>Step3:后置参数校验</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2023/2/14 22:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Step3:后置参数校验</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AfterParamCheckAction</span> <span class="keyword">implements</span> <span class="title class_">BusinessProcess</span>&lt;SendTaskModel&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">verify</span><span class="params">(ProcessContext&lt;SendTaskModel&gt; context)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Step3:后置参数校验&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Step4-MQ消息发送"><a href="#Step4-MQ消息发送" class="headerlink" title="Step4: MQ消息发送"></a>Step4: MQ消息发送</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2023/2/14 22:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Step4: MQ消息发送   削峰,降流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMqAction</span> <span class="keyword">implements</span> <span class="title class_">BusinessProcess</span>&lt;SendTaskModel&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">verify</span><span class="params">(ProcessContext&lt;SendTaskModel&gt; context)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Step4: MQ消息发送&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">将本站针对butterfly主题的亿点点小改动做个集锦。</summary>
    
    
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="责任链模式" scheme="http://example.com/tags/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>MySQL安装与配置</title>
    <link href="http://example.com/posts/8ae56098.html"/>
    <id>http://example.com/posts/8ae56098.html</id>
    <published>2022-11-10T23:49:54.000Z</published>
    <updated>2023-05-14T03:51:21.669Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载MySQL压缩包"><a href="#下载MySQL压缩包" class="headerlink" title="下载MySQL压缩包"></a>下载MySQL压缩包</h2><p><a href="https://dev.mysql.com/downloads/mysql/" title="MySQL8.0下载">MySQL8.0下载</a><br><a href="https://downloads.mysql.com/archives/community/" title="MySQL5.7下载">MySQL5.7下载</a></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>新建data目录和my.ini文件<br><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/20220630134746.png" alt=""><br>修改my.ini文件用记事本打开my.ini 放入如下代码（basedir 和 datadir 的路径根据自己设置）。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[mysql]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置mysql客户端默认字符集</span></span><br><span class="line">default-character-set=utf8 </span><br><span class="line">[mysqld]</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置3306端口</span></span><br><span class="line">port = 3306 </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置mysql的安装目录</span></span><br><span class="line">basedir=D:\CODE-IDE\MySQL\mysql-5.7.32-winx64</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置mysql数据库的数据的存放目录</span></span><br><span class="line">datadir=D:\CODE-IDE\MySQL\mysql-5.7.32-winx64\data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">允许最大连接数</span></span><br><span class="line">max_connections=200</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务端使用的字符集默认为8比特编码的latin1字符集</span></span><br><span class="line">character-set-server=utf8</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建新表时将使用的默认存储引擎</span></span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure></p><h2 id="修改环境变量"><a href="#修改环境变量" class="headerlink" title="修改环境变量"></a>修改环境变量</h2><p>==在环境变量加入mysql的bin路径==<br><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/20220630135457.png" alt=""></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/20220630135550.png" alt=""></p><p>初始化mysql<br>切换到mysql的bin目录<br><code>mysqld --initialize</code><br><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/20220630135805.png" alt=""><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">如果此处报错 Can&#x27;t create/write to file 。。</span><br><span class="line">将my.ini文件如二 中的 basedir 和 datadir 路径见引号和双斜杠&amp;emsp;</span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir=&quot;D:\\tool\\Mysql\\mysql-5.7.26-winx64&quot;</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir=&quot;D:\\tool\\Mysql\\mysql-5.7.26-winx64\\data&quot;</span><br></pre></td></tr></table></figure></p><p><code>输入 mysqld --install</code></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/20220630140124.png" alt=""><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入 net start mysql         启动服务</span><br><span class="line">输入mysql -u root -p  回车  不用输入密码   继续回车进入数据库</span><br><span class="line">输入 use mysql</span><br><span class="line">输入  update mysql.user set authentication_string=password(&#x27;123456&#x27;) where user=&#x27;root&#x27;;    </span><br><span class="line">将修改 mysql中的 my.ini文件  删掉最后一行的代码（跳过表验证）skip-grant-tables</span><br><span class="line">重启服务（要切换到mysql的bin目录！！！！！！！！）   </span><br><span class="line">net stop mysql</span><br><span class="line">net start mysql</span><br></pre></td></tr></table></figure></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/20220630140251.png" alt=""></p>]]></content>
    
    
    <summary type="html">将本站针对butterfly主题的亿点点小改动做个集锦。</summary>
    
    
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
    <category term="数据库" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅的写Controller层</title>
    <link href="http://example.com/posts/0.html"/>
    <id>http://example.com/posts/0.html</id>
    <published>2022-11-06T15:08:30.000Z</published>
    <updated>2023-05-14T03:51:21.669Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p><p>本篇主要要介绍的就是 controller 层的处理，一个完整的后端请求由 4 部分组成：</p><ul><li>接口地址（也就是 URL 地址）</li><li>请求方式（一般就是 get、set，当然还有 put、delete）</li><li>请求数据（request，有 head 跟 body）</li><li>响应数据（response）</li></ul><p>本篇将解决以下 3 个问题：</p><ul><li>当接收到请求时，如何优雅的校验参数</li><li>返回响应数据该如何统一的进行处理</li><li>接收到请求，处理业务逻辑时抛出了异常又该如何处理</li></ul><p><strong>Controller 层参数接收（太基础了，可以跳过）</strong></p><p>常见的请求就分为 get 跟 post 两种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/product/product-info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductInfoController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ProductInfoService productInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findById&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ProductInfoQueryVo <span class="title function_">findById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> IPage <span class="title function_">findPage</span><span class="params">(Page page, ProductInfoQueryVo vo)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>RestController：</strong> 之前解释过，@RestController=@Controller+ResponseBody。</p><p>加上这个注解，springboot 就会吧这个类当成 controller 进行处理，然后把所有返回的参数放到 ResponseBody 中。</p><p><strong>@RequestMapping：</strong> 请求的前缀，也就是所有该 Controller 下的请求都需要加上 /product/product-info 的前缀。</p><p><strong>@GetMapping(“/findById”)：</strong> 标志这是一个 get 请求，并且需要通过 /findById 地址才可以访问到。</p><p><strong>@PostMapping(“/page”)：</strong> 同理，表示是个 post 请求。<br>参数：至于参数部分，只需要写上 ProductInfoQueryVo，前端过来的 json 请求便会通过映射赋值到对应的对象中，例如请求这么写，productId 就会自动被映射到 vo 对应的属性当中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">size : <span class="number">1</span></span><br><span class="line">current : <span class="number">1</span></span><br><span class="line"></span><br><span class="line">productId : <span class="number">1</span></span><br><span class="line">productName : 泡脚</span><br></pre></td></tr></table></figure><h4 id="返回格式"><a href="#返回格式" class="headerlink" title="| 返回格式"></a><strong>| 返回格式</strong></h4><p>为了跟前端妹妹打好关系，我们通常需要对后端返回的数据进行包装一下，增加一下状态码，状态信息，这样前端妹妹接收到数据就可以根据不同的状态码，判断响应数据状态，是否成功是否异常进行不同的显示。</p><p>当然这让你拥有了更多跟前端妹妹的交流机会，假设我们约定了 1000 就是成功的意思。</p><p>如果你不封装，那么返回的数据是这样子的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;productId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&quot;productName&quot;</span>: <span class="string">&quot;泡脚&quot;</span>,</span><br><span class="line">  <span class="string">&quot;productPrice&quot;</span>: <span class="number">100.00</span>,</span><br><span class="line">  <span class="string">&quot;productDescription&quot;</span>: <span class="string">&quot;中药泡脚加按摩&quot;</span>,</span><br><span class="line">  <span class="string">&quot;productStatus&quot;</span>: <span class="number">0</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过封装以后时这样子的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;code&quot;</span>: <span class="number">1000</span>,</span><br><span class="line">  <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;请求成功&quot;</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;productId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;productName&quot;</span>: <span class="string">&quot;泡脚&quot;</span>,</span><br><span class="line">    <span class="string">&quot;productPrice&quot;</span>: <span class="number">100.00</span>,</span><br><span class="line">    <span class="string">&quot;productDescription&quot;</span>: <span class="string">&quot;中药泡脚加按摩&quot;</span>,</span><br><span class="line">    <span class="string">&quot;productStatus&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="封装-ResultVo"><a href="#封装-ResultVo" class="headerlink" title="| 封装 ResultVo"></a><strong>| 封装 ResultVo</strong></h4><p>这些状态码肯定都是要预先编好的，怎么编呢？写个常量 1000？还是直接写死 1000？</p><p>要这么写就真的书白读的了，写状态码当然是用枚举拉：</p><p><strong>①</strong>首先先定义一个状态码的接口，所有状态码都需要实现它，有了标准才好做事：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StatusCode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>②</strong>然后去找前端妹妹，跟他约定好状态码（这可能是你们唯一的约定了）枚举类嘛，当然不能有 setter 方法了，因此我们不能在用 @Data 注解了，我们要用 @Getter。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ResultCode</span> <span class="keyword">implements</span> <span class="title class_">StatusCode</span>&#123;</span><br><span class="line">    SUCCESS(<span class="number">1000</span>, <span class="string">&quot;请求成功&quot;</span>),</span><br><span class="line">    FAILED(<span class="number">1001</span>, <span class="string">&quot;请求失败&quot;</span>),</span><br><span class="line">    VALIDATE_ERROR(<span class="number">1002</span>, <span class="string">&quot;参数校验失败&quot;</span>),</span><br><span class="line">    RESPONSE_PACK_ERROR(<span class="number">1003</span>, <span class="string">&quot;response返回包装失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    ResultCode(<span class="type">int</span> code, String msg) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>③</strong>写好枚举类，就开始写 ResultVo 包装类了，我们预设了几种默认的方法，比如成功的话就默认传入 object 就可以了，我们自动包装成 success。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultVo</span> &#123;</span><br><span class="line">    <span class="comment">// 状态码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 状态信息</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回对象</span></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 手动设置返回vo</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResultVo</span><span class="params">(<span class="type">int</span> code, String msg, Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认返回成功状态码，数据对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResultVo</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = ResultCode.SUCCESS.getCode();</span><br><span class="line">        <span class="built_in">this</span>.msg = ResultCode.SUCCESS.getMsg();</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回指定状态码，数据对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResultVo</span><span class="params">(StatusCode statusCode, Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = statusCode.getCode();</span><br><span class="line">        <span class="built_in">this</span>.msg = statusCode.getMsg();</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只返回状态码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResultVo</span><span class="params">(StatusCode statusCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = statusCode.getCode();</span><br><span class="line">        <span class="built_in">this</span>.msg = statusCode.getMsg();</span><br><span class="line">        <span class="built_in">this</span>.data = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用，现在的返回肯定就不是 return data；这么简单了，而是需要 new ResultVo(data)；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/findByVo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResultVo <span class="title function_">findByVo</span><span class="params">(<span class="meta">@Validated</span> ProductInfoVo vo)</span> &#123;</span><br><span class="line">    <span class="type">ProductInfo</span> <span class="variable">productInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProductInfo</span>();</span><br><span class="line">    BeanUtils.copyProperties(vo, productInfo);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultVo</span>(productInfoService.getOne(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>(productInfo)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后返回就会是上面带了状态码的数据了。</p><p><strong>统一校验</strong></p><h4 id="原始做法"><a href="#原始做法" class="headerlink" title="| 原始做法"></a><strong>| 原始做法</strong></h4><p>假设有一个添加 ProductInfo 的接口，在没有统一校验时，我们需要这么做。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductInfoVo</span> &#123;</span><br><span class="line">    <span class="comment">// 商品名称</span></span><br><span class="line">    <span class="keyword">private</span> String productName;</span><br><span class="line">    <span class="comment">// 商品价格</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal productPrice;</span><br><span class="line">    <span class="comment">// 上架状态</span></span><br><span class="line">    <span class="keyword">private</span> Integer productStatus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/findByVo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ProductInfo <span class="title function_">findByVo</span><span class="params">(ProductInfoVo vo)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotBlank(vo.getProductName())) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">APIException</span>(<span class="string">&quot;商品名称不能为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != vo.getProductPrice() &amp;&amp; vo.getProductPrice().compareTo(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">0</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">APIException</span>(<span class="string">&quot;商品价格不能为负数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="type">ProductInfo</span> <span class="variable">productInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProductInfo</span>();</span><br><span class="line">    BeanUtils.copyProperties(vo, productInfo);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultVo</span>(productInfoService.getOne(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>(productInfo)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这 if 写的人都傻了，能忍吗？肯定不能忍啊。</p><h4 id="Validated-参数校验"><a href="#Validated-参数校验" class="headerlink" title="| @Validated 参数校验"></a><strong>| @Validated 参数校验</strong></h4><p>好在有 @Validated，又是一个校验参数必备良药了。有了 @Validated 我们只需要再 vo 上面加一点小小的注解，便可以完成校验功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductInfoVo</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull(message = &quot;商品名称不允许为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String productName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min(value = 0, message = &quot;商品价格不允许为负数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal productPrice;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer productStatus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/findByVo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ProductInfo <span class="title function_">findByVo</span><span class="params">(<span class="meta">@Validated</span> ProductInfoVo vo)</span> &#123;</span><br><span class="line">    <span class="type">ProductInfo</span> <span class="variable">productInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProductInfo</span>();</span><br><span class="line">    BeanUtils.copyProperties(vo, productInfo);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultVo</span>(productInfoService.getOne(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>(productInfo)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行看看，如果参数不对会发生什么？</p><p>我们故意传一个价格为 -1 的参数过去：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">productName : 泡脚</span><br><span class="line">productPrice : -<span class="number">1</span></span><br><span class="line">productStatus : <span class="number">1</span></span><br></pre></td></tr></table></figure><p>我们故意传一个价格为 -1 的参数过去：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-04-19T03:06:37.268+0000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">400</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bad Request&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;errors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;codes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;Min.productInfoVo.productPrice&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;Min.productPrice&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;Min.java.math.BigDecimal&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;Min&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;arguments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;codes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;productInfoVo.productPrice&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;productPrice&quot;</span></span><br><span class="line">          <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;defaultMessage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;productPrice&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;productPrice&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">0</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;defaultMessage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;商品价格不允许为负数&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;objectName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;productInfoVo&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;productPrice&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;rejectedValue&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;bindingFailure&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Min&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Validation failed for object\u003d\u0027productInfoVo\u0027. Error count: 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;trace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 1 errors\nField error in object \u0027productInfoVo\u0027 on field \u0027productPrice\u0027: rejected value [-1]; codes [Min.productInfoVo.productPrice,Min.productPrice,Min.java.math.BigDecimal,Min]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [productInfoVo.productPrice,productPrice]; arguments []; default message [productPrice],0]; default message [商品价格不允许为负数]\n\tat&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/leilema/product/product-info/findByVo&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>大功告成了吗？虽然成功校验了参数，也返回了异常，并且带上”商品价格不允许为负数”的信息。</p><p>但是你要是这样返回给前端，前端妹妹就提刀过来了，当年约定好的状态码，你个负心人说忘就忘？</p><p>用户体验小于等于 0 啊！所以我们要进行优化一下，每次出现异常的时候，自动把状态码写好，不负妹妹之约！</p><h4 id="优化异常处理"><a href="#优化异常处理" class="headerlink" title="| 优化异常处理"></a><strong>| 优化异常处理</strong></h4><p>首先我们先看看校验参数抛出了什么异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Resolved [org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: <span class="number">1</span> errors</span><br></pre></td></tr></table></figure><p>我们看到代码抛出了 org.springframework.validation.BindException 的绑定异常，因此我们的思路就是 AOP 拦截所有 controller，然后异常的时候统一拦截起来，进行封装！完美！</p><p>玩你个头啊完美，这么呆瓜的操作 springboot 不知道吗？spring mvc 当然知道拉，所以给我们提供了一个 @RestControllerAdvice 来增强所有 @RestController，然后使用 @ExceptionHandler 注解，就可以拦截到对应的异常。</p><p>这里我们就拦截 BindException.class 就好了。最后在返回之前，我们对异常信息进行包装一下，包装成 ResultVo，当然要跟上 ResultCode.VALIDATE_ERROR 的异常状态码。</p><p>这样前端妹妹看到 VALIDATE_ERROR 的状态码，就会调用数据校验异常的弹窗提示用户哪里没填好。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerExceptionAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;BindException.class&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultVo <span class="title function_">MethodArgumentNotValidExceptionHandler</span><span class="params">(BindException e)</span> &#123;</span><br><span class="line">        <span class="comment">// 从异常对象中拿到ObjectError对象</span></span><br><span class="line">        <span class="type">ObjectError</span> <span class="variable">objectError</span> <span class="operator">=</span> e.getBindingResult().getAllErrors().get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultVo</span>(ResultCode.VALIDATE_ERROR, objectError.getDefaultMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来看看效果，完美。1002 与前端妹妹约定好的状态码：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">1002</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;参数校验失败&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;商品价格不允许为负数&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>统一响应</strong></p><h4 id="统一包装响应"><a href="#统一包装响应" class="headerlink" title="| 统一包装响应"></a><strong>| 统一包装响应</strong></h4><p>再回头看一下 controller 层的返回：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultVo</span>(productInfoService.getOne(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>(productInfo)));</span><br></pre></td></tr></table></figure><p>开发小哥肯定不乐意了，谁有空天天写 new ResultVo(data) 啊，我就想返回一个实体！怎么实现我不管！</p><p>好把，那就是 AOP 拦截所有 Controller，再 @After 的时候统一帮你封装一下咯!</p><p>怕是上一次脸打的不够疼，springboot 能不知道这么个操作吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice(basePackages = &#123;&quot;com.bugpool.leilema&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerResponseAdvice</span> <span class="keyword">implements</span> <span class="title class_">ResponseBodyAdvice</span>&lt;Object&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(MethodParameter methodParameter, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass)</span> &#123;</span><br><span class="line">        <span class="comment">// response是ResultVo类型，或者注释了NotControllerResponseAdvice都不进行包装</span></span><br><span class="line">        <span class="keyword">return</span> !methodParameter.getParameterType().isAssignableFrom(ResultVo.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">beforeBodyWrite</span><span class="params">(Object data, MethodParameter returnType, MediaType mediaType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass, ServerHttpRequest request, ServerHttpResponse response)</span> &#123;</span><br><span class="line">        <span class="comment">// String类型不能直接包装</span></span><br><span class="line">        <span class="keyword">if</span> (returnType.getGenericParameterType().equals(String.class)) &#123;</span><br><span class="line">            <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 将数据包装在ResultVo里后转换为json串进行返回</span></span><br><span class="line">                <span class="keyword">return</span> objectMapper.writeValueAsString(<span class="keyword">new</span> <span class="title class_">ResultVo</span>(data));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">APIException</span>(ResultCode.RESPONSE_PACK_ERROR, e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 否则直接包装成ResultVo返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultVo</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>①@RestControllerAdvice(basePackages = {“com.bugpool.leilema”}) 自动扫描了所有指定包下的 controller，在 Response 时进行统一处理。</p><p>②重写 supports 方法，也就是说，当返回类型已经是 ResultVo 了，那就不需要封装了，当不等与 ResultVo 时才进行调用 beforeBodyWrite 方法，跟过滤器的效果是一样的。</p><p>③最后重写我们的封装方法 beforeBodyWrite，注意除了 String 的返回值有点特殊，无法直接封装成 json，我们需要进行特殊处理，其他的直接 new ResultVo(data); 就 ok 了。</p><p>打完收工，看看效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/findByVo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ProductInfo <span class="title function_">findByVo</span><span class="params">(<span class="meta">@Validated</span> ProductInfoVo vo)</span> &#123;</span><br><span class="line">    <span class="type">ProductInfo</span> <span class="variable">productInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProductInfo</span>();</span><br><span class="line">    BeanUtils.copyProperties(vo, productInfo);</span><br><span class="line">    <span class="keyword">return</span> productInfoService.getOne(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>(productInfo));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时就算我们返回的是 po，接收到的返回就是标准格式了，开发小哥露出了欣慰的笑容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;code&quot;</span>: <span class="number">1000</span>,</span><br><span class="line">  <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;请求成功&quot;</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;productId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;productName&quot;</span>: <span class="string">&quot;泡脚&quot;</span>,</span><br><span class="line">    <span class="string">&quot;productPrice&quot;</span>: <span class="number">100.00</span>,</span><br><span class="line">    <span class="string">&quot;productDescription&quot;</span>: <span class="string">&quot;中药泡脚加按摩&quot;</span>,</span><br><span class="line">    <span class="string">&quot;productStatus&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="NOT-统一响应"><a href="#NOT-统一响应" class="headerlink" title="| NOT 统一响应"></a><strong>| NOT 统一响应</strong></h4><p><strong>不开启统一响应原因： 开发小哥是开心了，可是其他系统就不开心了。举个例子：我们项目中集成了一个健康检测的功能，也就是这货。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HealthController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/health&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">health</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>公司部署了一套校验所有系统存活状态的工具，这工具就定时发送 get 请求给我们系统：</p><blockquote><p>“兄弟，你死了吗？”<br>“我没死，滚”<br>“兄弟，你死了吗？”<br>“我没死，滚”</p></blockquote><p><strong>是的，web 项目的本质就是复读机。一旦发送的请求没响应，就会给负责人发信息（企业微信或者短信之类的），你的系统死啦！赶紧回来排查 bug 吧！</strong></p><p><strong>好吧，没办法，人家是老大，人家要的返回不是：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;请求成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;success&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>人家要的返回只要一个 success，人家定的标准不可能因为你一个系统改。俗话说的好，如果你改变不了环境，那你就只能改变我自己</p><p><strong>新增不进行封装注解： 因为百分之 99 的请求还是需要包装的，只有个别不需要，写在包装的过滤器吧？又不是很好维护，那就加个注解好了。所有不需要包装的就加上这个注解。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NotControllerResponseAdvice &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在我们的增强过滤方法上过滤包含这个注解的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice(basePackages = &#123;&quot;com.bugpool.leilema&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerResponseAdvice</span> <span class="keyword">implements</span> <span class="title class_">ResponseBodyAdvice</span>&lt;Object&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(MethodParameter methodParameter, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass)</span> &#123;</span><br><span class="line">        <span class="comment">// response是ResultVo类型，或者注释了NotControllerResponseAdvice都不进行包装</span></span><br><span class="line">        <span class="keyword">return</span> !(methodParameter.getParameterType().isAssignableFrom(ResultVo.class)</span><br><span class="line">                || methodParameter.hasMethodAnnotation(NotControllerResponseAdvice.class));</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>最后就在不需要包装的方法上加上注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HealthController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/health&quot;)</span></span><br><span class="line">    <span class="meta">@NotControllerResponseAdvice</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">health</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候就不会自动封装了，而其他没加注解的则依旧自动包装：<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b14ee0c1a9874565bd6a016a74614813~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="图片"></p><p><strong>统一异常</strong></p><p>每个系统都会有自己的业务异常，比如库存不能小于 0 子类的，这种异常并非程序异常，而是业务操作引发的异常，我们也需要进行规范的编排业务异常状态码，并且写一个专门处理的异常类，最后通过刚刚学习过的异常拦截统一进行处理，以及打日志.</p><p>①异常状态码枚举，既然是状态码，那就肯定要实现我们的标准接口 StatusCode。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  <span class="title class_">AppCode</span> <span class="keyword">implements</span> <span class="title class_">StatusCode</span> &#123;</span><br><span class="line"></span><br><span class="line">    APP_ERROR(<span class="number">2000</span>, <span class="string">&quot;业务异常&quot;</span>),</span><br><span class="line">    PRICE_ERROR(<span class="number">2001</span>, <span class="string">&quot;价格异常&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    AppCode(<span class="type">int</span> code, String msg) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②异常类，这里需要强调一下，code 代表 AppCode 的异常状态码，也就是 2000；msg 代表业务异常，这只是一个大类，一般前端会放到弹窗 title 上；最后 super(message); 这才是抛出的详细信息，在前端显示在弹窗体中，在 ResultVo 则保存在 data 中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">APIException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 手动设置异常</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">APIException</span><span class="params">(StatusCode statusCode, String message)</span> &#123;</span><br><span class="line">        <span class="comment">// message用于用户设置抛出错误详情，例如：当前价格-5，小于0</span></span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="comment">// 状态码</span></span><br><span class="line">        <span class="built_in">this</span>.code = statusCode.getCode();</span><br><span class="line">        <span class="comment">// 状态码配套的msg</span></span><br><span class="line">        <span class="built_in">this</span>.msg = statusCode.getMsg();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认异常使用APP_ERROR状态码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">APIException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = AppCode.APP_ERROR.getCode();</span><br><span class="line">        <span class="built_in">this</span>.msg = AppCode.APP_ERROR.getMsg();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>③</strong>最后进行统一异常的拦截，这样无论在 service 层还是 controller 层，开发人员只管抛出 API 异常，不需要关系怎么返回给前端，更不需要关心日志的打印。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerExceptionAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;BindException.class&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultVo <span class="title function_">MethodArgumentNotValidExceptionHandler</span><span class="params">(BindException e)</span> &#123;</span><br><span class="line">        <span class="comment">// 从异常对象中拿到ObjectError对象</span></span><br><span class="line">        <span class="type">ObjectError</span> <span class="variable">objectError</span> <span class="operator">=</span> e.getBindingResult().getAllErrors().get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultVo</span>(ResultCode.VALIDATE_ERROR, objectError.getDefaultMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(APIException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResultVo <span class="title function_">APIExceptionHandler</span><span class="params">(APIException e)</span> &#123;</span><br><span class="line">        <span class="comment">// log.error(e.getMessage(), e); 由于还没集成日志框架，暂且放着，写上TODO</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultVo</span>(e.getCode(), e.getMsg(), e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>④</strong>最后使用，我们的代码只需要这么写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> == orderMaster) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">APIException</span>(AppCode.ORDER_NOT_EXIST, <span class="string">&quot;订单号不存在：&quot;</span> + orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">2003</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;订单不存在&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;订单号不存在：1998&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>就会自动抛出 AppCode.ORDER_NOT_EXIST 状态码的响应，并且带上异常详细信息订单号不存在：xxxx。</p><h4 id="统一权限验证"><a href="#统一权限验证" class="headerlink" title="| 统一权限验证"></a>| 统一权限验证</h4><p>在某个控制器中的参数中，需要从Request的Header中取到Authorization请求头，其中Authorization是Jwt的身份Token，我们需要取到Token中的uid字段，以用来判断当前的用户身份，在没有使用任何的权限身份管理框架的前提下，那么我们只能在Controller层进行一步步的调取，如果是有多个控制器的话，这样会增加很多的冗余代码，所以我们可以自己定义一个注解来减少我们的工作量</p><p>①首先，我们需要定义一个自定义注解，命名为<code>JwtToken</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.PARAMETER)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> JwtToken &#123;</span><br><span class="line"> </span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;uid&quot;</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②接下来我们需要一个解析器，其实在SpringBoot中已经为我们提供了相关的处理解析器-<code>HandlerMethodArgumentResolver</code>，我们只需要实现接口完成业务逻辑处理即可。</p><p><strong>supportsParameter</strong></p><p><code>supportsParameter</code>接口是用于判断是否需要对该参数进行解析，如果该接口的返回值为true，则会继续执行resolveArgument接口方法，所以我们这里应为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> parameter.hasParameterAnnotation(JwtToken.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>resolveArgument</strong></p><p><code>resolveArgument</code>接口是处理参数的分解，只有<code>supportsParameter</code>为true时才会调用此方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> webRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class="line">    <span class="type">String</span> <span class="variable">authorization</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">JwtToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(authorization!=<span class="literal">null</span>)&#123;</span><br><span class="line">        Annotation[] methodAnnotations = parameter.getParameterAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation methodAnnotation : methodAnnotations) &#123;</span><br><span class="line">            <span class="keyword">if</span>(methodAnnotation <span class="keyword">instanceof</span> JwtToken)&#123;</span><br><span class="line">                token = (JwtToken) methodAnnotation;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(token!=<span class="literal">null</span>)&#123;</span><br><span class="line">            result = JwtUtil.get(authorization,token.value());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中JwtUtil中取Token中的信息的方法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">get</span><span class="params">(String token,String key)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">DecodedJWT</span> <span class="variable">jwt</span> <span class="operator">=</span> JWT.decode(token);</span><br><span class="line">        <span class="keyword">return</span> jwt.getClaim(key).asString();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JWTDecodeException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这一步我们的所有步骤就已经完成了，于是我们可以给需要取值的参数加上<code>@JwtToken</code>即可，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">list</span><span class="params">(<span class="meta">@JwtToken</span> String uid)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okHasData(shopsService.list(uid));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本篇主要要介绍的就是 controller 层的处理，一个完整的后端请求由 4 部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接口地址（也就是 URL 地址）&lt;/li&gt;
&lt;li&gt;请求方式（一般就是 get、set，当然还有 pu</summary>
      
    
    
    
    
    <category term="后端" scheme="http://example.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="springboot" scheme="http://example.com/tags/springboot/"/>
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
</feed>
