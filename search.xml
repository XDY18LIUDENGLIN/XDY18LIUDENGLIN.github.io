<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ElasticSearch8-6学习 II</title>
      <link href="/posts/f4106030.html"/>
      <url>/posts/f4106030.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>1.和现有数据中间件对比</p><p>现有流行的数据库中间件主要有关系型数据库，经典代表是 MySQL。</p><p>非关系型数据库有 Mongo， Redis，Es.</p><p>其中MySQL 为关系型数据库，支持事务，在存储数据前需要建立对应字段的类型，非常适合于结构化的的数据存储与查询，在数据查询场景下，默认返回所有满足匹配条件的记录，是我们使用最为频繁的数据库。</p><p>Mongo:非关系型数据库，适合于非结构化文档类型数据存储.Mongo最大的特点是表结构灵活可变，字段类型可以随时修改,在插入数据之前是不需要去指定字段的类型的，可以直接把我们想要的数据直接插入到Mongo中。MongoDB很适合那些表结构经常改变，数据的逻辑结构没又没那么复杂不需要多表查询操作，数据量又比较大的应用场景。同样的原因，MongoDB不需要定义表结构这个特点给表结构的修改带来了极大的方便，但是也给多表查询、复杂事务等高级操作带来了阻碍。因此，如果想要存的数据的逻辑结构非常复杂，经常需要进行复杂的多表查询或者事务操作，那显然还是MySQL这类关系型数据库更合适。</p><p>Redis: 非关系型数据库，Redis本质上是一个Key-Value类型的内存数据库，整个数据库加载在内存当中操作,因此，性能特别出色，是已知性能最快的Key-Value 数据库。能够支持事务，但仅能保证语句的顺序执行。</p><p>Es： se本质是一个搜索引擎，但是它也具有分布式存储的能力。使用Json格式来承载数据模型，已经成为事实上的文档型数据库。相对与Mongo来说，他们都是文档型的数据库，只不过在产品的定位方面有所区分，Elasticsearch是更加擅长的基于查询搜索的分析型数据库，没有事务性需求,倾向OLAP；MongoDB定位于事务型应用层面OLTP</p><p><a href="https://www.oracle.com/cn/database/what-is-oltp/">什么是联机事务处理 (OLTP)？| Oracle 中国</a></p><div class="table-container"><table><thead><tr><th></th><th>MysQL</th><th>mongo</th><th>Redis</th><th>ElasticSerch</th></tr></thead><tbody><tr><td>查询速度(相对)</td><td>慢</td><td>中</td><td>快</td><td>快</td></tr><tr><td>支持事务</td><td>是</td><td>是()</td><td>是(仅能保证按顺序执行)</td><td>否</td></tr><tr><td>存储方式</td><td>在不同的引擎有不同的存储方式(常涉及IO)</td><td>虚拟内存+持久化</td><td>全部在内存，定期持久化备份</td><td>内存</td></tr><tr><td>数据结构</td><td>类似于excel</td><td>JSON格式和BSON格式</td><td>K-V格式</td><td>JSON格式</td></tr><tr><td>查询失效性</td><td>中等</td><td>高</td><td>极高</td><td>较高</td></tr><tr><td>关系型</td><td>是</td><td>否</td><td>否</td><td>否</td></tr><tr><td>拓展性</td><td>可通过分表等操作</td><td>通过复制集分片等</td><td>集群分片</td><td>集群分片</td></tr></tbody></table></div><p>2.使用场景</p><p><strong>ElasticSearch是什么？</strong></p><blockquote><p>Elasticsearch is a real-time, distributed storage, search, and analytics engine</p></blockquote><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.8/elasticsearch-intro.html">What is Elasticsearch? </a></p><p>Elasticsearch简称ES，是一个高扩展、开源、分布式的<strong>全文检索</strong>的<strong>检索引擎</strong>，它可以准实时地快速存储、搜索、分析海量的数据。而且ES本身扩展性很好，既可以扩展到上百台服务器，处理PB级别(大数据时代）的数据。</p><p>全文检索是指计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户的检索方式。这个过程类似于通过字典中的检索字表查字的过程。</p><p><strong>为什么要用ElasticSearch?</strong></p><p>我们在日常开发中，明明数据库也能实现相同的功能（实时、存储、搜索、分析），那我们为什么要用ElasticSearch,而不是上述的其他数据库。</p><p>那我们就先说一下其它数据库在全文检索这方面的缺陷，同时这也就是es在全文检索方面的优点。</p><p>首先是Mongo,同为文档型数据库，ES支持复杂的查询和聚合操作，支持分页、排序等高级查询操作，优化了查询和聚合性能，具有较高的查询效率，对于大数据量的搜索和聚合处理有较好的支持，适合用于数据分析和搜索等场景。而Mongo支持基本的查询和聚合操作，对于复杂查询和聚合操作的支持相对较弱，适合用于文档存储和简单的查询应用,性能相对较低，查询效率与数据量成正比，对于大数据量的查询和聚合处理存在一定的局限性。</p><p>其次是Redis.Redis的话，我们主要把它当作缓存来用的，很少使用Redis来进行全文检索这功能，因为他是一种k-v型的数据库，并不具有复杂的查询语句。</p><p>最后登场的就是MySQL，和Mongo类似，简单的查询应用,性能相对较低，查询效率与数据量成正比，对于大数据量的查询是非常慢的，例如，如果我想在数据库中查询一个关键词  [测试]</p><p><code>select * from content where name like &#39;%测试%&#39;</code></p><p>对于这种模糊查询，由于不符合最左前缀原则，是不会走索引的，如果数据量很小，暂且还没什么事情，如果数据量一旦大了起来，就会对整个表进行扫描，那么这种查询语句就会很慢了。</p><p>还有一种情况就是，我需要查询的关键词输错了，但是我仍然想要查询到对应的信息，例如,我在检索的时候输入的是EsssSearch，但是我仍然需要检索出ElasticSearch的相关信息。这种情况是其他几种数据库无法简单完成的，而对于Es来说，它是专门用来做检索的，这些情况就是它的应用场景。</p><div class="table-container"><table><thead><tr><th><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/Es%E8%81%94%E6%83%B3.png" style="zoom: 30%;" /><img src="https://img.zcool.cn/community/011a9d5968623fa8012193a3942f88.jpg@2o.jpg" style="zoom: 20%;" /></th><th></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p>3.原理依据</p><p><strong>为什么ElasticSearch那么快？</strong></p><p><a href="https://developer.aliyun.com/article/1082558?spm=a2c6h.24874632.expert-profile.83.3ace286bwa88Jn">倒排索引：ES倒排索引底层原理及FST算法的实现过程（一）</a></p><p><a href="https://developer.aliyun.com/article/1082566">倒排索引：ES倒排索引底层原理及FST算法的实现过程（二）</a></p><p>底层设计决定查询速度。</p><p>一本汉语字典，如果我们想要从中找到某个字，通常我们会通过字典最前面的拼音检索或者是部首检索来查找。其实汉语字典的正文本身就是一个索引，比如我们要查找“吴”字，很自然的就想到了“吴”的拼音是“wu”，w在26个字母中在很靠后的位置，基本上就可以确定“吴”字的大致位置，然后按照字典序可以在w字母的汉字里精确的找到这个字，因为汉字本身就是按照字典序排列的，这种按照一定规则排序的目录在关系型数据库中一般叫做“聚集索引”。</p><p>其中MySQL的底层也就是B+数据，但是这种数据结构并不适用于倒排索引。</p><p>而在Lucene中，存在一种数据结构也就是倒排索引【<a href="https://www.elastic.co/cn/what-is/elasticsearch">Elasticsearch索引</a>】，es的底层也就是Lucene，ucene会在Index time把索引字段的所有词项切分计算出来，并且按照字典序生成一个词项字典（Term Dictionary),  此项字段存储的是去重之后的所有词项。我们假设上图左侧的表格中term dictionary字段就是最终生成的词项字典，那么右侧的倒排表（Posting List）保存的就是所有包含当前词项的元数据的id的有序int数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1:Java is the best programming language</span><br><span class="line"></span><br><span class="line">2:C is the best programming language</span><br><span class="line"></span><br><span class="line">3:Golang is the best programming language</span><br></pre></td></tr></table></figure><p>这三份文本在插入的时候，会被分词器分割成类似于表格中的数据</p><div class="table-container"><table><thead><tr><th>term index</th><th>Term Dictionary</th><th>Posting List</th><th>标记匹配</th></tr></thead><tbody><tr><td></td><td>best</td><td>123</td><td></td></tr><tr><td></td><td>c</td><td>2</td><td></td></tr><tr><td></td><td>golang</td><td>3</td><td></td></tr><tr><td></td><td>is</td><td>123</td><td></td></tr><tr><td></td><td>java</td><td>1</td><td></td></tr><tr><td></td><td>language</td><td>123</td><td></td></tr><tr><td></td><td>programming</td><td>123</td><td></td></tr><tr><td></td><td>the</td><td>123</td></tr></tbody></table></div><p>换成图的话，就大概如同下面</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/20230505235829.png" style="zoom: 50%;" /></p><p>由于Term Dictionary 的数据是有序的，所有在查找的时候就可以通过二分查找去找到我们想要的数据，不需要去遍历整个Term  Dictionary.</p><p>但由于这个Term Dictionary会随着数据量的增加而暴增，所以肯定不能直接放到内存中，所以，Es在又加了一层Term index，Term Index在内存中是以<a href="https://developer.aliyun.com/article/1085384?spm=a2c6h.14164896.0.0.3e566d10n7oVrG">FST（Finite State Transducers）)</a>形式保存的，会很节省内存</p><p>除了Term Dictionary会随着数据量的上升而暴增，<strong>倒排表</strong>(Post List)这个里面的数据也会越来越多，在Term Dictionary 和Post List这两暴增的情况下，这个文件可能就会很大，所以需要对Post List也需要进行压缩。</p><p>PostList 使用两种压缩算法：<a href="https://juejin.cn/post/7085352076595134494">FOR(Frame Of Reference)算法</a>和<a href="https://cloud.tencent.com/developer/beta/article/1452030">RBM(Roaring Bitmaps)算法</a>，我们就只讲FOR算法。</p><p>我们以” The “这个Term 来为例，可能存在100W的倒排文件都有这个词，那么其Post List 展现的情况就是[1,2,3…100W]，</p><p>如果我们想要完全表示出这些id,那么就需要2的n次方&gt;100w,取最小值也就是20，但是对于其他大部分id来说，20个bit是远远足够的，这时就可以考虑是否可以用差值存储（dealta list），即不存储原本的数值，而是存储每个数值与前一个数字的差值，这时原本的数字组就变成了[1,1,1…1]，数组中共包含100W个1，难么所有的id都能够使用1个Bit存储下。当然实际情况不可能这个巧合，以下图[73，300，302，332，343，372]为例，就会存在需要2*8&gt;227, 每个Id就需要8Bit来存储，但实际上[2,30,11,29]只需要5Bit就够了，而第一个数组[73,227]还是使用8个bit存储每一个数字就够了，还需要存储一个元数据 73 记录第一个数据是多少，后面的数据才能知道自己的Id。</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/FOR%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95.png" alt="FOR压缩算法" style="zoom:67%;" /></p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.0/glossary.html">术语表 (elastic.co)</a></p><p>在这之中出现过以下几个概念</p><ol><li><strong>词条（term Index）</strong>：索引里面最小的存储和查询单元，对于英文来说是一个词，对于中文来说一般指分词后的一个词。</li><li><strong>词典</strong>(Term Dictionary) ：词条的组合。搜索引擎的通常索引单位是单词，单词词典是文档集合中出现过的所有单词构成的字符串集合，单词词典内每条索引项记载单词本身的一些信息以及指向倒排所有的指针。</li><li><strong>倒排表</strong>(Post List)：一个文档通常由多个词组成，倒排表记录的是某个词在哪些文档里出现过及出现的位置。每个记录称为一个倒排项，倒排表记录的不单单是文档编号，还记录了词频等信息。</li><li><strong>倒排文件</strong>：所有单词的倒排列表往往顺序地存储在磁盘的某个文件里，这个文件被称之为倒排文件，倒排文件是存储倒排索引的物理文件。</li></ol><p>4.优点和特性</p><ol><li>分布式性：ES是基于分布式的架构设计，可以很方便地进行横向扩展，满足高并发场景下的需求。</li><li>强大的搜索能力：ES具有全文搜索、聚合搜索、地理空间搜索等多种搜索能力，支持各种查询方式（如全文搜索、词条搜索、模糊搜索、正则表达式搜索等），并提供了高亮、排序、分页等功能。</li><li>高性能：ES使用倒排索引和分词技术，可以实现快速的搜索和数据分析，处理海量数据的能力非常强。</li><li>数据安全：ES提供了数据备份和容灾恢复功能，可以在节点故障或数据丢失时自动恢复数据，同时也提供了访问控制、身份认证等安全特性。</li><li>可扩展性：ES提供了插件和API接口，可以很方便地进行二次开发，扩展其功能。</li><li>易用性：ES提供了友好的Web界面，可以对索引、数据、节点等进行管理和监控。</li><li>社区支持：ES有一个庞大的社区支持，可以获得开源代码、插件、文档等支持。</li></ol><p>5.实际操作示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#创建索引</span><br><span class="line">PUT student</span><br><span class="line"></span><br><span class="line">#创建映射</span><br><span class="line">PUT student/_mapping</span><br><span class="line">&#123;</span><br><span class="line">    &quot;properties&quot;:&#123;</span><br><span class="line">        &quot;name&quot;:&#123;</span><br><span class="line">            &quot;type&quot;:&quot;text&quot;,</span><br><span class="line">            &quot;index&quot;:true</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sex&quot;:&#123;</span><br><span class="line">            &quot;type&quot;:&quot;keyword&quot;,</span><br><span class="line">            &quot;index&quot;:true</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;age&quot;:&#123;</span><br><span class="line">            &quot;type&quot;:&quot;keyword&quot;,</span><br><span class="line">            &quot;index&quot;:true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 插入相关数据</span><br><span class="line">POST student/_doc</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;张三&quot;,</span><br><span class="line">&quot;sex&quot;:&quot;man&quot;,</span><br><span class="line">&quot;age&quot;: &quot;18&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#查询指定索引下所有数据</span><br><span class="line">GET student/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;match_all&quot;:&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.优缺点</p><p>综上所述，Es在其查询分析这个主场上，拥有这个无可匹敌的优势，基于倒排索引以及Es的优化，可以快速查询文本内容和聚合信息，支持多种查询方式、聚合、地理空间搜索等功能，可以满足多种应用场景需求，具有非常丰富的功能。但是也存在相应的缺点，他需要专门的人员去维护他，然后非常消耗硬盘空间，还有重要的点是，需要一定花一定的时间和精力去学习和理解。</p><h3 id="Es基本概念"><a href="#Es基本概念" class="headerlink" title="Es基本概念"></a>Es基本概念</h3><p>ElasticSearch是面向文档型数据库的，一条数据就是一个文档。类比于关系型数据库MySQL，Es中的index相当于Database,Type相当于表(在7版本中已经删除了)，Document相当与表中的数据。</p><p>其类比关系如图:</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/Es%E7%BB%93%E6%9E%84%E7%B1%BB%E6%AF%94%E5%85%B3%E7%B3%BB%E5%9B%BE.png" alt="Es结构关系类比图" style="zoom: 33%;" /></p><p>在数据库的操作过程中，我们通常要存在对应的库，然后创建相应的表结构</p><p>在es中也需要执行相应的操作</p><ul><li>创建索引</li><li>创建映射</li><li>添加数据</li><li>条件查询</li></ul><h4 id="索引"><a href="#索引" class="headerlink" title=" 索引"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.0/indices-create-index.html"> 索引</a></h4><p>我们可以通过 <code>PUT 索引名称</code>来创建对应的索引，如果创建 索引成功，会有下图提示</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/20230506003031.png" style="zoom:50%;" /></p><p>如果创建索引失败，那么就会返回如下错误</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/es%E9%87%8D%E5%A4%8D%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95%E5%A4%B1%E8%B4%A5.png" alt="重复创建索引" style="zoom: 25%;" /></p><h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.6/mapping.html">映射</a></h4><p>类型类似于 MySQL 中的字段类型，ES 字段类型主要有：核心类型、复杂类型、地理类型以及特殊类型，具体的数据类型可以从官网查看：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/mapping.html">Mapping | Elasticsearch</a></p><p>在创建完索之后 ，我们需要定义这个索引对应参数的类型，就需要通过创建对应的映射来确定字段的类型，我们可以通过以下命令来创建映射</p><p><code>PUS student/_mapping + 请求体内容</code>，例如</p><div class="table-container"><table><thead><tr><th><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E4%B8%BAsudent%E5%88%9B%E5%BB%BA%E6%98%A0%E5%B0%84.png" style="zoom: 33%;" /></th><th><img src="https://img-blog.csdnimg.cn/20200317003814117.png" alt="Es字段类型图" style="zoom: 25%;" /></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p>其中的参数类型示意如图下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- 字段名: 任意填写</span><br><span class="line">- type : 类型 Es中支持的数据类型存在有很多种，其中最为常用的是</span><br><span class="line">-String类型， 字符串类型 分两种</span><br><span class="line">-text : 可分词，支持模糊查询，支持准确查询，不支持聚合查询</span><br><span class="line">-keyword : 不可分词，数据只能最小单词来进行匹配，支持模糊查询，支持准确查询，支持聚合查询</span><br><span class="line">-Numerical： 数值类型 分两类</span><br><span class="line">基本数值类型: long， integer, short, byte, double, float, half_float</span><br><span class="line">浮点型的高精度类型: scaled_float</span><br><span class="line">-Date : 日期类型</span><br><span class="line">-Array: 数组类型</span><br><span class="line">-Object: 对象</span><br><span class="line">- index : 是否索引，默认为ture，意思就是说不进行配置，默认所有字段都能被检索出来</span><br><span class="line">-true : 字段能够被索引，能够被进行搜索</span><br><span class="line">-false : 字段不能被索引，不能用来进行搜索</span><br><span class="line">-ignore_above : 表示最大的字段值长度，超出这个长度的字段将不会被索引，但是会存储。</span><br></pre></td></tr></table></figure><blockquote><p>Tips1: Nested 嵌套类型</p></blockquote><p>需要注意的是嵌套类型Nested这种,如果用对象类型存放的是这种数据，由于Lucene 没有对象的概念，所以会将对象扁平化处理，此时数据之间就会丢失他们之间的关系，此时如果去查询不符合条件的数据，此时也可能查询的到。而Nested就是解决这种问题的，嵌套类型会将数据单独作为一个文挡独立存储</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#存放数据</span><br><span class="line">&#123;</span><br><span class="line">  &quot;group&quot;: &quot;users&quot;,</span><br><span class="line">  &quot;username&quot;: [</span><br><span class="line">&#123; &quot;first&quot;: &quot;wu&quot;, &quot;last&quot;: &quot;px&quot;&#125;,</span><br><span class="line">&#123; &quot;first&quot;: &quot;hu&quot;, &quot;last&quot;: &quot;xy&quot;&#125;,</span><br><span class="line">&#123; &quot;first&quot;: &quot;wu&quot;, &quot;last&quot;: &quot;mx&quot;&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#实际转换为</span><br><span class="line">&#123;</span><br><span class="line">  &quot;group&quot;: &quot;users&quot;,</span><br><span class="line">  &quot;username.first&quot;: [&quot;wu&quot;, &quot;hu&quot;, &quot;wu&quot;],</span><br><span class="line">  &quot;username.last&quot;: [&quot;px&quot;, &quot;xy&quot;, &quot;mx&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Tips2: <a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.6/dynamic.html">Dynamic Mapping  动态字段映射</a></p></blockquote><p>Mapping中的字段类型一旦设定后，禁止直接修改。是因为Lucene实现的倒排索引生成后不允许修改，如果修改了字段的数据类型，会导致已被索引的无法被搜索，但是如果是增加新的字段，就不会有这样的影响。默认<strong>dynamic</strong>是为True,可以添加新字段。</p><p>Dynamic Mapping 机制使我们不需要手动定义mapping, Es就能够文档信息来自动推断字段的类型。我们可以在创建索引的时候直接插入文档，或者说是在原有映射上插入了一个更多字段的文档。此时Es自动跟根据我们存入的文档信息来自动推断出合适的类型。</p><p>Es为这种机制提供了一个参数 <strong>dynamic</strong>，通过控制这个参数的值，我们就可以根据自己的业务在一开始就指定这个索引是否能够动态增加字段。</p><div class="table-container"><table><thead><tr><th style="text-align:left">策略</th><th style="text-align:left">功能说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>true</code></td><td style="text-align:left">新字段将添加到映射中（默认）。</td></tr><tr><td style="text-align:left"><code>false</code></td><td style="text-align:left">新字段将被忽略。这些字段不会被编入索引 或可搜索，但仍会显示在返回的命中字段中。不会添加这些字段到映射中，并且必须显式添加新字段</td></tr><tr><td style="text-align:left"><code>strict</code></td><td style="text-align:left">遇到陌生字段时, 作报错处理如，必须将新字段显式添加到映射中。</td></tr><tr><td style="text-align:left"><code>runtime</code></td><td style="text-align:left">新字段将作为<a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.6/runtime.html">运行时字段</a>添加到映射中。 这些字段不会编制索引，而是在查询时加载</td></tr></tbody></table></div><hr><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html">插入数据</a></h4><p>在创建了索引和映射后，我们就已经确定了哪些字段能够被检索到，哪些能够被精确检索到,我们可以通过以下语句来为指定索引插入对应数据</p><p><strong>单条写入PUT/POST：</strong></p><ol><li>PUT:     需要设定数据ID [同一条数据首次插入是created，再次插入会updated</li><li>POST:     可选择设定数据ID[不指定id情况下：同一条数据首次插入是created，再次插入还是created，但_id会变，等于是新加了一条一样的数据；如果指定id若id不变第二次插入失败]</li></ol><p><strong>多条写入</strong></p><p>如果是需要多条写入的话，就需要</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST _bulk</span><br><span class="line">&#123;index:&#123;&quot;_index&quot;:<span class="string">&quot;student&quot;</span>, <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;&#125;</span><br><span class="line">...</span><br><span class="line">&#123;index:&#123;&quot;_index&quot;:<span class="string">&quot;student&quot;</span>, <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;2&quot;</span>&#125;&#125;</span><br><span class="line">...</span><br><span class="line">&#123;index:&#123;&quot;_index&quot;:<span class="string">&quot;student&quot;</span>, <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;3&quot;</span>&#125;&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>PUT sutdent/_doc + 插入数据</code>，例如，我需要插入以下数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST student/_doc</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;张三&quot;,</span><br><span class="line">&quot;sex&quot;:&quot;man&quot;,</span><br><span class="line">&quot;age&quot;: &quot;18&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询-DSL-SQL"><a href="#查询-DSL-SQL" class="headerlink" title="查询 DSL + SQL"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/query-dsl-bool-query.html">查询 DSL</a> + SQL</h4><p>此时如果我想要像MySQL一样条件查询Es的话</p><div class="table-container"><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>must</code></td><td>子句（查询）必须出现在匹配的文档中，并且将 贡献分数。</td></tr><tr><td><code>filter</code></td><td>子句（查询）必须出现在匹配的文档中。但是，与查询的分数不同的是，该查询的分数将被忽略。执行筛选子句 在<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/query-filter-context.html">筛选器上下文</a>中，意味着忽略评分 和子句考虑用于缓存。<code>must</code></td></tr><tr><td><code>should</code></td><td>子句（查询）应出现在匹配文档中。</td></tr><tr><td><code>must_not</code></td><td>子句（查询）不得出现在匹配项中 文件。子句在<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/query-filter-context.html">过滤器上下文</a>中执行，含义 该评分将被忽略，子句被考虑用于缓存。因为得分是 忽略，则返回“对于所有文档”的分数。<code>0</code></td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; </span><br><span class="line">    &quot;bool&quot;: &#123; </span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;title&quot;:   &quot;Search&quot;        &#125;&#125;, </span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;content&quot;: &quot;Elasticsearch&quot; &#125;&#125;  </span><br><span class="line">      ],</span><br><span class="line">      &quot;filter&quot;: [ </span><br><span class="line">        &#123; &quot;term&quot;:  &#123; &quot;status&quot;: &quot;published&quot; &#125;&#125;, </span><br><span class="line">        &#123; &quot;range&quot;: &#123; &quot;publish_date&quot;: &#123; &quot;gte&quot;: &quot;2015-01-01&quot; &#125;&#125;&#125; </span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.6/sql-getting-started.html">Elasticsearch SQL</a></p><p>一般使用 <code>Elasticsearch</code> 的时候，会使用 <code>Query DSL</code> 来查询数据，从 <code>Elasticsearch6.3</code> 版本以后，<code>Elasticsearch</code> 已经支持<code>SQL</code>查询了。</p><p><code>Elasticsearch SQL</code> 是一个 <code>X-Pack</code> 组件，它允许针对 <code>Elasticsearch</code> 实时执行类似<code>SQL</code>的 查询。无论使用<code>REST</code>接口，命令行还是<code>JDBC</code>，任何客户端都可以使用<code>SQL</code>对 <code>Elasticsearch</code>中的数据进行原生搜索和聚合数据。可以将 <code>Elasticsearch SQL</code> 看作是一种翻译器，它可以将 <code>SQL</code>翻译成 <code>Query DSL</code>。</p><p>Elasticsearch_SQL具有如下特性</p><ul><li>原生集成 <code>Elasticsearch SQL</code> 是为 <code>Elasticsearch</code> 从头开始构建的。每个查询都根据底层存储有效地针对相关节点执行。</li><li>没有外部零件 无需额外的硬件、进程、运行时或库来查询 <code>Elasticsearch</code>；<code>Elasticsearch SQL</code> 通过在<code>Elasticsearch</code> 内部运行消除了额外的移动部件。</li><li>轻巧高效 <code>Elasticsearch SQL</code>并未抽象化其搜索功能，相反的它拥抱并接受了<code>SQL</code>来 实现全文搜索，以简洁的方式实时运行全文搜索。</li></ul><p>其中SQL和Es的映射关系可以看上图，也可以通过官网查看对应关系 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.6/_mapping_concepts_across_sql_and_elasticsearch.html">结构关系对应</a></p><p><em>示例</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 可以通过 format参数控制返回结果的格式，默认为  json格式 </span><br><span class="line">#       txt:表示文本格式，看起来更直观点. </span><br><span class="line">#       csv:使用逗号隔开的数据 </span><br><span class="line">#       json:JSON格式数据 </span><br><span class="line">#       tsv: 使用  tab键隔开数据 </span><br><span class="line">#       yaml:属性配置格式 </span><br><span class="line">POST _sql?format=txt </span><br><span class="line">&#123; </span><br><span class="line">    &quot;query&quot;: &quot;&quot;&quot; </span><br><span class="line">      SELECT * FROM &quot;my-sql-index&quot; </span><br><span class="line">    &quot;&quot;&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="聚合分析"><a href="#聚合分析" class="headerlink" title="聚合分析"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.6/search-aggregations.html">聚合分析</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DateTime时间工具类</title>
      <link href="/posts/d78cedf0.html"/>
      <url>/posts/d78cedf0.html</url>
      
        <content type="html"><![CDATA[<h4 id="DateTime时间工具类"><a href="#DateTime时间工具类" class="headerlink" title="DateTime时间工具类"></a>DateTime时间工具类</h4><p>```java<br>public class DateUtil {</p><pre><code>/** * 显示年月日时分秒，例如 2015-08-11 09:51:53. */public static final String DATETIME_PATTERN = &quot;yyyy-MM-dd HH:mm:ss&quot;;/** * 仅显示年月日，例如 2015-08-11. */public static final String DATE_PATTERN = &quot;yyyy-MM-dd&quot;;/** * 仅显示时分秒，例如 09:51:53. */public static final String TIME_PATTERN = &quot;HH:mm:ss&quot;;/** * 显示年月日时分秒(无符号)，例如 20150811095153. */public static final String UNSIGNED_DATETIME_PATTERN = &quot;yyyyMMddHHmmss&quot;;/** * 仅显示年月日(无符号)，例如 20150811. */public static final String UNSIGNED_DATE_PATTERN = &quot;yyyyMMdd&quot;;/** * 春天; */public static final Integer SPRING = 1;/** * 夏天; */public static final Integer SUMMER = 2;/** * 秋天; */public static final Integer AUTUMN = 3;/** * 冬天; */public static final Integer WINTER = 4;/** * 星期日; */public static final String SUNDAY = &quot;星期日&quot;;/** * 星期一; */public static final String MONDAY = &quot;星期一&quot;;/** * 星期二; */public static final String TUESDAY = &quot;星期二&quot;;/** * 星期三; */public static final String WEDNESDAY = &quot;星期三&quot;;/** * 星期四; */public static final String THURSDAY = &quot;星期四&quot;;/** * 星期五; */public static final String FRIDAY = &quot;星期五&quot;;/** * 星期六; */public static final String SATURDAY = &quot;星期六&quot;;/** * 年 */private static final String YEAR = &quot;year&quot;;/** * 月 */private static final String MONTH = &quot;month&quot;;/** * 周 */private static final String WEEK = &quot;week&quot;;/** * 日 */private static final String DAY = &quot;day&quot;;/** * 时 */private static final String HOUR = &quot;hour&quot;;/** * 分 */private static final String MINUTE = &quot;minute&quot;;/** * 秒 */private static final String SECOND = &quot;second&quot;;/** * 获取当前日期和时间字符串. * * @return String 日期时间字符串，例如 2015-08-11 09:51:53 */public static String getLocalDateTimeStr() &#123;    return format(LocalDateTime.now(), DATETIME_PATTERN);&#125;/** * 获取当前日期字符串. * * @return String 日期字符串，例如2015-08-11 */public static String getLocalDateStr() &#123;    return format(LocalDate.now(), DATE_PATTERN);&#125;/** * 获取当前时间字符串. * * @return String 时间字符串，例如 09:51:53 */public static String getLocalTimeStr() &#123;    return format(LocalTime.now(), TIME_PATTERN);&#125;/** * 获取当前星期字符串. * * @return String 当前星期字符串，例如 星期二 */public static String getDayOfWeekStr() &#123;    return format(LocalDate.now(), &quot;E&quot;);&#125;/** * 获取指定日期是星期几 * * @param localDate 日期 * @return String 星期几 */public static String getDayOfWeekStr(LocalDate localDate) &#123;    String[] weekOfDays = &#123;MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY&#125;;    int dayOfWeek = localDate.getDayOfWeek().getValue() - 1;    return weekOfDays[dayOfWeek];&#125;/** * 获取日期时间字符串 * * @param temporal 需要转化的日期时间 * @param pattern  时间格式 * @return String 日期时间字符串，例如 2015-08-11 09:51:53 */public static String format(TemporalAccessor temporal, String pattern) &#123;    DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(pattern);    return dateTimeFormatter.format(temporal);&#125;/** * 日期时间字符串转换为日期时间(java.time.LocalDateTime) * * @param localDateTimeStr 日期时间字符串 * @param pattern          日期时间格式 例如DATETIME_PATTERN * @return LocalDateTime 日期时间 */public static LocalDateTime parseLocalDateTime(String localDateTimeStr, String pattern) &#123;    DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(pattern);    return LocalDateTime.parse(localDateTimeStr, dateTimeFormatter);&#125;/** * 日期字符串转换为日期(java.time.LocalDate) * * @param localDateStr 日期字符串 * @param pattern      日期格式 例如DATE_PATTERN * @return LocalDate 日期 */public static LocalDate parseLocalDate(String localDateStr, String pattern) &#123;    DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(pattern);    return LocalDate.parse(localDateStr, dateTimeFormatter);&#125;/** * 获取指定日期时间加上指定数量日期时间单位之后的日期时间. * * @param localDateTime 日期时间 * @param num           数量 * @param chronoUnit    日期时间单位 * @return LocalDateTime 新的日期时间 */public static LocalDateTime plus(LocalDateTime localDateTime, int num, ChronoUnit chronoUnit) &#123;    return localDateTime.plus(num, chronoUnit);&#125;/** * 获取指定日期时间减去指定数量日期时间单位之后的日期时间. * * @param localDateTime 日期时间 * @param num           数量 * @param chronoUnit    日期时间单位 * @return LocalDateTime 新的日期时间 */public static LocalDateTime minus(LocalDateTime localDateTime, int num, ChronoUnit chronoUnit) &#123;    return localDateTime.minus(num, chronoUnit);&#125;/** * 根据ChronoUnit计算两个日期时间之间相隔日期时间 * * @param start      开始日期时间 * @param end        结束日期时间 * @param chronoUnit 日期时间单位 * @return long 相隔日期时间 */public static long getChronoUnitBetween(LocalDateTime start, LocalDateTime end, ChronoUnit chronoUnit) &#123;    return Math.abs(start.until(end, chronoUnit));&#125;/** * 根据ChronoUnit计算两个日期之间相隔年数或月数或天数 * * @param start      开始日期 * @param end        结束日期 * @param chronoUnit 日期时间单位,(ChronoUnit.YEARS,ChronoUnit.MONTHS,ChronoUnit.WEEKS,ChronoUnit.DAYS) * @return long 相隔年数或月数或天数 */public static long getChronoUnitBetween(LocalDate start, LocalDate end, ChronoUnit chronoUnit) &#123;    return Math.abs(start.until(end, chronoUnit));&#125;/** * 获取本年第一天的日期字符串 * * @return String 格式：yyyy-MM-dd 00:00:00 */public static String getFirstDayOfYearStr() &#123;    return getFirstDayOfYearStr(LocalDateTime.now());&#125;/** * 获取本年最后一天的日期字符串 * * @return String 格式：yyyy-MM-dd 23:59:59 */public static String getLastDayOfYearStr() &#123;    return getLastDayOfYearStr(LocalDateTime.now());&#125;/** * 获取指定日期当年第一天的日期字符串 * * @param localDateTime 指定日期时间 * @return String 格式：yyyy-MM-dd 00:00:00 */public static String getFirstDayOfYearStr(LocalDateTime localDateTime) &#123;    return getFirstDayOfYearStr(localDateTime, DATETIME_PATTERN);&#125;/** * 获取指定日期当年最后一天的日期字符串 * * @param localDateTime 指定日期时间 * @return String 格式：yyyy-MM-dd 23:59:59 */public static String getLastDayOfYearStr(LocalDateTime localDateTime) &#123;    return getLastDayOfYearStr(localDateTime, DATETIME_PATTERN);&#125;/** * 获取指定日期当年第一天的日期字符串,带日期格式化参数 * * @param localDateTime 指定日期时间 * @param pattern       日期时间格式 * @return String 格式：yyyy-MM-dd 00:00:00 */public static String getFirstDayOfYearStr(LocalDateTime localDateTime, String pattern) &#123;    return format(localDateTime.withDayOfYear(1).withHour(0).withMinute(0).withSecond(0), pattern);&#125;/** * 获取指定日期当年最后一天的日期字符串,带日期格式化参数 * * @param localDateTime 指定日期时间 * @param pattern       日期时间格式 * @return String 格式：yyyy-MM-dd 23:59:59 */public static String getLastDayOfYearStr(LocalDateTime localDateTime, String pattern) &#123;    return format(localDateTime.with(TemporalAdjusters.lastDayOfYear()).withHour(23).withMinute(59).withSecond(59), pattern);&#125;/** * 获取本月第一天的日期字符串 * * @return String 格式：yyyy-MM-dd 00:00:00 */public static String getFirstDayOfMonthStr() &#123;    return getFirstDayOfMonthStr(LocalDateTime.now());&#125;/** * 获取本月最后一天的日期字符串 * * @return String 格式：yyyy-MM-dd 23:59:59 */public static String getLastDayOfMonthStr() &#123;    return getLastDayOfMonthStr(LocalDateTime.now());&#125;/** * 获取指定日期当月第一天的日期字符串 * * @param localDateTime 指定日期时间 * @return String 格式：yyyy-MM-dd 23:59:59 */public static String getFirstDayOfMonthStr(LocalDateTime localDateTime) &#123;    return getFirstDayOfMonthStr(localDateTime, DATETIME_PATTERN);&#125;/** * 获取指定日期当月最后一天的日期字符串 * * @param localDateTime 指定日期时间 * @return String 格式：yyyy-MM-dd 23:59:59 */public static String getLastDayOfMonthStr(LocalDateTime localDateTime) &#123;    return getLastDayOfMonthStr(localDateTime, DATETIME_PATTERN);&#125;/** * 获取指定日期当月第一天的日期字符串,带日期格式化参数 * * @param localDateTime 指定日期时间 * @return String 格式：yyyy-MM-dd 00:00:00 */public static String getFirstDayOfMonthStr(LocalDateTime localDateTime, String pattern) &#123;    return format(localDateTime.withDayOfMonth(1).withHour(0).withMinute(0).withSecond(0), pattern);&#125;/** * 获取指定日期当月最后一天的日期字符串,带日期格式化参数 * * @param localDateTime 指定日期时间 * @param pattern       日期时间格式 * @return String 格式：yyyy-MM-dd 23:59:59 */public static String getLastDayOfMonthStr(LocalDateTime localDateTime, String pattern) &#123;    return format(localDateTime.with(TemporalAdjusters.lastDayOfMonth()).withHour(23).withMinute(59).withSecond(59), pattern);&#125;/** * 获取本周第一天的日期字符串 * * @return String 格式：yyyy-MM-dd 00:00:00 */public static String getFirstDayOfWeekStr() &#123;    return getFirstDayOfWeekStr(LocalDateTime.now());&#125;/** * 获取本周最后一天的日期字符串 * * @return String 格式：yyyy-MM-dd 23:59:59 */public static String getLastDayOfWeekStr() &#123;    return getLastDayOfWeekStr(LocalDateTime.now());&#125;/** * 获取指定日期当周第一天的日期字符串,这里第一天为周一 * * @param localDateTime 指定日期时间 * @return String 格式：yyyy-MM-dd 00:00:00 */public static String getFirstDayOfWeekStr(LocalDateTime localDateTime) &#123;    return getFirstDayOfWeekStr(localDateTime, DATETIME_PATTERN);&#125;/** * 获取指定日期当周最后一天的日期字符串,这里最后一天为周日 * * @param localDateTime 指定日期时间 * @return String 格式：yyyy-MM-dd 23:59:59 */public static String getLastDayOfWeekStr(LocalDateTime localDateTime) &#123;    return getLastDayOfWeekStr(localDateTime, DATETIME_PATTERN);&#125;/** * 获取指定日期当周第一天的日期字符串,这里第一天为周一,带日期格式化参数 * * @param localDateTime 指定日期时间 * @param pattern       日期时间格式 * @return String 格式：yyyy-MM-dd 00:00:00 */public static String getFirstDayOfWeekStr(LocalDateTime localDateTime, String pattern) &#123;    return format(localDateTime.with(DayOfWeek.MONDAY).withHour(0).withMinute(0).withSecond(0), pattern);&#125;/** * 获取指定日期当周最后一天的日期字符串,这里最后一天为周日,带日期格式化参数 * * @param localDateTime 指定日期时间 * @param pattern       日期时间格式 * @return String 格式：yyyy-MM-dd 23:59:59 */public static String getLastDayOfWeekStr(LocalDateTime localDateTime, String pattern) &#123;    return format(localDateTime.with(DayOfWeek.SUNDAY).withHour(23).withMinute(59).withSecond(59), pattern);&#125;/** * 获取今天开始时间的日期字符串 * * @return String 格式：yyyy-MM-dd 00:00:00 */public static String getStartTimeOfDayStr() &#123;    return getStartTimeOfDayStr(LocalDateTime.now());&#125;/** * 获取今天结束时间的日期字符串 * * @return String 格式：yyyy-MM-dd 23:59:59 */public static String getEndTimeOfDayStr() &#123;    return getEndTimeOfDayStr(LocalDateTime.now());&#125;/** * 获取指定日期开始时间的日期字符串 * * @param localDateTime 指定日期时间 * @return String 格式：yyyy-MM-dd 00:00:00 */public static String getStartTimeOfDayStr(LocalDateTime localDateTime) &#123;    return getStartTimeOfDayStr(localDateTime, DATETIME_PATTERN);&#125;/** * 获取指定日期结束时间的日期字符串 * * @param localDateTime 指定日期时间 * @return String 格式：yyyy-MM-dd 23:59:59 */public static String getEndTimeOfDayStr(LocalDateTime localDateTime) &#123;    return getEndTimeOfDayStr(localDateTime, DATETIME_PATTERN);&#125;/** * 获取指定日期开始时间的日期字符串,带日期格式化参数 * * @param localDateTime 指定日期时间 * @param pattern       日期时间格式 * @return String 格式：yyyy-MM-dd HH:mm:ss */public static String getStartTimeOfDayStr(LocalDateTime localDateTime, String pattern) &#123;    return format(localDateTime.withHour(0).withMinute(0).withSecond(0), pattern);&#125;/** * 获取指定日期结束时间的日期字符串,带日期格式化参数 * * @param localDateTime 指定日期时间 * @param pattern       日期时间格式 * @return String 格式：yyyy-MM-dd 23:59:59 */public static String getEndTimeOfDayStr(LocalDateTime localDateTime, String pattern) &#123;    return format(localDateTime.withHour(23).withMinute(59).withSecond(59), pattern);&#125;/** * 切割日期。按照周期切割成小段日期段。例如： &lt;br&gt; * * @param startDate 开始日期（yyyy-MM-dd） * @param endDate   结束日期（yyyy-MM-dd） * @param period    周期（天，周，月，年） * @return 切割之后的日期集合 * &lt;li&gt;startDate=&quot;2019-02-28&quot;,endDate=&quot;2019-03-05&quot;,period=&quot;day&quot;&lt;/li&gt; * &lt;li&gt;结果为：[2019-02-28, 2019-03-01, 2019-03-02, 2019-03-03, 2019-03-04, 2019-03-05]&lt;/li&gt;&lt;br&gt; * &lt;li&gt;startDate=&quot;2019-02-28&quot;,endDate=&quot;2019-03-25&quot;,period=&quot;week&quot;&lt;/li&gt; * &lt;li&gt;结果为：[2019-02-28,2019-03-06, 2019-03-07,2019-03-13, 2019-03-14,2019-03-20, * 2019-03-21,2019-03-25]&lt;/li&gt;&lt;br&gt; * &lt;li&gt;startDate=&quot;2019-02-28&quot;,endDate=&quot;2019-05-25&quot;,period=&quot;month&quot;&lt;/li&gt; * &lt;li&gt;结果为：[2019-02-28,2019-02-28, 2019-03-01,2019-03-31, 2019-04-01,2019-04-30, * 2019-05-01,2019-05-25]&lt;/li&gt;&lt;br&gt; * &lt;li&gt;startDate=&quot;2019-02-28&quot;,endDate=&quot;2020-05-25&quot;,period=&quot;year&quot;&lt;/li&gt; * &lt;li&gt;结果为：[2019-02-28,2019-12-31, 2020-01-01,2020-05-25]&lt;/li&gt;&lt;br&gt; */public static List&lt;String&gt; listDateStrs(String startDate, String endDate, String period) &#123;    List&lt;String&gt; result = new ArrayList&lt;&gt;();    DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(DATE_PATTERN);    LocalDate end = LocalDate.parse(endDate, dateTimeFormatter);    LocalDate start = LocalDate.parse(startDate, dateTimeFormatter);    LocalDate tmp = start;    switch (period) &#123;        case DAY:            while (start.isBefore(end) || start.isEqual(end)) &#123;                result.add(start.toString());                start = start.plusDays(1);            &#125;            break;        case WEEK:            while (tmp.isBefore(end) || tmp.isEqual(end)) &#123;                if (tmp.plusDays(6).isAfter(end)) &#123;                    result.add(tmp.toString() + &quot;,&quot; + end);                &#125; else &#123;                    result.add(tmp.toString() + &quot;,&quot; + tmp.plusDays(6));                &#125;                tmp = tmp.plusDays(7);            &#125;            break;        case MONTH:            while (tmp.isBefore(end) || tmp.isEqual(end)) &#123;                LocalDate lastDayOfMonth = tmp.with(TemporalAdjusters.lastDayOfMonth());                if (lastDayOfMonth.isAfter(end)) &#123;                    result.add(tmp.toString() + &quot;,&quot; + end);                &#125; else &#123;                    result.add(tmp.toString() + &quot;,&quot; + lastDayOfMonth);                &#125;                tmp = lastDayOfMonth.plusDays(1);            &#125;            break;        case YEAR:            while (tmp.isBefore(end) || tmp.isEqual(end)) &#123;                LocalDate lastDayOfYear = tmp.with(TemporalAdjusters.lastDayOfYear());                if (lastDayOfYear.isAfter(end)) &#123;                    result.add(tmp.toString() + &quot;,&quot; + end);                &#125; else &#123;                    result.add(tmp.toString() + &quot;,&quot; + lastDayOfYear);                &#125;                tmp = lastDayOfYear.plusDays(1);            &#125;            break;        default:            break;    &#125;    return result;&#125;public static void main(String[] args) &#123;    System.out.println(getLocalDateTimeStr());    System.out.println(getLocalDateStr());    System.out.println(getLocalTimeStr());    System.out.println(getDayOfWeekStr());    System.out.println(getDayOfWeekStr(LocalDate.now()));    System.out.println(&quot;========&quot;);    System.out.println(format(LocalDate.now(), UNSIGNED_DATE_PATTERN));    System.out.println(&quot;========&quot;);    System.out.println(parseLocalDateTime(&quot;2020-12-13 11:14:12&quot;, DATETIME_PATTERN));    System.out.println(parseLocalDate(&quot;2020-12-13&quot;, DATE_PATTERN));    System.out.println(&quot;========&quot;);    System.out.println(plus(LocalDateTime.now(), 3, ChronoUnit.HOURS));    System.out.println(minus(LocalDateTime.now(), 4, ChronoUnit.DAYS));    System.out.println(&quot;========&quot;);    System.out.println(getChronoUnitBetween(LocalDateTime.now(), parseLocalDateTime(&quot;2020-12-12 12:03:12&quot;, DATETIME_PATTERN), ChronoUnit.MINUTES));    System.out.println(getChronoUnitBetween(LocalDate.now(), parseLocalDate(&quot;2021-12-12&quot;, DATE_PATTERN), ChronoUnit.WEEKS));    System.out.println(&quot;========&quot;);    System.out.println(getFirstDayOfYearStr());    System.out.println(getFirstDayOfYearStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN)));    System.out.println(getFirstDayOfYearStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN), UNSIGNED_DATETIME_PATTERN));    System.out.println(getLastDayOfYearStr());    System.out.println(getLastDayOfYearStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN)));    System.out.println(getLastDayOfYearStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN), UNSIGNED_DATETIME_PATTERN));    System.out.println(&quot;========&quot;);    System.out.println(getFirstDayOfMonthStr());    System.out.println(getFirstDayOfMonthStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN)));    System.out.println(getFirstDayOfMonthStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN), UNSIGNED_DATETIME_PATTERN));    System.out.println(getLastDayOfMonthStr());    System.out.println(getLastDayOfMonthStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN)));    System.out.println(getLastDayOfMonthStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN), UNSIGNED_DATETIME_PATTERN));    System.out.println(&quot;========&quot;);    System.out.println(getFirstDayOfWeekStr());    System.out.println(getFirstDayOfWeekStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN)));    System.out.println(getFirstDayOfWeekStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN), UNSIGNED_DATETIME_PATTERN));    System.out.println(getLastDayOfWeekStr());    System.out.println(getLastDayOfWeekStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN)));    System.out.println(getLastDayOfWeekStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN), UNSIGNED_DATETIME_PATTERN));    System.out.println(&quot;========&quot;);    System.out.println(getStartTimeOfDayStr());    System.out.println(getStartTimeOfDayStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN)));    System.out.println(getStartTimeOfDayStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN), UNSIGNED_DATETIME_PATTERN));    System.out.println(getEndTimeOfDayStr());    System.out.println(getEndTimeOfDayStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN)));    System.out.println(getEndTimeOfDayStr(parseLocalDateTime(&quot;2021-12-12 12:03:12&quot;, DATETIME_PATTERN), UNSIGNED_DATETIME_PATTERN));    System.out.println(&quot;========&quot;);    List&lt;String&gt; dateStrs = listDateStrs(&quot;2019-01-30&quot;, &quot;2020-12-13&quot;, YEAR);    for (String dateStr : dateStrs) &#123;        System.out.println(dateStr);    &#125;    System.out.println(&quot;========&quot;);    List&lt;String&gt; dateStrs1 = listDateStrs(&quot;2019-01-30&quot;, &quot;2020-12-13&quot;, MONTH);    for (String dateStr : dateStrs1) &#123;        System.out.println(dateStr);    &#125;    System.out.println(&quot;========&quot;);    List&lt;String&gt; dateStrs2 = listDateStrs(&quot;2020-12-01&quot;, &quot;2020-12-13&quot;, DAY);    for (String dateStr : dateStrs2) &#123;        System.out.println(dateStr);    &#125;&#125;</code></pre><p>}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jackson序列化工具类</title>
      <link href="/posts/b9bf9abc.html"/>
      <url>/posts/b9bf9abc.html</url>
      
        <content type="html"><![CDATA[<h4 id="Jackson序列化工具类"><a href="#Jackson序列化工具类" class="headerlink" title="Jackson序列化工具类"></a>Jackson序列化工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JacksonUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;ObjectMapper&gt; om = ThreadLocal.withInitial(() -&gt; &#123;</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line">        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL); <span class="comment">//属性为NULL不序列化</span></span><br><span class="line">        <span class="comment">// 设置输入时忽略在JSON字符串中存在但Java对象实际没有的属性</span></span><br><span class="line">        objectMapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line">        objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="literal">false</span>);</span><br><span class="line">        objectMapper.configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, <span class="literal">true</span>);</span><br><span class="line">        objectMapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, <span class="literal">true</span>);</span><br><span class="line">        objectMapper.configure(JsonParser.Feature.ALLOW_COMMENTS, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> objectMapper;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> om.get();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JsonNode <span class="title function_">getJsonNode</span><span class="params">(String json)</span> &#123;</span><br><span class="line">        isJson(json);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mapper.readTree(json);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;JsonNode&gt; <span class="title function_">getJsonNodeList</span><span class="params">(String json)</span> &#123;</span><br><span class="line">        isJson(json);</span><br><span class="line">        List&lt;JsonNode&gt; jsonNodeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">JsonNode</span> <span class="variable">jsonNode</span> <span class="operator">=</span> mapper.readTree(json);</span><br><span class="line">            jsonNode.forEach(jsonNodeList::add);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jsonNodeList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;JsonNode&gt; <span class="title function_">getJsonNodeList</span><span class="params">(JsonNode jsonNode)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(jsonNode)) &#123;</span><br><span class="line">            List&lt;JsonNode&gt; jsonNodeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            jsonNode.forEach(jsonNodeList::add);</span><br><span class="line">            <span class="keyword">return</span> jsonNodeList;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将对象转换成JSON数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> JSON数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toJson</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mapper.writeValueAsString(data);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将JSON数据转换成对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonData JSON数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanType 对象类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getJsonToBean</span><span class="params">(String jsonData, Class&lt;T&gt; beanType)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mapper.readValue(jsonData, beanType);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getJsonToBean</span><span class="params">(String jsonData, Class&lt;T&gt; beanType, Class&lt;?&gt; targetClazz)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">JavaType</span> <span class="variable">javaType</span> <span class="operator">=</span> mapper.getTypeFactory().constructParametricType(beanType, targetClazz);</span><br><span class="line">            <span class="keyword">return</span> mapper.readValue(jsonData, javaType);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将JSON数据转换成列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonData JSON数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanType 对象类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">getJsonToList</span><span class="params">(String jsonData, Class&lt;T&gt; beanType)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">JavaType</span> <span class="variable">javaType</span> <span class="operator">=</span> mapper.getTypeFactory().constructParametricType(List.class, beanType);</span><br><span class="line">            <span class="keyword">return</span> mapper.readValue(jsonData, javaType);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">getJsonToList</span><span class="params">(String jsonData, Class&lt;T&gt; beanType, Class&lt;?&gt; targetClazz)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">JavaType</span> <span class="variable">javaType</span> <span class="operator">=</span> mapper.getTypeFactory().constructParametricType(beanType, targetClazz);</span><br><span class="line">            <span class="type">CollectionType</span> <span class="variable">collectionType</span> <span class="operator">=</span> mapper.getTypeFactory().constructCollectionType(List.class, javaType);</span><br><span class="line">            <span class="keyword">return</span> mapper.readValue(jsonData, collectionType);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将JSON数据转换成Set集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonData    JSON数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> elementType 元素类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Set集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; Set&lt;E&gt; <span class="title function_">getJsonToSet</span><span class="params">(String jsonData, Class&lt;E&gt; elementType)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">JavaType</span> <span class="variable">javaType</span> <span class="operator">=</span> mapper.getTypeFactory().constructCollectionType(Set.class, elementType);</span><br><span class="line">            <span class="keyword">return</span> mapper.readValue(jsonData, javaType);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将JSON数据转换成Map集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonData  JSON数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyType   键类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> valueType 值类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Map集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;K, V&gt; Map&lt;K, V&gt; <span class="title function_">getJsonToMap</span><span class="params">(String jsonData, Class&lt;K&gt; keyType, Class&lt;V&gt; valueType)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">JavaType</span> <span class="variable">javaType</span> <span class="operator">=</span> mapper.getTypeFactory().constructMapType(Map.class, keyType, valueType);</span><br><span class="line">            <span class="keyword">return</span> mapper.readValue(jsonData, javaType);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断字符串是否为一个Json</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isJson</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mapper.readTree(str);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>雪花算法工具类及原理</title>
      <link href="/posts/b8efd782.html"/>
      <url>/posts/b8efd782.html</url>
      
        <content type="html"><![CDATA[<h4 id="雪花算法工具类"><a href="#雪花算法工具类" class="headerlink" title="雪花算法工具类"></a>雪花算法工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SnowflakeUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始时间截 (2015-01-01)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">TWEPOCH</span> <span class="operator">=</span> <span class="number">1420041600000L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工作机器ID(0~31)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> WORKER_ID;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据中心ID(0~31)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> DATA_CENTER_ID;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机器id所占的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">WORKER_ID_BITS</span> <span class="operator">=</span> <span class="number">8L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据标识id所占的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">DATA_CENTER_ID_BITS</span> <span class="operator">=</span> <span class="number">2L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">MAX_WORKER_ID</span> <span class="operator">=</span> ~(-<span class="number">1L</span> &lt;&lt; WORKER_ID_BITS);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持的最大数据标识id，结果是31</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">MAX_DATA_CENTER_ID</span> <span class="operator">=</span> ~(-<span class="number">1L</span> &lt;&lt; DATA_CENTER_ID_BITS);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列在id中占的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">SEQUENCE_BITS</span> <span class="operator">=</span> <span class="number">12L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机器ID向左移12位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">WORKER_ID_SHIFT</span> <span class="operator">=</span> SEQUENCE_BITS;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据标识id向左移17位(12+5)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">DATA_CENTER_ID_SHIFT</span> <span class="operator">=</span> SEQUENCE_BITS + WORKER_ID_BITS;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间截向左移22位(5+5+12)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">TIMESTAMP_LEFT_SHIFT</span> <span class="operator">=</span> SEQUENCE_BITS + WORKER_ID_BITS + DATA_CENTER_ID_BITS;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">SEQUENCE_MASK</span> <span class="operator">=</span> ~(-<span class="number">1L</span> &lt;&lt; SEQUENCE_BITS);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 毫秒内序列(0~4095)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">sequence</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上次生成ID的时间截</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">lastTimestamp</span> <span class="operator">=</span> -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    SnowflakeUtil() &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">dataCenterId</span> <span class="operator">=</span> getDataCenterId(MAX_DATA_CENTER_ID);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">workerId</span> <span class="operator">=</span> getWorkerId(dataCenterId, MAX_WORKER_ID);</span><br><span class="line">        <span class="built_in">this</span>.checkAndSetWorkerIdAndDatacenterId(workerId, dataCenterId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkAndSetWorkerIdAndDatacenterId</span><span class="params">(<span class="type">long</span> workerId, <span class="type">long</span> datacenterId)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (workerId &gt; MAX_WORKER_ID || workerId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(String.format(<span class="string">&quot;worker Id can&#x27;t be greater than %d or less than 0&quot;</span>, MAX_WORKER_ID));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (datacenterId &gt; MAX_WORKER_ID || datacenterId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(String.format(<span class="string">&quot;datacenter Id can&#x27;t be greater than %d or less than 0&quot;</span>, MAX_WORKER_ID));</span><br><span class="line">        &#125;</span><br><span class="line">        WORKER_ID = workerId;</span><br><span class="line">        DATA_CENTER_ID = datacenterId;</span><br><span class="line">        log.info(<span class="string">&quot;snowflake workerId: &#123;&#125;&quot;</span>, workerId);</span><br><span class="line">        log.info(<span class="string">&quot;snowflake datacenterId: &#123;&#125;&quot;</span>, datacenterId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//================================================METHOD====================================================</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">getAsLong</span><span class="params">()</span> &#123;<span class="keyword">return</span> nextId();&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getAsString</span><span class="params">()</span> &#123;<span class="keyword">return</span> String.valueOf(nextId());&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得下一个ID (该方法是线程安全的)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SnowflakeId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="type">long</span> <span class="title function_">nextId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (WORKER_ID &gt; MAX_WORKER_ID || WORKER_ID &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(String.format(<span class="string">&quot;worker Id can&#x27;t be greater than %d or less than 0&quot;</span>, MAX_WORKER_ID));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (DATA_CENTER_ID &gt; MAX_DATA_CENTER_ID || DATA_CENTER_ID &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(String.format(<span class="string">&quot;datacenter Id can&#x27;t be greater than %d or less than 0&quot;</span>, MAX_DATA_CENTER_ID));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (timestamp &lt; lastTimestamp) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(String.format(<span class="string">&quot;Clock moved backwards.  Refusing to generate id for %d milliseconds&quot;</span>, lastTimestamp - timestamp));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果是同一时间生成的，则进行毫秒内序列</span></span><br><span class="line">        <span class="keyword">if</span> (lastTimestamp == timestamp) &#123;</span><br><span class="line">            sequence = (sequence + <span class="number">1</span>) &amp; SEQUENCE_MASK;</span><br><span class="line">            <span class="comment">// 毫秒内序列溢出</span></span><br><span class="line">            <span class="keyword">if</span> (sequence == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 阻塞到下一个毫秒,获得新的时间戳</span></span><br><span class="line">                timestamp = tilNextMillis(lastTimestamp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 时间戳改变，毫秒内序列重置</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            sequence = <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 上次生成ID的时间截</span></span><br><span class="line">        lastTimestamp = timestamp;</span><br><span class="line">        <span class="comment">// 移位并通过或运算拼到一起组成64位的ID</span></span><br><span class="line">        <span class="keyword">return</span> ((timestamp - TWEPOCH) &lt;&lt; TIMESTAMP_LEFT_SHIFT) <span class="comment">//</span></span><br><span class="line">                | (DATA_CENTER_ID &lt;&lt; DATA_CENTER_ID_SHIFT) <span class="comment">//</span></span><br><span class="line">                | (WORKER_ID &lt;&lt; WORKER_ID_SHIFT) <span class="comment">//</span></span><br><span class="line">                | sequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阻塞到下一个毫秒，直到获得新的时间戳</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastTimestamp 上次生成ID的时间截</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">tilNextMillis</span><span class="params">(<span class="type">long</span> lastTimestamp)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;</span><br><span class="line">            timestamp = System.currentTimeMillis();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getWorkerId</span><span class="params">(Long dataCenterId, Long maxWorkerId)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        buffer.append(dataCenterId);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> ManagementFactory.getRuntimeMXBean().getName();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(name)) &#123;</span><br><span class="line">            buffer.append(name.split(<span class="string">&quot;@&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Mac + PID 的hashCode 获取16个低位</span></span><br><span class="line">        <span class="keyword">return</span> (buffer.toString().hashCode() &amp; <span class="number">0xffff</span>) % (dataCenterId + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据标识部分</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getDataCenterId</span><span class="params">(Long maxDatacenterId)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">ip</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">            <span class="type">NetworkInterface</span> <span class="variable">network</span> <span class="operator">=</span> NetworkInterface.getByInetAddress(ip);</span><br><span class="line">            <span class="keyword">if</span> (network == <span class="literal">null</span>) &#123;</span><br><span class="line">                id = <span class="number">1L</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">byte</span>[] mac = network.getHardwareAddress();</span><br><span class="line">                <span class="keyword">if</span> (mac != <span class="literal">null</span>) &#123;</span><br><span class="line">                    id = ((<span class="number">0x000000FF</span> &amp; (<span class="type">long</span>) mac[mac.length - <span class="number">1</span>]) | (<span class="number">0x0000FF00</span> &amp; (((<span class="type">long</span>) mac[mac.length - <span class="number">2</span>]) &lt;&lt; <span class="number">8</span>))) &gt;&gt; <span class="number">6</span>;</span><br><span class="line">                    id = id % (maxDatacenterId + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot; getDatacenterId error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> 雪花算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch8-6学习 I</title>
      <link href="/posts/7837d6a9.html"/>
      <url>/posts/7837d6a9.html</url>
      
        <content type="html"><![CDATA[<h2 id="ElasticSearch概念"><a href="#ElasticSearch概念" class="headerlink" title="ElasticSearch概念"></a>ElasticSearch概念</h2><p><a href="https://www.elastic.co/cn/elasticsearch/">Elasticsearch：官方分布式搜索和分析引擎 | Elastic</a></p><p>一切为了检索 [you konw,for search]</p><h2 id="ElasticSearch基本操作"><a href="#ElasticSearch基本操作" class="headerlink" title="ElasticSearch基本操作"></a>ElasticSearch基本操作</h2><h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h3><p>ElasticSearch是面向文档型数据库的，一条数据就是一个文档。类比于关系型数据库MySQL，Es中的index相当于Database,Type相当于表(在7版本中已经删除了)，Document相当与表中的数据。</p><p>其类比关系如图:</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/Es%E7%BB%93%E6%9E%84%E7%B1%BB%E6%AF%94%E5%85%B3%E7%B3%BB%E5%9B%BE.png" alt="Es结构关系类比图"></p><h3 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h3><h4 id="创建索引-PUT"><a href="#创建索引-PUT" class="headerlink" title="创建索引 | PUT"></a>创建索引 | PUT</h4><ul><li><p>类比于MySQL，其对应操作就是create database ,创建数据库</p></li><li><p><code>PUT 索引名称</code></p></li><li><p>正常返回结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;acknowledged&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>  # <span class="literal"><span class="keyword">true</span></span> 操作成功</span><br><span class="line">  <span class="attr">&quot;shards_acknowledged&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> # 分片操作成功</span><br><span class="line">  <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span> # 索引名称</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>如果重复添加索引，则会抛出错误，就如同数据库不能创建两个相同名字的库</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/es%E9%87%8D%E5%A4%8D%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95%E5%A4%B1%E8%B4%A5.png" alt="重复创建索引" style="zoom: 33%;" /></p></li></ul><h4 id="查看全部索引-GET"><a href="#查看全部索引-GET" class="headerlink" title="查看全部索引 | GET"></a>查看全部索引 | GET</h4><ul><li><code>GET _cat/indices?v</code></li><li><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/Es%E6%9F%A5%E7%9C%8B%E7%B4%A2%E5%BC%95.png" alt="Es查看索引"></li></ul><p>查询参数:</p><ul><li><strong>_cat</strong>: 表示查看</li><li><strong>indices</strong>: 表示索引</li></ul><p>返回参数</p><ul><li><strong>health</strong>: 当前服务器健康状态  <strong>green</strong> [集群完整] <strong>yellow</strong> [单点正常,集群不完整]，<strong>red</strong>[单点不正常]</li><li><strong>index</strong>: 索引名</li><li><strong>status</strong>: 索引关闭状态</li><li><strong>uuid</strong>: 索引唯一Id</li><li><strong>pri:</strong> 主分片数量</li><li><strong>rep</strong>: 副本数量</li><li><strong>docs.deleted</strong> : 文档删除状态（逻辑删除）</li><li><strong>docs.count</strong>: 可用文档数量</li><li><strong>store.size</strong>: 主分片和副分片整体空间大小</li></ul><h4 id="查看单个索引-GET"><a href="#查看单个索引-GET" class="headerlink" title="查看单个索引 | GET"></a>查看单个索引 | GET</h4><ul><li><p><code>GET  索引名</code></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/Es%E6%9F%A5%E7%9C%8B%E5%8D%95%E4%B8%AA%E7%B4%A2%E5%BC%95%E8%AF%A6%E6%83%85.png" alt="Es查询索引详情"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="string">&quot;user&quot;</span>【索引名】<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="string">&quot;aliases&quot;</span>【别名】<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;mappings&quot;</span>【映射】<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;settings&quot;</span>【设置】<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="string">&quot;index&quot;</span>【设置 - 索引】<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="string">&quot;routing&quot;</span>【设置 - 索引路由】<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;allocation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;_tier_preference&quot;</span><span class="punctuation">:</span> <span class="string">&quot;data_content&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;number_of_shards&quot;</span>【设置 - 索引 - 主分片数量】<span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;provided_name&quot;</span>【设置 - 索引 - 名称】<span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;creation_date&quot;</span>【设置 - 索引 - 创建时间】<span class="punctuation">:</span> <span class="string">&quot;1659678930693&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;number_of_replicas&quot;</span>【设置 - 索引 - 副分片数量】<span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;uuid&quot;</span>【设置 - 索引 - 唯一标识】<span class="punctuation">:</span> <span class="string">&quot;P0pIpPyTSa-zS7kJCeE7Ng&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;version&quot;</span>【设置 - 索引版本号】<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8030399&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="删除索引-DELETE"><a href="#删除索引-DELETE" class="headerlink" title="删除索引 | DELETE"></a>删除索引 | DELETE</h4><ul><li><p><code>DELETE 索引名称</code>      tip:慎用</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/ES%E5%88%A0%E9%99%A4%E7%B4%A2%E5%BC%95.png" alt="Es删除索引"></p></li></ul><h3 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h3><h4 id="创建文档-POST"><a href="#创建文档-POST" class="headerlink" title="创建文档 | POST"></a>创建文档 | POST</h4><p>在创建了索引的前提下，为这个索引添加数据。document类比于SQL中的表数据，Es中添加的数据为JSON格式</p><ul><li><p><code>POST 索引名/_doc</code></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/Es%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE.png" alt="Es添加数据"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="string">&quot;_index&quot;</span>【索引】<span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;_id&quot;</span>【文档唯一标识，支持自定义】<span class="punctuation">:</span> <span class="string">&quot;C1yqbIIBJVfoW_YKu2D5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;_version&quot;</span>【版本】<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;result&quot;</span>【结果】<span class="punctuation">:</span> <span class="string">&quot;created&quot;</span><span class="punctuation">,</span>#这里的 create 表示创建成功</span><br><span class="line">  <span class="string">&quot;_shards&quot;</span>【分片】<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="string">&quot;total&quot;</span>【分片 - 总数】<span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;successful&quot;</span>【分片 - 成功】<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;failed&quot;</span>【分片 - 失败】<span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>POST 索引名/_doc/自定义ID</code></p></li></ul><h4 id="查看文档-GET"><a href="#查看文档-GET" class="headerlink" title="查看文档 | GET"></a>查看文档 | GET</h4><ul><li><p>不指定查看文档的唯一Id时，类似于MySQL中的<code>select * from table</code></p></li><li><p>查看索引下指定文档: <code>GET 索引名称/_doc/文档唯一标识</code></p></li><li><p>查看索引下全部文档: <code>GET 索引名/_search</code></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E6%9F%A5%E7%9C%8B%E7%B4%A2%E5%BC%95%E6%8C%87%E5%AE%9A%E6%95%B0%E6%8D%AE.png" alt="Es查看索引指定数据"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="string">&quot;_index&quot;</span>【索引】<span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C1yqbIIBJVfoW_YKu2D5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;found&quot;</span>【查询结果】<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;_source&quot;</span>【文档源信息】<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;userName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A佳技术&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="string">&quot;28&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p>或者</p><ul><li><p><code>GET /_mget</code></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/Es%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E7%B4%A2%E5%BC%95%E4%B8%8B%E6%8C%87%E5%AE%9Aid%E7%9A%84%E6%95%B0%E6%8D%AE.png" style="zoom: 67%;" /></p></li></ul><ul><li>参考章节 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.7/docs-multi-get.html">Multi get (mget) API | Elasticsearch Guide [8.7] | Elastic</a></li></ul><h4 id="修改文档-POST"><a href="#修改文档-POST" class="headerlink" title="修改文档 | POST"></a>修改文档 | POST</h4><ul><li><p><code>POST 索引名/_doc/(唯一标识)</code></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E5%85%A8%E5%B1%80%E4%BF%AE%E6%94%B9document%E5%8F%82%E6%95%B0.png" alt="全局更新文档字段"></p></li></ul><ul><li><p><code>POST 索引名/_update/(唯一标识)</code></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/Es7-X%E6%9B%B4%E6%96%B0%E6%96%87%E6%A1%A3.png" alt=""></p></li></ul><h4 id="删除文档-DELETE"><a href="#删除文档-DELETE" class="headerlink" title="删除文档 | DELETE"></a>删除文档 | DELETE</h4><h5 id="删除指定Id文档"><a href="#删除指定Id文档" class="headerlink" title="删除指定Id文档"></a>删除指定Id文档</h5><ul><li><p>Es删除文档不会立即从磁盘上删除，只是被标记为逻辑删除，通过<code>GET _cat/indices?v</code>能够看到这个索引被逻辑删除的文档数量</p></li><li><p><code>DELETE 索引名/_doc/(唯一标识)</code></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E5%88%A0%E9%99%A4%E6%96%87%E6%A1%A3%E9%80%BB%E8%BE%91.png" alt=""></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C1yqbIIBJVfoW_YKu2D5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;_version&quot;</span>【版本<span class="punctuation">:</span>对数据的操作，都会更新版本】<span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;result&quot;</span>【结果】<span class="punctuation">:</span> <span class="string">&quot;deleted&quot;</span><span class="punctuation">,</span># deleted 表示数据被标记为删除</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="条件删除文档"><a href="#条件删除文档" class="headerlink" title="条件删除文档"></a>条件删除文档</h5><ul><li><p><code>POST 索引名称/delet_by_query</code>  <img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E6%9D%A1%E4%BB%B6%E5%88%A0%E9%99%A4.png" alt=""></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="string">&quot;took&quot;</span>【耗时】<span class="punctuation">:</span> <span class="number">17</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;timed_out&quot;</span>【是否超时】<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;total&quot;</span>【总数】<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;deleted&quot;</span>【删除数量】<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;batches&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version_conflicts&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;noops&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;retries&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bulk&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;search&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;throttled_millis&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;requests_per_second&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;throttled_until_millis&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;failures&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="映射基本操作"><a href="#映射基本操作" class="headerlink" title="映射基本操作"></a>映射基本操作</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>Es映射相当于MySQL中的表结构，在MySQL建表的时候需要指定相应的字段为对应的类型，而Es的映射也具有同样的作用。索引也一样，需要知道这个类型下有哪些字段，每个字段有哪些约束信息，这就叫做映射</p><h4 id="创建索引-PUT-1"><a href="#创建索引-PUT-1" class="headerlink" title="创建索引|PUT"></a>创建索引|PUT</h4><p><code>PUT student</code> 创建student索引</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E5%88%9B%E5%BB%BAstudent%E7%B4%A2%E5%BC%95.png" style="zoom:50%;" /></p><h4 id="创建映射-PUT"><a href="#创建映射-PUT" class="headerlink" title="创建映射|PUT"></a>创建映射|PUT</h4><p>为这个索引创建映射</p><p><code>PUS student/_mapping + 请求体内容</code>，例如</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E4%B8%BAsudent%E5%88%9B%E5%BB%BA%E6%98%A0%E5%B0%84.png" style="zoom: 50%;" /></p><h5 id="映射数据说明"><a href="#映射数据说明" class="headerlink" title="映射数据说明"></a>映射数据说明</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- 字段名: 任意填写</span><br><span class="line">- type : 类型 Es中支持的数据类型存在有很多种，其中最为常用的是</span><br><span class="line">-String类型， 字符串类型 分两种</span><br><span class="line">-text : 可分词，支持模糊查询，支持准确查询，不支持聚合查询</span><br><span class="line">-keyword : 不可分词，数据只能最小单词来进行匹配，支持模糊查询，支持准确查询，支持聚合查询</span><br><span class="line">-Numerical： 数值类型 分两类</span><br><span class="line">基本数值类型: long， integer, short, byte, double, float, half_float</span><br><span class="line">浮点型的高精度类型: scaled_float</span><br><span class="line">-Date : 日期类型</span><br><span class="line">-Array: 数组类型</span><br><span class="line">-Object: 对象</span><br><span class="line">- index : 是否索引，默认为ture，意思就是说不进行配置，默认所有字段都能被检索出来</span><br><span class="line">-true : 字段能够被索引，能够被进行搜索</span><br><span class="line">-false : 字段不能被索引，不能用来进行搜索</span><br><span class="line">-ignore_above : 表示最大的字段值长度，超出这个长度的字段将不会被索引，但是会存储。</span><br></pre></td></tr></table></figure><h5 id="Nested"><a href="#Nested" class="headerlink" title="Nested"></a>Nested</h5><p>其中Nested 是Object类型中的一种，也是比较特殊的一种，在实际场景中，通常会存在这种。我创建了一个位置信息，其中数据是这样的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;labels&quot;: [&#123;</span><br><span class="line">        &quot;key&quot;: &quot;ip&quot;,</span><br><span class="line">        &quot;value&quot;: &quot;127.0.0.1&quot;</span><br><span class="line">     &#125;]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    &quot;labels&quot;: [&#123;</span><br><span class="line">        &quot;key&quot;: &quot;ip&quot;,</span><br><span class="line">        &quot;value&quot;: &quot;127.0.0.2&quot;</span><br><span class="line">     &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果我们需要查询的是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;bool&quot;:&#123;</span><br><span class="line">            &quot;must&quot;:[</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;match&quot;:&#123;</span><br><span class="line">                        &quot;key&quot;:&quot;ip&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;match&quot;:&#123;</span><br><span class="line">                        &quot;value&quot;:&quot;127.0.0.1&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就会出现结果为这样的情况，这种结果显然是不对的。出现这样的原因是什么呢？Es是没有内部对象的概念的，因此，ES在存储复杂类型的时候会把对象的复杂层次结果扁平化为一个键值对列表。如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;labels.key&quot;:[</span><br><span class="line">        &quot;ip&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;labels.value&quot;:[</span><br><span class="line">        &quot;127.0.0.1&quot;,</span><br><span class="line">        &quot;127.0.0.2&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于这种情况，Esh提供的nested结构可以帮助我们解决类似的问题。Nested结构保留了子文档数据中的关联性，如果labels的数据格式被定义为nested，那么每一个nested object将会作为一个隐藏的单独文本建立索引。如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     &quot;labels.key&quot;:&quot;ip&quot;,</span><br><span class="line">     &quot;labels.value&quot;:&quot;127.0.0.1&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">     &quot;labels.key&quot;:&quot;ip&quot;,</span><br><span class="line">     &quot;labels.value&quot;:&quot;127.0.0.2&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样通过分开给每个nested object建索引，object内部的字段间的关系就能保持。当执行查询时，只会匹配同时出现在相同的nested object的结果。</p><h6 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h6><p>对于创建对应的映射，如下所示</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;demoType&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;labels&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="comment">// 字段类型设置为nested</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nested&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h6 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h6><p>nested结构的数据查询和普通object有些不同，nested object作为一个独立隐藏文档单独建索引，因此，不能直接查询到它们。取而代之，我们必须使用nested查询或者nested filter。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;nested&quot;: &#123;</span><br><span class="line">            &quot;path&quot;: &quot;labels&quot;,</span><br><span class="line">            &quot;query&quot;: &#123;</span><br><span class="line">              &quot;bool&quot;: &#123;</span><br><span class="line">                &quot;must&quot;: [</span><br><span class="line">                  &#123;</span><br><span class="line">                    &quot;term&quot;: &#123;</span><br><span class="line">                      &quot;labels.key&quot;: &quot;ip&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;,</span><br><span class="line">                  &#123;</span><br><span class="line">                    &quot;term&quot;: &#123;</span><br><span class="line">                      &quot;labels.value&quot;: &quot;127.0.0.1&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                ]</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后就能够达到我们想要的结果</p><h4 id="查看映射-GET"><a href="#查看映射-GET" class="headerlink" title="查看映射|GET"></a>查看映射|GET</h4><p><code>GET 索引名/_mapping</code> 获取到指定索引的映射</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E6%9F%A5%E7%9C%8B%E7%B4%A2%E5%BC%95.png" style="zoom: 50%;" /></p><h4 id="索引关联映射-PUT"><a href="#索引关联映射-PUT" class="headerlink" title="索引关联映射| PUT"></a>索引关联映射| PUT</h4><ul><li>创建新的索引 student1，并设置对应对应的索引，实现 <code>PUT index 和 PUT index/_mapping + 条件</code>相同的功能</li><li>PUT student1 + 请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">PUT Student<span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;long&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="ElasticSearch高级操作"><a href="#ElasticSearch高级操作" class="headerlink" title="ElasticSearch高级操作"></a>ElasticSearch高级操作</h3><h4 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h4><h5 id="分词查询"><a href="#分词查询" class="headerlink" title="分词查询"></a>分词查询</h5><ul><li><code>请求方式：GET 索引名/_search</code> + 请求体内容</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lisi&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/es35.png" style="zoom:50%;" /></p><h5 id="查询所有文档"><a href="#查询所有文档" class="headerlink" title="查询所有文档"></a>查询所有文档</h5><ul><li><code>GET 索引名/_search</code></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"># <span class="string">&quot;query&quot;</span>：这里的 query 代表一个查询对象，里面可以有不同的查询属性</span><br><span class="line"># <span class="string">&quot;match_all&quot;</span>：查询类型，例如：match_all(代表查询所有)，match，term，range 等等</span><br><span class="line"># <span class="punctuation">&#123;</span>查询条件<span class="punctuation">&#125;</span>：查询条件会根据类型的不同，写法也有差异</span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/es36.png" style="zoom:50%;" /></p><h5 id="字段匹配查询"><a href="#字段匹配查询" class="headerlink" title="字段匹配查询"></a>字段匹配查询</h5><ul><li><p><code>multi_match</code> 与 <code>match</code> 类似，不同的是它可以在多个字段中查询。</p></li><li><p>请求方式 : GET 索引名/_search</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;multi_match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zhangsan&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;name&quot;</span><span class="punctuation">,</span><span class="string">&quot;nickname&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>查询字段名为name和nickname为zhangsan的doc数据</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/es37.png" style="zoom: 50%;" /></p><h5 id="单关键字精确查询"><a href="#单关键字精确查询" class="headerlink" title="单关键字精确查询"></a>单关键字精确查询</h5><ul><li><code>term</code> 查询，精确的关键词匹配查询，不对查询条件进行分词，即只能单关键字精确查询。</li><li>请求方式：<code>GET 索引名/_search</code> + 请求体内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: &quot;zhangsan&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/es38.png" style="zoom:50%;" /></p><h5 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h5><ul><li>wildcard 通配符模糊查询  ? 代表匹配任意字符    *代表匹配0个或多个字符</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET /basic_index*/_search</span><br><span class="line">&#123;</span><br><span class="line">&quot;size&quot;: 20,</span><br><span class="line">&quot;from&quot;: 0,</span><br><span class="line">&quot;query&quot;: &#123;</span><br><span class="line">&quot;bool&quot;: &#123;</span><br><span class="line">&quot;should&quot;: [&#123;</span><br><span class="line">&quot;wildcard&quot;: &#123;</span><br><span class="line">&quot;form_name&quot;: &quot;*very*</span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="多关键字精确查询"><a href="#多关键字精确查询" class="headerlink" title="多关键字精确查询"></a>多关键字精确查询</h5><ul><li>terms 查询和 term 查询一样，但它允许你指定多值进行匹配。如果这个字段包含了指定值中的任何一个值，那么这个文档满足条件，类似于 mysql 的 in</li><li>请求方式：<code>GET 索引名/_search</code> + 请求体内容</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;zhangsan&quot;</span><span class="punctuation">,</span><span class="string">&quot;lisi&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/es39.png" style="zoom:50%;" /></p><h5 id="查询指定字段"><a href="#查询指定字段" class="headerlink" title="查询指定字段"></a>查询指定字段</h5><ul><li>默认情况下，Elasticsearch 在搜索的结果中，会把文档中保存在 <code>_source</code> 的所有字段都返回。</li><li>如果我们只想获取其中的部分字段，我们可以添加 <code>_source</code> 的过滤</li><li>请求方式：<code>GET 索引名/_search</code> + 请求体内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;_source&quot;: [&quot;name&quot;,&quot;nickname&quot;], </span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;terms&quot;: &#123;</span><br><span class="line">            &quot;nickname&quot;: [&quot;zhangsan&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/es40.png" style="zoom:50%;" /></p><h5 id="过滤字段"><a href="#过滤字段" class="headerlink" title="过滤字段"></a>过滤字段</h5><ul><li>includes&amp;excludes</li><li>includes：来指定想要显示的字段 与 <code>&quot;_source&quot;: [&quot;name&quot;,&quot;nickname&quot;],</code> 一样的效果</li><li>excludes：来指定不想要显示的字段</li><li>请求方式：<code>GET 索引名/_search</code> + 请求体内容</li></ul><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/es41.png" style="zoom:50%;" /></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/es42.png" style="zoom: 50%;" /></p><h5 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h5><ul><li><code>bool</code> 把各种其它查询通过 <code>must</code>（必须，类似 and）、<code>must_not</code>（必须不，类似 not）、<code>should</code>（应该 类似 or）的方式进行组合</li><li>请求方式：<code>GET 索引名/_search</code>  + 请求体内容</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;must_not&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="string">&quot;40&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;should&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;男&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/es43.png" style="zoom:50%;" /></p><h4 id="结果集操作"><a href="#结果集操作" class="headerlink" title="结果集操作"></a>结果集操作</h4><h5 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h5><ul><li><code>range</code> 查询找出那些落在指定区间内的数字或者时间。<code>range</code> 查询允许以下字符</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center"><strong>操作符</strong></th><th style="text-align:center"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:center">gt</td><td style="text-align:center">&gt;</td></tr><tr><td style="text-align:center">gte</td><td style="text-align:center">&gt;=</td></tr><tr><td style="text-align:center">lt</td><td style="text-align:center">&lt;</td></tr><tr><td style="text-align:center">lte</td><td style="text-align:center">&lt;=</td></tr></tbody></table></div><ul><li>请求方式：<code>GET 索引名/_search</code> + 请求体内容</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">30</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">35</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/es44.png" style="zoom:50%;" /></p><h5 id="多IDs查询"><a href="#多IDs查询" class="headerlink" title="多IDs查询"></a>多IDs查询</h5><p>​            指定多个id进行查询</p><ul><li>请求方式：<code>GET 索引名/_search</code> + 请求体</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;ids&quot; : &#123;</span><br><span class="line">            &quot;values&quot; : [&quot;1001&quot;, &quot;1004&quot;, &quot;1006&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/es47.png" style="zoom:50%;" /></p><h5 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h5><ul><li><p>from&amp;size</p></li><li><p><code>from</code>：当前页的起始索引，默认从 0 开始。 <strong>from = (pageNum - 1) * size</strong></p></li><li><code>size</code>：每页显示多少条</li><li>请求方式：<code>GET 索引名/_search</code> + 请求体内容</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/es52.png" style="zoom:50%;" /></p><h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h4><hr><h2 id="ElasticSearch-SQL"><a href="#ElasticSearch-SQL" class="headerlink" title="ElasticSearch SQL"></a>ElasticSearch SQL</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/sql-overview.html#sql-why">官方操作文档 </a></p><p>一般使用 <code>Elasticsearch</code> 的时候，会使用 <code>Query DSL</code> 来查询数据，从 <code>Elasticsearch6.3</code> 版本以后，<code>Elasticsearch</code> 已经支持<code>SQL</code>查询了。</p><p><code>Elasticsearch SQL</code> 是一个 <code>X-Pack</code> 组件，它允许针对 <code>Elasticsearch</code> 实时执行类似<code>SQL</code>的 查询。无论使用<code>REST</code>接口，命令行还是<code>JDBC</code>，任何客户端都可以使用<code>SQL</code>对 <code>Elasticsearch</code>中的数据进行原生搜索和聚合数据。可以将 <code>Elasticsearch SQL</code> 看作是一种翻译器，它可以将 <code>SQL</code>翻译成 <code>Query DSL</code>。</p><h4 id="Elasticsearch-SQL具有如下特性"><a href="#Elasticsearch-SQL具有如下特性" class="headerlink" title="Elasticsearch_SQL具有如下特性"></a>Elasticsearch_SQL具有如下特性</h4><ul><li>原生集成 <code>Elasticsearch SQL</code> 是为 <code>Elasticsearch</code> 从头开始构建的。每个查询都根据底层存储有效地针对相关节点执行。</li><li>没有外部零件 无需额外的硬件、进程、运行时或库来查询 <code>Elasticsearch</code>；<code>Elasticsearch SQL</code> 通过在<code>Elasticsearch</code> 内部运行消除了额外的移动部件。</li><li>轻巧高效 <code>Elasticsearch SQL</code>并未抽象化其搜索功能，相反的它拥抱并接受了<code>SQL</code>来 实现全文搜索，以简洁的方式实时运行全文搜索。</li></ul><h4 id="SQL和Elasticsearch的对应关系"><a href="#SQL和Elasticsearch的对应关系" class="headerlink" title="SQL和Elasticsearch的对应关系"></a>SQL和Elasticsearch的对应关系</h4><div class="table-container"><table><thead><tr><th>SQL</th><th>ES</th><th>说明</th></tr></thead><tbody><tr><td>Column</td><td>field</td><td>对比两个，数据都存储在命名条目中，具有多种数据类型，包含一 个值。        SQL  将此类条目称为列，而 Elasticsearch  称为字段。请注意，在 Elasticsearch  中，一个字段可以包含多个相同类型的值（本质上是一个列表），而在 SQL  中，一个列可以只包含一个所述类型的值。Elasticsearch SQL  将尽最大努力保留    SQL  语义，并根据查询拒 绝那些返回具有多个值的字段的查询</td></tr><tr><td>Row</td><td>document</td><td>Columns  和 fields 本身不存在；它们是 row 或 document 的一部分 。两者的语义略有不同：row 趋于严格（并且有更多的强制执行），而 document 趋于更加灵活或松散（同时仍然具有结构）。</td></tr><tr><td>Table</td><td>Index</td><td>执行查询的目标</td></tr><tr><td>Schema</td><td>Mapping</td><td>在 RDBMS 中，schem 主要是表的命名空间，通常用作安全边界。 Elasticsearch 没有为它提供等效的概念。但是，当启用安全性时， Elasticsearch 会自动应用安全性强制，以便角色只能看到它被允许访 问的数据</td></tr><tr><td>Database</td><td>Cluster 实例</td><td>在 SQL 中，catalog 或者 database 从概念上可以互换使用，表示一组 模式，即多个表。在 Elasticsearch  中，可用的索引集被分组在一个 cluster，语义也有所不同。database 本质上是另一个命名空间（可能对数据的存储方式有一些影响），而 Elasticsearch  cluster 是一个运行时实例，或者更确切地说是一组至少一个 Elasticsearch  实例（通 常是分布式运行）。在实践中，这意味着虽然在 SQL  中，一个实例中可能有多个目录，但在 Elasticsearch  中，一个目录仅限于一个</td></tr></tbody></table></div><h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><ul><li>创建索引并增加数据，等同于创建表和数据</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT my-sql-index/_bulk?refresh </span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;: &quot;JAVA&quot;&#125;&#125; </span><br><span class="line">&#123;&quot;name&quot;:  &quot;JAVA&quot;,  &quot;author&quot;:  &quot;zhangsan&quot;,  &quot;release_date&quot;:  &quot;2022-08-10&quot;,&quot;page_count&quot;: 561&#125; </span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;: &quot;BIGDATA&quot;&#125;&#125; </span><br><span class="line">&#123;&quot;name&quot;: &quot;BIGDATA&quot;, &quot;author&quot;: &quot;lisi&quot;, &quot;release_date&quot;: &quot;2022-08-11&quot;, &quot;page_count&quot;: 482&#125; </span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;: &quot;SCALA&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;: &quot;SCALA&quot;, &quot;author&quot;: &quot;wangwu&quot;, &quot;release_date&quot;: &quot;2022-08-12&quot;, &quot;page_count&quot;: 604&#125;</span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/ESSQL%20%E6%95%B0%E6%8D%AE%E6%8F%92%E5%85%A5.png" style="zoom:50%;" /></p><h4 id="第一个SQL查询"><a href="#第一个SQL查询" class="headerlink" title="第一个SQL查询"></a>第一个SQL查询</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># SQL </span><br><span class="line"># 这里的表就是索引 </span><br><span class="line"># 可以通过 format参数控制返回结果的格式，默认为  json格式 </span><br><span class="line">#       txt:表示文本格式，看起来更直观点. </span><br><span class="line">#       csv:使用逗号隔开的数据 </span><br><span class="line">#       json:JSON格式数据 </span><br><span class="line">#       tsv: 使用  tab键隔开数据 </span><br><span class="line">#       yaml:属性配置格式 </span><br><span class="line">POST _sql?format=txt </span><br><span class="line">&#123; </span><br><span class="line">    &quot;query&quot;: &quot;&quot;&quot; </span><br><span class="line">      SELECT * FROM &quot;my-sql-index&quot; </span><br><span class="line">    &quot;&quot;&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/SQl%E6%9F%A5%E8%AF%A2.png" alt=""></p><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">条件查询</span> </span><br><span class="line">POST _sql?format=txt </span><br><span class="line">&#123; </span><br><span class="line">    &quot;query&quot;: &quot;&quot;&quot; </span><br><span class="line">      SELECT * FROM &quot;my-sql-index&quot; where page_count &gt; 500</span><br><span class="line">    &quot;&quot;&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2.png" style="zoom:50%;" /></p><h3 id="SQL转换为DSL使用"><a href="#SQL转换为DSL使用" class="headerlink" title="SQL转换为DSL使用"></a>SQL转换为DSL使用</h3><p>当我们需要使用<code>Query DSL</code>时，也可以先使用<code>SQL</code>来查询，然后通过<code>Translate API</code>转换即可，查询的结果为<code>DSL</code>方式的结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">转换  SQL为  DSL进行操作</span> </span><br><span class="line">POST _sql/translate </span><br><span class="line">&#123; </span><br><span class="line">    &quot;query&quot;: &quot;&quot;&quot; </span><br><span class="line">      SELECT * FROM &quot;my-sql-index&quot; where page_count &gt; 500 </span><br><span class="line">    &quot;&quot;&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/SQL%E8%BD%ACDSL.png" style="zoom: 33%;" /></p><h3 id="SQL和DSL混合使用"><a href="#SQL和DSL混合使用" class="headerlink" title="SQL和DSL混合使用"></a>SQL和DSL混合使用</h3><p>我们如果在优化<code>SQL</code>语句之后还不满足查询需求，可以拿<code>SQL</code>和 <code>DSL</code> 混用，<code>ES</code>会先根据<code>SQL</code> 进行查询，然后根据<code>DSL</code>语句对<code>SQL</code>的执行结果进行二次查询</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SQL和  DSL混合使用</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">由于索引中含有横线，所以作为表名时需要采用双引号，且外层需要三个引号包含</span> </span><br><span class="line">POST _sql?format=txt </span><br><span class="line">&#123; </span><br><span class="line">    &quot;query&quot;: &quot;&quot;&quot;SELECT * FROM &quot;my-sql-index&quot; &quot;&quot;&quot;, </span><br><span class="line">    &quot;filter&quot; : &#123; </span><br><span class="line">      &quot;range&quot;: &#123; </span><br><span class="line">        &quot;page_count&quot;: &#123; </span><br><span class="line">          &quot;gte&quot;: 400, </span><br><span class="line">          &quot;lte&quot;: 600 </span><br><span class="line">        &#125; </span><br><span class="line">      &#125; </span><br><span class="line">    &#125;, </span><br><span class="line">    &quot;fetch_size&quot;: 2 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/DSL%E4%B8%8ESQL%E6%B7%B7%E7%94%A8.png" alt=""></p><h3 id="常用SQL操作"><a href="#常用SQL操作" class="headerlink" title="常用SQL操作"></a>常用SQL操作</h3><h4 id="查询所有索引"><a href="#查询所有索引" class="headerlink" title="查询所有索引"></a>查询所有索引</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET _sql?format=txt</span><br><span class="line">&#123; </span><br><span class="line">    &quot;query&quot;: &quot;&quot;&quot; </span><br><span class="line">      show tables </span><br><span class="line">    &quot;&quot;&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/Es%20SQl%E6%9F%A5%E8%AF%A2%E7%B4%A2%E5%BC%95.png" alt=""></p><h4 id="查询指定索引"><a href="#查询指定索引" class="headerlink" title="查询指定索引"></a>查询指定索引</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET _sql?format=txt</span><br><span class="line">&#123; </span><br><span class="line">    &quot;query&quot;: &quot;&quot;&quot; </span><br><span class="line">      show tables like &#x27;my-sql-index&#x27;</span><br><span class="line">    &quot;&quot;&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E6%9F%A5%E8%AF%A2%E6%8C%87%E5%AE%9A%E7%B4%A2%E5%BC%95SQL.png" alt=""></p><h4 id="模糊查询索引"><a href="#模糊查询索引" class="headerlink" title="模糊查询索引"></a>模糊查询索引</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET _sql?format=txt</span><br><span class="line">&#123; </span><br><span class="line">    &quot;query&quot;: &quot;&quot;&quot; </span><br><span class="line">      show tables like &#x27;my-%&#x27;</span><br><span class="line">    &quot;&quot;&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2%E7%B4%A2%E5%BC%95.png" alt=""></p><h4 id="查看索引结构"><a href="#查看索引结构" class="headerlink" title="查看索引结构"></a>查看索引结构</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 先创建一个索引</span><br><span class="line">put myindex</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;sku_id&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;long&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sku_name&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;text&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sku_url&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET _sql?format=txt</span><br><span class="line">&#123; </span><br><span class="line">    &quot;query&quot;: &quot;&quot;&quot; </span><br><span class="line">      describe myindex</span><br><span class="line">    &quot;&quot;&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E6%9F%A5%E7%9C%8B%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84.png" alt=""></p><h3 id="基本查询操作"><a href="#基本查询操作" class="headerlink" title="基本查询操作"></a>基本查询操作</h3><ul><li>在<code>ES</code>中使用<code>SQL</code>查询的语法与在数据库中使用基本一致</li></ul><h4 id="where"><a href="#where" class="headerlink" title="where"></a>where</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 条件过滤 </span><br><span class="line">POST _sql?format=txt </span><br><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="string">&quot; SELECT * FROM &quot;</span>my-sql-index<span class="string">&quot; where name = &#x27;JAVA&#x27; &quot;</span><span class="string">&quot;&quot;</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2.png" alt=""></p><h4 id="group-by"><a href="#group-by" class="headerlink" title="group-by"></a>group-by</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 按照日期进行分组 </span><br><span class="line">GET _sql?format=txt </span><br><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="string">&quot; </span></span><br><span class="line"><span class="string">      SELECT release_date FROM &quot;</span>my-sql-index<span class="string">&quot; group by release_date </span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/GroupBy.png" alt=""></p><h4 id="Having"><a href="#Having" class="headerlink" title="Having"></a>Having</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 对分组后的数据进行过滤 </span><br><span class="line">GET _sql?format=txt </span><br><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="string">&quot; </span></span><br><span class="line"><span class="string">    SELECT sum(page_count), release_date as datacnt FROM &quot;</span>my-sql-index<span class="string">&quot; group by release_date having sum(page_count) &gt; 1000 </span></span><br><span class="line"><span class="string">  &quot;</span><span class="string">&quot;&quot;</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/having.png" alt=""></p><h4 id="order-by"><a href="#order-by" class="headerlink" title="order-by"></a>order-by</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 对分组后的数据进行过滤 </span><br><span class="line">GET _sql?format=txt </span><br><span class="line">&#123; </span><br><span class="line">  &quot;query&quot;: &quot;&quot;&quot; </span><br><span class="line">    SELECT sum(page_count), release_date as datacnt FROM &quot;my-sql-index&quot; group by release_date having sum(page_count) &gt; 1000 </span><br><span class="line">  &quot;&quot;&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/order-by.png" alt=""></p><h4 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 限定查询数量 </span><br><span class="line">GET _sql?format=txt </span><br><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="string">&quot; </span></span><br><span class="line"><span class="string">      select * from &quot;</span>my-sql-index<span class="string">&quot; limit 3</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/limit.png" alt=""></p><h4 id="cursor"><a href="#cursor" class="headerlink" title="cursor"></a>cursor</h4><p>游标（cursor）是系统为用户开设的一个数据缓冲区，存储sql语句的执行结果，每个游标区都有一个名字，用户可以用 sql 语句逐一从游标中获取记录，并赋给主变量，交由主语言进一步处理。就本质而言，游标实际上是一种能从包括多条数据记录的结果集中每次提取一条或多条记录的机制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查询数据 </span><br><span class="line"># 因为查询结果较多，但是获取的数据较少，所以为了提高效果，会将数据存储到临时缓冲区中 </span><br><span class="line"># 此处数据展示格式为   json </span><br><span class="line">POST _sql?format=json </span><br><span class="line">&#123; </span><br><span class="line">    &quot;query&quot;: &quot;&quot;&quot; SELECT * FROM &quot;my-sql-index&quot; order by page_count desc &quot;&quot;&quot;, </span><br><span class="line">    &quot;fetch_size&quot;: 2 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回结果中的<code>cursor</code>就是缓冲区的标识，这就意味着可以从缓冲区中直接获取后续数据，操作上有点类似于java迭代器，可多次执行。类比于 迭代器的next</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/esql17.png" alt=""></p><p>如果执行后，无任何结果返回，说明数据已经读取完毕</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/esql18.png" alt=""></p><p>如果拿这个游标继续执行，就会返回错误信息</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/esql19.png" alt=""></p><p>如果需要关闭缓冲区，执行以下命令即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST _sql/close</span><br><span class="line">&#123; </span><br><span class="line">  &quot;cursor&quot;: &quot;xxxxxxxxxxxx&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解实现接口幂等性(Easy版)</title>
      <link href="/posts/8b17ba2.html"/>
      <url>/posts/8b17ba2.html</url>
      
        <content type="html"><![CDATA[<h6 id="定义注解-Idempotent"><a href="#定义注解-Idempotent" class="headerlink" title="定义注解 |  Idempotent"></a>定义注解 |  Idempotent</h6><ul><li><p>需要支持映射字段</p></li><li><p>需要支持自定义时间</p></li><li><p>需要支持自定义时间单位</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Idempotent &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 别名 mappingParameter</span></span><br><span class="line"><span class="comment">     * 幂等性标识符 devId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AliasFor(&quot;mappingParameter&quot;)</span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 映射参数列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] mappingParameter() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">long</span> <span class="title function_">expireTime</span><span class="params">()</span> <span class="keyword">default</span>  <span class="number">3L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间单位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TimeUnit <span class="title function_">timeUnit</span><span class="params">()</span> <span class="keyword">default</span> TimeUnit.SECONDS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="切面类实现-IdempotentAspect"><a href="#切面类实现-IdempotentAspect" class="headerlink" title="切面类实现 | IdempotentAspect"></a>切面类实现 | IdempotentAspect</h6><p><code>根据传入的映射字段去查询方法参数中对应的字段值连接起来作为key，如果没有指定指定key的话，给个雪花Id过去（此时就感觉没必要了，每次进来都是新的，起不了保护作用，后续可以优化为，没有指定参数，就去拿请求头中的header的token）</code></p><p>通过反射获取到涵盖该注解的方法参数，指定映射参数为唯一Id来实现幂等性，如果没有指定但涵盖这个参数，则设置这个方法中所有类型为String的参数值组合为Key</p><p>如果方法返回了异常或正常返回则需要把这个key 删除掉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IdempotentAspect</span>  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.liu.aphrodite.handler.flowControl.annotations.Idempotent)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">validation</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;validation()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">idempotentCheck</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span>&#123;</span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) proceedingJoinPoint.getSignature();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> signature.getMethod();</span><br><span class="line">        <span class="type">Idempotent</span> <span class="variable">annotation</span> <span class="operator">=</span> method.getAnnotation(Idempotent.class);</span><br><span class="line">        <span class="comment">//step1: 判断是否有映射参数</span></span><br><span class="line">        <span class="comment">//step2: 没有映射参数则判断是否具有key</span></span><br><span class="line">        <span class="comment">//step3: 都没有,则以全部参数为key</span></span><br><span class="line">        <span class="comment">//step4: 啥都没有,拿头做幂等啊.(token)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">idempotentKey</span> <span class="operator">=</span> mapParameterAssemblyKey(annotation.mappingParameter(), method, proceedingJoinPoint.getArgs());</span><br><span class="line">        RedisUtil.setKeyExpire(idempotentKey,Boolean.TRUE.toString(), annotation.expireTime(), annotation.timeUnit());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;validation()&quot;,throwing = &quot;exception&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findException</span><span class="params">(JoinPoint joinPoint, Exception exception)</span>&#123;</span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> signature.getMethod();</span><br><span class="line">        <span class="type">Idempotent</span> <span class="variable">annotation</span> <span class="operator">=</span> method.getAnnotation(Idempotent.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">assemblyKey</span> <span class="operator">=</span> mapParameterAssemblyKey(annotation.mappingParameter(), method, joinPoint.getArgs());</span><br><span class="line">        RedisUtil.delete(assemblyKey);</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;#&#123;&#125; throw exception:&#123;&#125;&quot;</span>,joinPoint.getSignature().getDeclaringTypeName(),joinPoint.getSignature().getName(), exception);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@After(value = &quot;validation()&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAssemblyKey</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class="line">    <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> signature.getMethod();</span><br><span class="line">    <span class="type">Idempotent</span> <span class="variable">annotation</span> <span class="operator">=</span> method.getAnnotation(Idempotent.class);</span><br><span class="line">    <span class="type">String</span> <span class="variable">assemblyKey</span> <span class="operator">=</span> mapParameterAssemblyKey(annotation.mappingParameter(), method, joinPoint.getArgs());</span><br><span class="line">    RedisUtil.delete(assemblyKey);</span><br><span class="line">    log.info(<span class="string">&quot;&#123;&#125;#&#123;&#125; delete AssemblyKey&quot;</span>, joinPoint.getSignature().getDeclaringTypeName(),joinPoint.getSignature().getName());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Tips 1.暂且只能指定String类型变量 2.接口必须存在参数 3.</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">mapParameterAssemblyKey</span><span class="params">(String[] parameterNameList, Method method, Object[] args)</span> &#123;</span><br><span class="line">        <span class="type">DefaultParameterNameDiscoverer</span> <span class="variable">parameterNameDiscoverer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultParameterNameDiscoverer</span>();</span><br><span class="line">        String[] parameterNames = parameterNameDiscoverer.getParameterNames(method);</span><br><span class="line">        HashMap&lt;String, Object&gt; nameMappingArgs = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; Objects.requireNonNull(parameterNames).length; index++) &#123;</span><br><span class="line">            nameMappingArgs.put(parameterNames[index], args[index]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(parameterNameList))&#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.stream(parameterNameList).map(item -&gt; (String) nameMappingArgs.get(item)).collect(Collectors.joining(<span class="string">&quot;_&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> SnowflakeUtil.getAsString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义线程池精彩的使用方式</title>
      <link href="/posts/ea641220.html"/>
      <url>/posts/ea641220.html</url>
      
        <content type="html"><![CDATA[<h4 id="业务方法实现Callable接口"><a href="#业务方法实现Callable接口" class="headerlink" title="业务方法实现Callable接口"></a>业务方法实现Callable接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Callable&lt;String&gt; <span class="title function_">call</span><span class="params">(<span class="type">int</span> taskNum)</span> &#123;</span><br><span class="line">        Callable&lt;String&gt; task = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;&gt;&gt;&gt;&quot;</span> + taskNum + <span class="string">&quot;任务启动&quot;</span>);</span><br><span class="line">                <span class="type">Date</span> <span class="variable">dateTmp1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                <span class="type">Date</span> <span class="variable">dateTmp2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">                <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> dateTmp2.getTime() - dateTmp1.getTime();</span><br><span class="line">                System.out.println(<span class="string">&quot;&gt;&gt;&gt;&quot;</span> + taskNum + <span class="string">&quot;任务终止&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> taskNum + <span class="string">&quot;任务返回运行结果,当前任务时间【&quot;</span> + time + <span class="string">&quot;毫秒】\n&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> task;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建自定义线程池"><a href="#创建自定义线程池" class="headerlink" title="创建自定义线程池"></a>创建自定义线程池</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> : 2092669791@qq.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2022/12/18 15:02</span></span><br><span class="line"><span class="comment"> * description: 批量任务执行线程池</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BatchTaskThreadPool</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 核心线程数 = 计算机核心书 * 2 + 2</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">batchProcessTaskCorePoolSize</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors() * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 最大线程数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">batchProcessTaskMaxinumPoolSize</span> <span class="operator">=</span> batchProcessTaskCorePoolSize;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 保持活跃时间</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">keepActiveTime</span> <span class="operator">=</span> <span class="number">60L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 阻塞队列大小</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">blockingQuerySize</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 线程工厂</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ThreadFactory</span> <span class="variable">threadFactory</span> <span class="operator">=</span> Executors.defaultThreadFactory();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 日志线程池</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> ThreadPoolExecutor opLogThreadPool;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ThreadPoolExecutor <span class="title function_">batchTaskThreadPoolExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(batchProcessTaskCorePoolSize, batchProcessTaskMaxinumPoolSize, keepActiveTime, TimeUnit.SECONDS</span><br><span class="line">            , <span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;(blockingQuerySize), threadFactory);</span><br><span class="line">    threadPoolExecutor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">    opLogThreadPool = threadPoolExecutor;</span><br><span class="line">    <span class="keyword">return</span> threadPoolExecutor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> ThreadPoolExecutor <span class="title function_">getBatchTaskThreadPoolExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> batchTaskThreadPoolExecutor();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义线程任务操作"><a href="#自定义线程任务操作" class="headerlink" title="自定义线程任务操作"></a>自定义线程任务操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoAsynChron</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ListenableFuture&lt;T&gt; <span class="title function_">submit</span><span class="params">(Callable&lt;T&gt; task, Consumer&lt;T&gt; onSuccess, Consumer&lt;Throwable&gt; onFailure, Executor executor)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> submit(task, onSuccess, onFailure, executor, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ListenableFuture&lt;T&gt; <span class="title function_">submit</span><span class="params">(Callable&lt;T&gt; task, Consumer&lt;T&gt; onSuccess, Consumer&lt;Throwable&gt; onFailure, Executor executor, Executor callbackExecutor)</span> &#123;</span><br><span class="line">        ListenableFuture&lt;T&gt; future = Futures.submit(task, executor);</span><br><span class="line">        withCallBack(future, onSuccess, onFailure, callbackExecutor);</span><br><span class="line">        <span class="keyword">return</span> future;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">withCallBack</span><span class="params">(ListenableFuture&lt;T&gt; future, Consumer&lt;T&gt; onSuccess, Consumer&lt;Throwable&gt; onFailure, Executor callbackExecutor)</span> &#123;</span><br><span class="line">        FutureCallback&lt;T&gt; callback = <span class="keyword">new</span> <span class="title class_">FutureCallback</span>&lt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(T t)</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    onSuccess.accept(t);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    onFailure(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">                onFailure.accept(throwable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (callbackExecutor != <span class="literal">null</span>) &#123;</span><br><span class="line">            Futures.addCallback(future, callback, callbackExecutor);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Futures.addCallback(future, callback, MoreExecutors.directExecutor());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模拟多线程提交任务"><a href="#模拟多线程提交任务" class="headerlink" title="模拟多线程提交任务"></a>模拟多线程提交任务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">     List&lt; String&gt; resultArrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">     <span class="comment">//线程池</span></span><br><span class="line">     <span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BatchTaskThreadPool</span>().getBatchTaskThreadPoolExecutor();</span><br><span class="line">     <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">     <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(size);</span><br><span class="line">     <span class="type">MyService</span> <span class="variable">myService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyService</span>();</span><br><span class="line">     <span class="comment">// 创建多个有返回值的任务</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">         <span class="keyword">final</span> Callable&lt;String&gt; task = myService.call(i);</span><br><span class="line">         DoAsynChron.submit(task,</span><br><span class="line">                 successMsg -&gt;&#123;</span><br><span class="line">                     resultArrayList.add(successMsg);</span><br><span class="line">                     countDownLatch.countDown();</span><br><span class="line">                 &#125;,</span><br><span class="line">                 ex-&gt;&#123;</span><br><span class="line">                     countDownLatch.countDown();</span><br><span class="line">                 &#125;,</span><br><span class="line">                 executor</span><br><span class="line">         );&#125;</span><br><span class="line">     <span class="comment">// 关闭线程池</span></span><br><span class="line">     countDownLatch.await();</span><br><span class="line">     System.err.println(resultArrayList);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="模拟任务结果"><a href="#模拟任务结果" class="headerlink" title="模拟任务结果"></a>模拟任务结果</h4><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%8F%90%E4%BA%A4%E7%BB%93%E6%9E%9C.png" alt="多线程提交结果" style="zoom: 67%;" /></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> 线程池 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>责任链模式的应用示例</title>
      <link href="/posts/b6c1490f.html"/>
      <url>/posts/b6c1490f.html</url>
      
        <content type="html"><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>责任链模式的应用场景，在实际工作中，通常有如下两种应用场景。</p><ul><li>操作需要经过一系列的校验，通过校验后才执行某些操作。</li><li>工作流。企业中通常会制定很多工作流程，一级一级的去处理任务。</li></ul><h2 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h2><p>以创建商品为例，假设商品创建逻辑分为以下三步完成：</p><ol><li>创建商品</li><li>校验商品参数、</li><li>保存商品。</li></ol><p>第2步校验商品又分为多种情况的校验，必填字段校验、规格校验、价格校验、库存校验等等。这些检验逻辑像一个流水线，要想创建出一个商品，必须通过这些校验。如下流程图所示</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F%E5%9B%BE%E8%A7%A3.png" alt="策略模式图解" style="zoom: 50%;" /></p><p>创建商品步骤，需要经过一系列的参数校验，如果参数校验失败，直接返回失败的结果；通过所有的参数校验后，最终保存商品信息。</p><p>但是随着业务需求不断地叠加，相关的校验逻辑也越来越多，新的功能使代码越来越臃肿，可维护性较差。更糟糕的是，这些校验组件不可复用，当你有其他需求也需要用到一些校验时，你又变成了Ctrl＋C , Ctrl＋V程序员，系统的维护成本也越来越高。如下图所示：</p><blockquote><p>———-&gt;创建商品</p><p>————&gt;校验参数是否为空</p><p>​            校验是否存在库存         ——-&gt;失败退出</p><p>​            校验规格是否合法</p><p>​            校验是否图片是否相同</p><p>————&gt;保存商品</p></blockquote><p>在这种情况下，改动的主要是真正业务之前的校验函数，在设计模式中存在一种思想就符合上述场景</p><p><strong>使用责任链模式优化</strong>：创建商品的每个校验步骤都可以作为一个单独的处理器，抽离为一个单独的类，便于复用。这些处理器形成一条链式调用，请求在处理器链上传递，如果校验条件不通过，则处理器不再向下传递请求，直接返回错误信息；若所有的处理器都通过检验，则执行保存商品步骤。</p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/20230214214050.png" style="zoom: 33%;" /></p><p><strong>UML图：</strong></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E8%B4%A3%E4%BB%BB%E9%93%BEUML%E5%9B%BE.png" alt=""></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E5%9B%BE.png" style="zoom: 50%;" /></p><h3 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h3><h4 id="I-流程控制器"><a href="#I-流程控制器" class="headerlink" title="I.流程控制器"></a>I.流程控制器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2023/2/13 0:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 流程控制器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessController</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 模板映射</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, ProcessTemplate&gt; templateConfig = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 执行责任链</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 返回上下文内容</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> ProcessContext <span class="title function_">execute</span><span class="params">(ProcessContext context)</span> &#123;</span><br><span class="line">    <span class="comment">// 前置检查</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.preCheck(context);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ProcessException e) &#123;</span><br><span class="line">      <span class="keyword">return</span> e.getProcessContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历校验节点</span></span><br><span class="line">    List&lt;BusinessProcess&gt; processList = templateConfig.get(context.getCode()).getProcessList();</span><br><span class="line">    <span class="keyword">for</span> (BusinessProcess businessProcess : processList) &#123;</span><br><span class="line">      businessProcess.verify(context);</span><br><span class="line">      <span class="keyword">if</span> (context.getNeedBreak()) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> context;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">preCheck</span><span class="params">(ProcessContext context)</span> <span class="keyword">throws</span> ProcessException &#123;</span><br><span class="line">    <span class="comment">// 校验上下文</span></span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(context)) &#123;</span><br><span class="line">      context = <span class="keyword">new</span> <span class="title class_">ProcessContext</span>();</span><br><span class="line">      context.setResponse(BasicResultVO.fail(RespStatusEnum.CONTEXT_IS_NULL));</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ProcessException</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 业务代码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">businessCode</span> <span class="operator">=</span> context.getCode();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(businessCode)) &#123;</span><br><span class="line">      context.setResponse(BasicResultVO.fail(RespStatusEnum.BUSINESS_CODE_IS_NULL));</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ProcessException</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行模板</span></span><br><span class="line">    <span class="type">ProcessTemplate</span> <span class="variable">processTemplate</span> <span class="operator">=</span> templateConfig.get(businessCode);</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(processTemplate)) &#123;</span><br><span class="line">      context.setResponse(BasicResultVO.fail(RespStatusEnum.PROCESS_TEMPLATE_IS_NULL));</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ProcessException</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行模板列表</span></span><br><span class="line">    List&lt;BusinessProcess&gt; processList = processTemplate.getProcessList();</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(processList)) &#123;</span><br><span class="line">      context.setResponse(BasicResultVO.fail(RespStatusEnum.PROCESS_LIST_IS_NULL));</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ProcessException</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="II-业务执行模板"><a href="#II-业务执行模板" class="headerlink" title="II.业务执行模板"></a>II.业务执行模板</h4><p>通过执行模板获取到所有校验节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2023/2/12 23:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 业务执行模板（把责任链的逻辑串起来）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessTemplate</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 责任链节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;BusinessProcess&gt; processList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="III-责任链上下文"><a href="#III-责任链上下文" class="headerlink" title="III.责任链上下文"></a>III.责任链上下文</h4><p>流程控制器的入参，把请求参数构造成为上下文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2023/2/12 23:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 责任链上下文</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessContext</span>&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标识责任链的code</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储责任链上下文数据的模型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T processModel;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 责任链中断的标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Boolean needBreak;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 流程处理的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BasicResultVO&lt;T&gt; response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="IV-业务执行器"><a href="#IV-业务执行器" class="headerlink" title="IV.业务执行器"></a>IV.业务执行器</h4><p>业务执行模板中的校验节点，每一个节点都是一个环节的校验流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2023/2/12 23:45</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 业务执行器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BusinessProcess</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务校验逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 责任链上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">verify</span><span class="params">(ProcessContext&lt;T&gt; context)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模拟示例"><a href="#模拟示例" class="headerlink" title="模拟示例"></a>模拟示例</h3><p>通过容器中的ProcessController可以获取到项目中的所有执行模板，通过context上下文中的code,获取相应的校验链，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2023/2/14 23:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: XXXX</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SendService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProcessController processController;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SendResponse <span class="title function_">send</span><span class="params">(SendRequest sendRequest)</span> &#123;</span><br><span class="line">        <span class="type">SendTaskModel</span> <span class="variable">sendTaskModel</span> <span class="operator">=</span> SendTaskModel.builder()</span><br><span class="line">                .messageTemplateId(sendRequest.getMessageTemplateId())</span><br><span class="line">                .messageParamList(Collections.singletonList(sendRequest.getMessageParam()))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="type">ProcessContext</span> <span class="variable">context</span> <span class="operator">=</span> ProcessContext.builder()</span><br><span class="line">                .code(sendRequest.getCode())</span><br><span class="line">                .processModel(sendTaskModel)</span><br><span class="line">                .needBreak(<span class="literal">false</span>)</span><br><span class="line">                .response(BasicResultVO.success()).build();</span><br><span class="line"></span><br><span class="line">        <span class="type">ProcessContext</span> <span class="variable">process</span> <span class="operator">=</span> processController.execute(context);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SendResponse</span>(process.getResponse().getStatus(), process.getResponse().getMsg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SendResponse <span class="title function_">batchSend</span><span class="params">(BatchSendRequest batchSendRequest)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="校验函数"><a href="#校验函数" class="headerlink" title="校验函数"></a>校验函数</h4><h5 id="Step1-前置参数校验"><a href="#Step1-前置参数校验" class="headerlink" title="Step1:前置参数校验"></a>Step1:前置参数校验</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2023/2/14 22:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:  Step1:前置参数校验</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PreParamCheckAction</span> <span class="keyword">implements</span> <span class="title class_">BusinessProcess</span>&lt;SendTaskModel&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">verify</span><span class="params">(ProcessContext&lt;SendTaskModel&gt; context)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Step1:前置参数校验&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Step2-拼装参数"><a href="#Step2-拼装参数" class="headerlink" title="Step2: 拼装参数"></a>Step2: 拼装参数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2023/2/14 22:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Step2: 拼装参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AssembleAction</span> <span class="keyword">implements</span> <span class="title class_">BusinessProcess</span>&lt;SendTaskModel&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">verify</span><span class="params">(ProcessContext&lt;SendTaskModel&gt; context)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Step2: 拼装参数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Step3-后置参数校验"><a href="#Step3-后置参数校验" class="headerlink" title="Step3:后置参数校验"></a>Step3:后置参数校验</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2023/2/14 22:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Step3:后置参数校验</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AfterParamCheckAction</span> <span class="keyword">implements</span> <span class="title class_">BusinessProcess</span>&lt;SendTaskModel&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">verify</span><span class="params">(ProcessContext&lt;SendTaskModel&gt; context)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Step3:后置参数校验&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Step4-MQ消息发送"><a href="#Step4-MQ消息发送" class="headerlink" title="Step4: MQ消息发送"></a>Step4: MQ消息发送</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : LIUDENGLIN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> : 2023/2/14 22:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Step4: MQ消息发送   削峰,降流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMqAction</span> <span class="keyword">implements</span> <span class="title class_">BusinessProcess</span>&lt;SendTaskModel&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">verify</span><span class="params">(ProcessContext&lt;SendTaskModel&gt; context)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Step4: MQ消息发送&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 责任链模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL安装与配置</title>
      <link href="/posts/8ae56098.html"/>
      <url>/posts/8ae56098.html</url>
      
        <content type="html"><![CDATA[<h2 id="下载MySQL压缩包"><a href="#下载MySQL压缩包" class="headerlink" title="下载MySQL压缩包"></a>下载MySQL压缩包</h2><p><a href="https://dev.mysql.com/downloads/mysql/" title="MySQL8.0下载">MySQL8.0下载</a><br><a href="https://downloads.mysql.com/archives/community/" title="MySQL5.7下载">MySQL5.7下载</a></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>新建data目录和my.ini文件<br><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/20220630134746.png" alt=""><br>修改my.ini文件用记事本打开my.ini 放入如下代码（basedir 和 datadir 的路径根据自己设置）。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[mysql]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置mysql客户端默认字符集</span></span><br><span class="line">default-character-set=utf8 </span><br><span class="line">[mysqld]</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置3306端口</span></span><br><span class="line">port = 3306 </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置mysql的安装目录</span></span><br><span class="line">basedir=D:\CODE-IDE\MySQL\mysql-5.7.32-winx64</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置mysql数据库的数据的存放目录</span></span><br><span class="line">datadir=D:\CODE-IDE\MySQL\mysql-5.7.32-winx64\data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">允许最大连接数</span></span><br><span class="line">max_connections=200</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务端使用的字符集默认为8比特编码的latin1字符集</span></span><br><span class="line">character-set-server=utf8</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建新表时将使用的默认存储引擎</span></span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure></p><h2 id="修改环境变量"><a href="#修改环境变量" class="headerlink" title="修改环境变量"></a>修改环境变量</h2><p>==在环境变量加入mysql的bin路径==<br><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/20220630135457.png" alt=""></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/20220630135550.png" alt=""></p><p>初始化mysql<br>切换到mysql的bin目录<br><code>mysqld --initialize</code><br><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/20220630135805.png" alt=""><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">如果此处报错 Can&#x27;t create/write to file 。。</span><br><span class="line">将my.ini文件如二 中的 basedir 和 datadir 路径见引号和双斜杠&amp;emsp;</span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir=&quot;D:\\tool\\Mysql\\mysql-5.7.26-winx64&quot;</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir=&quot;D:\\tool\\Mysql\\mysql-5.7.26-winx64\\data&quot;</span><br></pre></td></tr></table></figure></p><p><code>输入 mysqld --install</code></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/20220630140124.png" alt=""><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入 net start mysql         启动服务</span><br><span class="line">输入mysql -u root -p  回车  不用输入密码   继续回车进入数据库</span><br><span class="line">输入 use mysql</span><br><span class="line">输入  update mysql.user set authentication_string=password(&#x27;123456&#x27;) where user=&#x27;root&#x27;;    </span><br><span class="line">将修改 mysql中的 my.ini文件  删掉最后一行的代码（跳过表验证）skip-grant-tables</span><br><span class="line">重启服务（要切换到mysql的bin目录！！！！！！！！）   </span><br><span class="line">net stop mysql</span><br><span class="line">net start mysql</span><br></pre></td></tr></table></figure></p><p><img src="https://landeng-image.oss-cn-hangzhou.aliyuncs.com/img/20220630140251.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅的写Controller层</title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><p>本篇主要要介绍的就是 controller 层的处理，一个完整的后端请求由 4 部分组成：</p><ul><li>接口地址（也就是 URL 地址）</li><li>请求方式（一般就是 get、set，当然还有 put、delete）</li><li>请求数据（request，有 head 跟 body）</li><li>响应数据（response）</li></ul><p>本篇将解决以下 3 个问题：</p><ul><li>当接收到请求时，如何优雅的校验参数</li><li>返回响应数据该如何统一的进行处理</li><li>接收到请求，处理业务逻辑时抛出了异常又该如何处理</li></ul><p><strong>Controller 层参数接收（太基础了，可以跳过）</strong></p><p>常见的请求就分为 get 跟 post 两种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/product/product-info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductInfoController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ProductInfoService productInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findById&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ProductInfoQueryVo <span class="title function_">findById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> IPage <span class="title function_">findPage</span><span class="params">(Page page, ProductInfoQueryVo vo)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>RestController：</strong> 之前解释过，@RestController=@Controller+ResponseBody。</p><p>加上这个注解，springboot 就会吧这个类当成 controller 进行处理，然后把所有返回的参数放到 ResponseBody 中。</p><p><strong>@RequestMapping：</strong> 请求的前缀，也就是所有该 Controller 下的请求都需要加上 /product/product-info 的前缀。</p><p><strong>@GetMapping(“/findById”)：</strong> 标志这是一个 get 请求，并且需要通过 /findById 地址才可以访问到。</p><p><strong>@PostMapping(“/page”)：</strong> 同理，表示是个 post 请求。<br>参数：至于参数部分，只需要写上 ProductInfoQueryVo，前端过来的 json 请求便会通过映射赋值到对应的对象中，例如请求这么写，productId 就会自动被映射到 vo 对应的属性当中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">size : <span class="number">1</span></span><br><span class="line">current : <span class="number">1</span></span><br><span class="line"></span><br><span class="line">productId : <span class="number">1</span></span><br><span class="line">productName : 泡脚</span><br></pre></td></tr></table></figure><h4 id="返回格式"><a href="#返回格式" class="headerlink" title="| 返回格式"></a><strong>| 返回格式</strong></h4><p>为了跟前端妹妹打好关系，我们通常需要对后端返回的数据进行包装一下，增加一下状态码，状态信息，这样前端妹妹接收到数据就可以根据不同的状态码，判断响应数据状态，是否成功是否异常进行不同的显示。</p><p>当然这让你拥有了更多跟前端妹妹的交流机会，假设我们约定了 1000 就是成功的意思。</p><p>如果你不封装，那么返回的数据是这样子的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;productId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&quot;productName&quot;</span>: <span class="string">&quot;泡脚&quot;</span>,</span><br><span class="line">  <span class="string">&quot;productPrice&quot;</span>: <span class="number">100.00</span>,</span><br><span class="line">  <span class="string">&quot;productDescription&quot;</span>: <span class="string">&quot;中药泡脚加按摩&quot;</span>,</span><br><span class="line">  <span class="string">&quot;productStatus&quot;</span>: <span class="number">0</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过封装以后时这样子的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;code&quot;</span>: <span class="number">1000</span>,</span><br><span class="line">  <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;请求成功&quot;</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;productId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;productName&quot;</span>: <span class="string">&quot;泡脚&quot;</span>,</span><br><span class="line">    <span class="string">&quot;productPrice&quot;</span>: <span class="number">100.00</span>,</span><br><span class="line">    <span class="string">&quot;productDescription&quot;</span>: <span class="string">&quot;中药泡脚加按摩&quot;</span>,</span><br><span class="line">    <span class="string">&quot;productStatus&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="封装-ResultVo"><a href="#封装-ResultVo" class="headerlink" title="| 封装 ResultVo"></a><strong>| 封装 ResultVo</strong></h4><p>这些状态码肯定都是要预先编好的，怎么编呢？写个常量 1000？还是直接写死 1000？</p><p>要这么写就真的书白读的了，写状态码当然是用枚举拉：</p><p><strong>①</strong>首先先定义一个状态码的接口，所有状态码都需要实现它，有了标准才好做事：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StatusCode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>②</strong>然后去找前端妹妹，跟他约定好状态码（这可能是你们唯一的约定了）枚举类嘛，当然不能有 setter 方法了，因此我们不能在用 @Data 注解了，我们要用 @Getter。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ResultCode</span> <span class="keyword">implements</span> <span class="title class_">StatusCode</span>&#123;</span><br><span class="line">    SUCCESS(<span class="number">1000</span>, <span class="string">&quot;请求成功&quot;</span>),</span><br><span class="line">    FAILED(<span class="number">1001</span>, <span class="string">&quot;请求失败&quot;</span>),</span><br><span class="line">    VALIDATE_ERROR(<span class="number">1002</span>, <span class="string">&quot;参数校验失败&quot;</span>),</span><br><span class="line">    RESPONSE_PACK_ERROR(<span class="number">1003</span>, <span class="string">&quot;response返回包装失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    ResultCode(<span class="type">int</span> code, String msg) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>③</strong>写好枚举类，就开始写 ResultVo 包装类了，我们预设了几种默认的方法，比如成功的话就默认传入 object 就可以了，我们自动包装成 success。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultVo</span> &#123;</span><br><span class="line">    <span class="comment">// 状态码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 状态信息</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回对象</span></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 手动设置返回vo</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResultVo</span><span class="params">(<span class="type">int</span> code, String msg, Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认返回成功状态码，数据对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResultVo</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = ResultCode.SUCCESS.getCode();</span><br><span class="line">        <span class="built_in">this</span>.msg = ResultCode.SUCCESS.getMsg();</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回指定状态码，数据对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResultVo</span><span class="params">(StatusCode statusCode, Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = statusCode.getCode();</span><br><span class="line">        <span class="built_in">this</span>.msg = statusCode.getMsg();</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只返回状态码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResultVo</span><span class="params">(StatusCode statusCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = statusCode.getCode();</span><br><span class="line">        <span class="built_in">this</span>.msg = statusCode.getMsg();</span><br><span class="line">        <span class="built_in">this</span>.data = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用，现在的返回肯定就不是 return data；这么简单了，而是需要 new ResultVo(data)；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/findByVo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResultVo <span class="title function_">findByVo</span><span class="params">(<span class="meta">@Validated</span> ProductInfoVo vo)</span> &#123;</span><br><span class="line">    <span class="type">ProductInfo</span> <span class="variable">productInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProductInfo</span>();</span><br><span class="line">    BeanUtils.copyProperties(vo, productInfo);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultVo</span>(productInfoService.getOne(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>(productInfo)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后返回就会是上面带了状态码的数据了。</p><p><strong>统一校验</strong></p><h4 id="原始做法"><a href="#原始做法" class="headerlink" title="| 原始做法"></a><strong>| 原始做法</strong></h4><p>假设有一个添加 ProductInfo 的接口，在没有统一校验时，我们需要这么做。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductInfoVo</span> &#123;</span><br><span class="line">    <span class="comment">// 商品名称</span></span><br><span class="line">    <span class="keyword">private</span> String productName;</span><br><span class="line">    <span class="comment">// 商品价格</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal productPrice;</span><br><span class="line">    <span class="comment">// 上架状态</span></span><br><span class="line">    <span class="keyword">private</span> Integer productStatus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/findByVo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ProductInfo <span class="title function_">findByVo</span><span class="params">(ProductInfoVo vo)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotBlank(vo.getProductName())) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">APIException</span>(<span class="string">&quot;商品名称不能为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != vo.getProductPrice() &amp;&amp; vo.getProductPrice().compareTo(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">0</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">APIException</span>(<span class="string">&quot;商品价格不能为负数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="type">ProductInfo</span> <span class="variable">productInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProductInfo</span>();</span><br><span class="line">    BeanUtils.copyProperties(vo, productInfo);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultVo</span>(productInfoService.getOne(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>(productInfo)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这 if 写的人都傻了，能忍吗？肯定不能忍啊。</p><h4 id="Validated-参数校验"><a href="#Validated-参数校验" class="headerlink" title="| @Validated 参数校验"></a><strong>| @Validated 参数校验</strong></h4><p>好在有 @Validated，又是一个校验参数必备良药了。有了 @Validated 我们只需要再 vo 上面加一点小小的注解，便可以完成校验功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductInfoVo</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull(message = &quot;商品名称不允许为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String productName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min(value = 0, message = &quot;商品价格不允许为负数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal productPrice;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer productStatus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/findByVo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ProductInfo <span class="title function_">findByVo</span><span class="params">(<span class="meta">@Validated</span> ProductInfoVo vo)</span> &#123;</span><br><span class="line">    <span class="type">ProductInfo</span> <span class="variable">productInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProductInfo</span>();</span><br><span class="line">    BeanUtils.copyProperties(vo, productInfo);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultVo</span>(productInfoService.getOne(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>(productInfo)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行看看，如果参数不对会发生什么？</p><p>我们故意传一个价格为 -1 的参数过去：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">productName : 泡脚</span><br><span class="line">productPrice : -<span class="number">1</span></span><br><span class="line">productStatus : <span class="number">1</span></span><br></pre></td></tr></table></figure><p>我们故意传一个价格为 -1 的参数过去：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-04-19T03:06:37.268+0000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">400</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bad Request&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;errors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;codes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;Min.productInfoVo.productPrice&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;Min.productPrice&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;Min.java.math.BigDecimal&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;Min&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;arguments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;codes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;productInfoVo.productPrice&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;productPrice&quot;</span></span><br><span class="line">          <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;defaultMessage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;productPrice&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;productPrice&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">0</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;defaultMessage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;商品价格不允许为负数&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;objectName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;productInfoVo&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;productPrice&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;rejectedValue&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;bindingFailure&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Min&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Validation failed for object\u003d\u0027productInfoVo\u0027. Error count: 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;trace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 1 errors\nField error in object \u0027productInfoVo\u0027 on field \u0027productPrice\u0027: rejected value [-1]; codes [Min.productInfoVo.productPrice,Min.productPrice,Min.java.math.BigDecimal,Min]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [productInfoVo.productPrice,productPrice]; arguments []; default message [productPrice],0]; default message [商品价格不允许为负数]\n\tat&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/leilema/product/product-info/findByVo&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>大功告成了吗？虽然成功校验了参数，也返回了异常，并且带上”商品价格不允许为负数”的信息。</p><p>但是你要是这样返回给前端，前端妹妹就提刀过来了，当年约定好的状态码，你个负心人说忘就忘？</p><p>用户体验小于等于 0 啊！所以我们要进行优化一下，每次出现异常的时候，自动把状态码写好，不负妹妹之约！</p><h4 id="优化异常处理"><a href="#优化异常处理" class="headerlink" title="| 优化异常处理"></a><strong>| 优化异常处理</strong></h4><p>首先我们先看看校验参数抛出了什么异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Resolved [org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: <span class="number">1</span> errors</span><br></pre></td></tr></table></figure><p>我们看到代码抛出了 org.springframework.validation.BindException 的绑定异常，因此我们的思路就是 AOP 拦截所有 controller，然后异常的时候统一拦截起来，进行封装！完美！</p><p>玩你个头啊完美，这么呆瓜的操作 springboot 不知道吗？spring mvc 当然知道拉，所以给我们提供了一个 @RestControllerAdvice 来增强所有 @RestController，然后使用 @ExceptionHandler 注解，就可以拦截到对应的异常。</p><p>这里我们就拦截 BindException.class 就好了。最后在返回之前，我们对异常信息进行包装一下，包装成 ResultVo，当然要跟上 ResultCode.VALIDATE_ERROR 的异常状态码。</p><p>这样前端妹妹看到 VALIDATE_ERROR 的状态码，就会调用数据校验异常的弹窗提示用户哪里没填好。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerExceptionAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;BindException.class&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultVo <span class="title function_">MethodArgumentNotValidExceptionHandler</span><span class="params">(BindException e)</span> &#123;</span><br><span class="line">        <span class="comment">// 从异常对象中拿到ObjectError对象</span></span><br><span class="line">        <span class="type">ObjectError</span> <span class="variable">objectError</span> <span class="operator">=</span> e.getBindingResult().getAllErrors().get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultVo</span>(ResultCode.VALIDATE_ERROR, objectError.getDefaultMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来看看效果，完美。1002 与前端妹妹约定好的状态码：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">1002</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;参数校验失败&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;商品价格不允许为负数&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>统一响应</strong></p><h4 id="统一包装响应"><a href="#统一包装响应" class="headerlink" title="| 统一包装响应"></a><strong>| 统一包装响应</strong></h4><p>再回头看一下 controller 层的返回：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultVo</span>(productInfoService.getOne(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>(productInfo)));</span><br></pre></td></tr></table></figure><p>开发小哥肯定不乐意了，谁有空天天写 new ResultVo(data) 啊，我就想返回一个实体！怎么实现我不管！</p><p>好把，那就是 AOP 拦截所有 Controller，再 @After 的时候统一帮你封装一下咯!</p><p>怕是上一次脸打的不够疼，springboot 能不知道这么个操作吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice(basePackages = &#123;&quot;com.bugpool.leilema&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerResponseAdvice</span> <span class="keyword">implements</span> <span class="title class_">ResponseBodyAdvice</span>&lt;Object&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(MethodParameter methodParameter, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass)</span> &#123;</span><br><span class="line">        <span class="comment">// response是ResultVo类型，或者注释了NotControllerResponseAdvice都不进行包装</span></span><br><span class="line">        <span class="keyword">return</span> !methodParameter.getParameterType().isAssignableFrom(ResultVo.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">beforeBodyWrite</span><span class="params">(Object data, MethodParameter returnType, MediaType mediaType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass, ServerHttpRequest request, ServerHttpResponse response)</span> &#123;</span><br><span class="line">        <span class="comment">// String类型不能直接包装</span></span><br><span class="line">        <span class="keyword">if</span> (returnType.getGenericParameterType().equals(String.class)) &#123;</span><br><span class="line">            <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 将数据包装在ResultVo里后转换为json串进行返回</span></span><br><span class="line">                <span class="keyword">return</span> objectMapper.writeValueAsString(<span class="keyword">new</span> <span class="title class_">ResultVo</span>(data));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">APIException</span>(ResultCode.RESPONSE_PACK_ERROR, e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 否则直接包装成ResultVo返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultVo</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>①@RestControllerAdvice(basePackages = {“com.bugpool.leilema”}) 自动扫描了所有指定包下的 controller，在 Response 时进行统一处理。</p><p>②重写 supports 方法，也就是说，当返回类型已经是 ResultVo 了，那就不需要封装了，当不等与 ResultVo 时才进行调用 beforeBodyWrite 方法，跟过滤器的效果是一样的。</p><p>③最后重写我们的封装方法 beforeBodyWrite，注意除了 String 的返回值有点特殊，无法直接封装成 json，我们需要进行特殊处理，其他的直接 new ResultVo(data); 就 ok 了。</p><p>打完收工，看看效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/findByVo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ProductInfo <span class="title function_">findByVo</span><span class="params">(<span class="meta">@Validated</span> ProductInfoVo vo)</span> &#123;</span><br><span class="line">    <span class="type">ProductInfo</span> <span class="variable">productInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProductInfo</span>();</span><br><span class="line">    BeanUtils.copyProperties(vo, productInfo);</span><br><span class="line">    <span class="keyword">return</span> productInfoService.getOne(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>(productInfo));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时就算我们返回的是 po，接收到的返回就是标准格式了，开发小哥露出了欣慰的笑容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;code&quot;</span>: <span class="number">1000</span>,</span><br><span class="line">  <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;请求成功&quot;</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;productId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;productName&quot;</span>: <span class="string">&quot;泡脚&quot;</span>,</span><br><span class="line">    <span class="string">&quot;productPrice&quot;</span>: <span class="number">100.00</span>,</span><br><span class="line">    <span class="string">&quot;productDescription&quot;</span>: <span class="string">&quot;中药泡脚加按摩&quot;</span>,</span><br><span class="line">    <span class="string">&quot;productStatus&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="NOT-统一响应"><a href="#NOT-统一响应" class="headerlink" title="| NOT 统一响应"></a><strong>| NOT 统一响应</strong></h4><p><strong>不开启统一响应原因： 开发小哥是开心了，可是其他系统就不开心了。举个例子：我们项目中集成了一个健康检测的功能，也就是这货。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HealthController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/health&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">health</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>公司部署了一套校验所有系统存活状态的工具，这工具就定时发送 get 请求给我们系统：</p><blockquote><p>“兄弟，你死了吗？”<br>“我没死，滚”<br>“兄弟，你死了吗？”<br>“我没死，滚”</p></blockquote><p><strong>是的，web 项目的本质就是复读机。一旦发送的请求没响应，就会给负责人发信息（企业微信或者短信之类的），你的系统死啦！赶紧回来排查 bug 吧！</strong></p><p><strong>好吧，没办法，人家是老大，人家要的返回不是：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;请求成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;success&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>人家要的返回只要一个 success，人家定的标准不可能因为你一个系统改。俗话说的好，如果你改变不了环境，那你就只能改变我自己</p><p><strong>新增不进行封装注解： 因为百分之 99 的请求还是需要包装的，只有个别不需要，写在包装的过滤器吧？又不是很好维护，那就加个注解好了。所有不需要包装的就加上这个注解。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NotControllerResponseAdvice &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在我们的增强过滤方法上过滤包含这个注解的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice(basePackages = &#123;&quot;com.bugpool.leilema&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerResponseAdvice</span> <span class="keyword">implements</span> <span class="title class_">ResponseBodyAdvice</span>&lt;Object&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(MethodParameter methodParameter, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass)</span> &#123;</span><br><span class="line">        <span class="comment">// response是ResultVo类型，或者注释了NotControllerResponseAdvice都不进行包装</span></span><br><span class="line">        <span class="keyword">return</span> !(methodParameter.getParameterType().isAssignableFrom(ResultVo.class)</span><br><span class="line">                || methodParameter.hasMethodAnnotation(NotControllerResponseAdvice.class));</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>最后就在不需要包装的方法上加上注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HealthController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/health&quot;)</span></span><br><span class="line">    <span class="meta">@NotControllerResponseAdvice</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">health</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候就不会自动封装了，而其他没加注解的则依旧自动包装：<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b14ee0c1a9874565bd6a016a74614813~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="图片"></p><p><strong>统一异常</strong></p><p>每个系统都会有自己的业务异常，比如库存不能小于 0 子类的，这种异常并非程序异常，而是业务操作引发的异常，我们也需要进行规范的编排业务异常状态码，并且写一个专门处理的异常类，最后通过刚刚学习过的异常拦截统一进行处理，以及打日志.</p><p>①异常状态码枚举，既然是状态码，那就肯定要实现我们的标准接口 StatusCode。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  <span class="title class_">AppCode</span> <span class="keyword">implements</span> <span class="title class_">StatusCode</span> &#123;</span><br><span class="line"></span><br><span class="line">    APP_ERROR(<span class="number">2000</span>, <span class="string">&quot;业务异常&quot;</span>),</span><br><span class="line">    PRICE_ERROR(<span class="number">2001</span>, <span class="string">&quot;价格异常&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    AppCode(<span class="type">int</span> code, String msg) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②异常类，这里需要强调一下，code 代表 AppCode 的异常状态码，也就是 2000；msg 代表业务异常，这只是一个大类，一般前端会放到弹窗 title 上；最后 super(message); 这才是抛出的详细信息，在前端显示在弹窗体中，在 ResultVo 则保存在 data 中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">APIException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 手动设置异常</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">APIException</span><span class="params">(StatusCode statusCode, String message)</span> &#123;</span><br><span class="line">        <span class="comment">// message用于用户设置抛出错误详情，例如：当前价格-5，小于0</span></span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="comment">// 状态码</span></span><br><span class="line">        <span class="built_in">this</span>.code = statusCode.getCode();</span><br><span class="line">        <span class="comment">// 状态码配套的msg</span></span><br><span class="line">        <span class="built_in">this</span>.msg = statusCode.getMsg();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认异常使用APP_ERROR状态码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">APIException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = AppCode.APP_ERROR.getCode();</span><br><span class="line">        <span class="built_in">this</span>.msg = AppCode.APP_ERROR.getMsg();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>③</strong>最后进行统一异常的拦截，这样无论在 service 层还是 controller 层，开发人员只管抛出 API 异常，不需要关系怎么返回给前端，更不需要关心日志的打印。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerExceptionAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;BindException.class&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultVo <span class="title function_">MethodArgumentNotValidExceptionHandler</span><span class="params">(BindException e)</span> &#123;</span><br><span class="line">        <span class="comment">// 从异常对象中拿到ObjectError对象</span></span><br><span class="line">        <span class="type">ObjectError</span> <span class="variable">objectError</span> <span class="operator">=</span> e.getBindingResult().getAllErrors().get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultVo</span>(ResultCode.VALIDATE_ERROR, objectError.getDefaultMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(APIException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResultVo <span class="title function_">APIExceptionHandler</span><span class="params">(APIException e)</span> &#123;</span><br><span class="line">        <span class="comment">// log.error(e.getMessage(), e); 由于还没集成日志框架，暂且放着，写上TODO</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultVo</span>(e.getCode(), e.getMsg(), e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>④</strong>最后使用，我们的代码只需要这么写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> == orderMaster) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">APIException</span>(AppCode.ORDER_NOT_EXIST, <span class="string">&quot;订单号不存在：&quot;</span> + orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">2003</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;订单不存在&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;订单号不存在：1998&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>就会自动抛出 AppCode.ORDER_NOT_EXIST 状态码的响应，并且带上异常详细信息订单号不存在：xxxx。</p><h4 id="统一权限验证"><a href="#统一权限验证" class="headerlink" title="| 统一权限验证"></a>| 统一权限验证</h4><p>在某个控制器中的参数中，需要从Request的Header中取到Authorization请求头，其中Authorization是Jwt的身份Token，我们需要取到Token中的uid字段，以用来判断当前的用户身份，在没有使用任何的权限身份管理框架的前提下，那么我们只能在Controller层进行一步步的调取，如果是有多个控制器的话，这样会增加很多的冗余代码，所以我们可以自己定义一个注解来减少我们的工作量</p><p>①首先，我们需要定义一个自定义注解，命名为<code>JwtToken</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.PARAMETER)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> JwtToken &#123;</span><br><span class="line"> </span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;uid&quot;</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②接下来我们需要一个解析器，其实在SpringBoot中已经为我们提供了相关的处理解析器-<code>HandlerMethodArgumentResolver</code>，我们只需要实现接口完成业务逻辑处理即可。</p><p><strong>supportsParameter</strong></p><p><code>supportsParameter</code>接口是用于判断是否需要对该参数进行解析，如果该接口的返回值为true，则会继续执行resolveArgument接口方法，所以我们这里应为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> parameter.hasParameterAnnotation(JwtToken.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>resolveArgument</strong></p><p><code>resolveArgument</code>接口是处理参数的分解，只有<code>supportsParameter</code>为true时才会调用此方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> webRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class="line">    <span class="type">String</span> <span class="variable">authorization</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">JwtToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(authorization!=<span class="literal">null</span>)&#123;</span><br><span class="line">        Annotation[] methodAnnotations = parameter.getParameterAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation methodAnnotation : methodAnnotations) &#123;</span><br><span class="line">            <span class="keyword">if</span>(methodAnnotation <span class="keyword">instanceof</span> JwtToken)&#123;</span><br><span class="line">                token = (JwtToken) methodAnnotation;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(token!=<span class="literal">null</span>)&#123;</span><br><span class="line">            result = JwtUtil.get(authorization,token.value());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中JwtUtil中取Token中的信息的方法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">get</span><span class="params">(String token,String key)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">DecodedJWT</span> <span class="variable">jwt</span> <span class="operator">=</span> JWT.decode(token);</span><br><span class="line">        <span class="keyword">return</span> jwt.getClaim(key).asString();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JWTDecodeException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这一步我们的所有步骤就已经完成了，于是我们可以给需要取值的参数加上<code>@JwtToken</code>即可，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">list</span><span class="params">(<span class="meta">@JwtToken</span> String uid)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okHasData(shopsService.list(uid));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;}div#menus {    font-family: "ZhuZiAYuanJWD";}h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {    font-family: ZhuZiAYuanJWD;}.iconfont {    font-family: "iconfont" !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;}/* 时间轴生肖icon */svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;}.icon-zhongbiao::before {    color: #f7c768;}/* bilibli番剧插件 */#article-container .bangumi-tab.bangumi-active {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-ahoverbg);    border-radius: 10px;}a.bangumi-tab:hover {    text-decoration: none !important;}.bangumi-button:hover {    background: var(--anzhiyu-theme) !important;    border-radius: 10px !important;    color: var(--anzhiyu-ahoverbg) !important;}a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;}.bangumi-button {    padding: 5px 10px !important;}a.bangumi-tab {    padding: 5px 10px !important;}svg.icon.faa-tada {    font-size: 1.1em;}.bangumi-info-item {    border-right: 1px solid #f2b94b;}.bangumi-info-item span {    color: #f2b94b;}.bangumi-info-item em {    color: #f2b94b;}/* 解决artitalk的图标问题 */#uploadSource > svg {    width: 1.19em;    height: 1.5em;}/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */#page-header:not(.not-top-img):before {    background-color: transparent !important;}/* 首页文章卡片 */#recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);}/* 首页侧栏卡片 */#aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);}/* 文章页面正文背景 */div#post {    background: rgba(255, 255, 255, 0.9);}/* 分页页面 */div#page {    background: rgba(255, 255, 255, 0.9);}/* 归档页面 */div#archive {    background: rgba(255, 255, 255, 0.9);}/* 标签页面 */div#tag {    background: rgba(255, 255, 255, 0.9);}/* 分类页面 */div#category {    background: rgba(255, 255, 255, 0.9);}/*夜间模式伪类遮罩层透明*/[data-theme="dark"] #recent-posts > .recent-post-item {    background: #121212;}[data-theme="dark"] .card-widget {    background: #121212 !important;}[data-theme="dark"] div#post {    background: #121212 !important;}[data-theme="dark"] div#tag {    background: #121212 !important;}[data-theme="dark"] div#archive {    background: #121212 !important;}[data-theme="dark"] div#page {    background: #121212 !important;}[data-theme="dark"] div#category {    background: #121212 !important;}[data-theme="dark"] div#category {    background: transparent !important;}/* 页脚透明 */#footer {    background: transparent !important;}/* 头图透明 */#page-header {    background: transparent !important;}#rightside > div > button {    border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {    width: 10px;    height: 10px;}::-webkit-scrollbar-thumb {    background-color: #3b70fc;    border-radius: 2em;}::-webkit-scrollbar-corner {    background-color: transparent;}::-moz-selection {    color: #fff;    background-color: #3b70fc;}/* 音乐播放器 *//* .aplayer .aplayer-lrc {  display: none !important;} */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.aplayer.aplayer-fixed {    z-index: 999999 !important;}/* 评论框  */.vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;}/* 鼠标图标 */body {    cursor: url("/img/x1.cur"), auto;}a,[type="button"]:not(:disabled),[type="reset"]:not(:disabled),[type="submit"]:not(:disabled),button:not(:disabled) {    cursor: url("/img/x2.cur"), auto !important;}/* md网站下划线 */#article-container a:hover {    text-decoration: none !important;}#article-container #hpp_talk p img {    display: inline;}/* 404页面 */#error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);}#error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;}#error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #3b70fc;    background-position: center;    background-size: cover;}#error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;}#error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;}#error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);}#body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--anzhiyu-card-bg);    display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;}#body-wrap.error .aside-list .aside-list-item .content time {    display: none;}/* 代码框主题 */#article-container figure.highlight {    border-radius: 10px;}.pace {    -webkit-pointer-events: none;    pointer-events: none;    -webkit-user-select: none;    -moz-user-select: none;    user-select: none;    z-index: 2000;    position: fixed;    margin: auto;    top: 10px;    left: 0;    right: 0;    height: 8px;    border-radius: 8px;    width: 4rem;    background: #eaecf2;    border: 1px #e3e8f7;    overflow: hidden;}.pace-inactive .pace-progress {    opacity: 0;    transition: 0.3s ease-in;}/*侧边栏个人卡片渐变色*/.pace .pace-progress {    -webkit-box-sizing: border-box;    -moz-box-sizing: border-box;    -ms-box-sizing: border-box;    -o-box-sizing: border-box;    box-sizing: border-box;    -webkit-transform: translate3d(0, 0, 0);    -moz-transform: translate3d(0, 0, 0);    -ms-transform: translate3d(0, 0, 0);    -o-transform: translate3d(0, 0, 0);    transform: translate3d(0, 0, 0);    max-width: 200px;    position: absolute;    z-index: 2000;    display: block;    top: 0;    right: 100%;    height: 100%;    width: 100%;    background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);    animation: gradient 1.5s ease infinite;    background-size: 200%;}/*加载渐变条*/.pace.pace-inactive {    opacity: 0;    transition: 0.3s;    top: -8px;}@keyframes gradient {    0% {        background-position: 0% 50%;    }    50% {        background-position: 100% 50%;    }    100% {        background-position: 0% 50%;    }}/* 文章页H1-H6图标样式效果 */h1::before,h2::before,h3::before,h4::before,h5::before,h6::before {    -webkit-animation: ccc 1.6s linear infinite;    animation: ccc 1.6s linear infinite;}@-webkit-keyframes ccc {    0% {        -webkit-transform: rotate(0deg);        transform: rotate(0deg);    }    to {        -webkit-transform: rotate(-1turn);        transform: rotate(-1turn);    }}@keyframes ccc {    0% {        -webkit-transform: rotate(0deg);        transform: rotate(0deg);    }    to {        -webkit-transform: rotate(-1turn);        transform: rotate(-1turn);    }}#content-inner.layout h1::before {    color: #ef50a8;    margin-left: -1.55rem;    font-size: 1.3rem;    margin-top: -0.23rem;}#content-inner.layout h2::before {    color: #fb7061;    margin-left: -1.35rem;    font-size: 1.1rem;    margin-top: -0.12rem;}#content-inner.layout h3::before {    color: #ffbf00;    margin-left: -1.22rem;    font-size: 0.95rem;    margin-top: -0.09rem;}#content-inner.layout h4::before {    color: #a9e000;    margin-left: -1.05rem;    font-size: 0.8rem;    margin-top: -0.09rem;}#content-inner.layout h5::before {    color: #57c850;    margin-left: -0.9rem;    font-size: 0.7rem;    margin-top: 0rem;}#content-inner.layout h6::before {    color: #5ec1e0;    margin-left: -0.9rem;    font-size: 0.66rem;    margin-top: 0rem;}#content-inner.layout h1:hover,#content-inner.layout h2:hover,#content-inner.layout h3:hover,#content-inner.layout h4:hover,#content-inner.layout h5:hover,#content-inner.layout h6:hover {    color: #3b70fc;}#content-inner.layout h1:hover::before,#content-inner.layout h2:hover::before,#content-inner.layout h3:hover::before,#content-inner.layout h4:hover::before,#content-inner.layout h5:hover::before,#content-inner.layout h6:hover::before {    color: #3b70fc;    -webkit-animation: ccc 3.2s linear infinite;    animation: ccc 3.2s linear infinite;}/* 页面设置icon转动速度调整 */#rightside_config i.fas.fa-cog.fa-spin {    animation: fa-spin 5s linear infinite;}/* 归档样式 */span.card-archive-list-count {    width: auto;    text-align: left;    font-size: 1.5rem;    line-height: 0.9;    font-weight: 700;}.card-archive-list-count-group {    display: flex;    flex-direction: row;    align-items: baseline;}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a span:last-child,#aside-content .card-categories ul.card-category-list > .card-category-list-item a span:last-child {    width: fit-content;    margin-left: 4px;}span.card-archive-list-count {    width: auto;    text-align: left;    font-size: 1.1rem;    line-height: 0.9;    font-weight: 700;}.card-archive-list-date {    font-size: 14px;    opacity: 0.6;}li.card-archive-list-item {    width: 100%;    flex: 0 0 48%;}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a:hover,#aside-content .card-categories ul.card-category-list > .card-category-list-item a:hover {    color: var(--anzhiyu-white);    background-color: var(--anzhiyu-theme);    box-shadow: var(--anzhiyu-shadow-theme);    border-radius: 8px;    padding-left: 0.5rem;    padding-right: 0.5rem;}@media screen and (min-width: 1300px) {    #aside-content .card-archives ul.card-archive-list > .card-archive-list-item a:hover,    #aside-content .card-categories ul.card-category-list > .card-category-list-item a:hover {        transform: scale(1.03);    }    #aside-content .card-archives ul.card-archive-list > .card-archive-list-item a:active,    #aside-content .card-categories ul.card-category-list > .card-category-list-item a:active {        transform: scale(0.97);    }}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a,#aside-content .card-categories ul.card-category-list > .card-category-list-item a {    border-radius: 8px;    margin: 4px 0;    display: flex;    flex-direction: column;    align-content: space-between;    border: var(--style-border);}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a span:first-child,#aside-content .card-categories ul.card-category-list > .card-category-list-item a span:first-child {    width: auto;    flex: inherit;}#aside-content .card-archives ul.card-archive-list,#aside-content .card-categories ul.card-category-list {    display: flex;    flex-direction: row;    justify-content: space-between;    flex-wrap: wrap;}/* tags样式 */#aside-content .card-tag-cloud a {    color: var(--anzhiyu-fontcolor) !important;    font-size: 1.05rem !important;    border-radius: 8px;    display: inline-block;    margin-right: 4px;}#aside-content .card-tag-cloud a:hover {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-white) !important;    box-shadow: var(--anzhiyu-shadow-theme);}@media screen and (min-width: 1300px) {    #aside-content .card-tag-cloud a:hover {        transform: scale(1.03);    }    #aside-content .card-tag-cloud a:active {        transform: scale(0.97);    }}#aside-content .card-tag-cloud a sup {    opacity: 0.4;    margin-left: 2px;}/*侧边栏最近文章修改*/#aside-content .aside-list > .aside-list-item .content > time {    display: none;}#aside-content .aside-list > .aside-list-item .content > .title {    -webkit-line-clamp: 3;    font-weight: 700;    padding: 2px 0;}#aside-content .aside-list > .aside-list-item {    padding: 8px;    padding-top: 6px !important;    padding-bottom: 6px !important;    border-radius: 12px;    transition: 0.3s;    margin: 4px 0;    cursor: pointer;}@media screen and (min-width: 1300px) {    #aside-content .aside-list > .aside-list-item:hover {        transform: scale(1.03);    }    #aside-content .aside-list > .aside-list-item:active {        transform: scale(0.97);    }}#aside-content .aside-list > .aside-list-item:hover .thumbnail > img {    transform: scale(1);}#aside-content .aside-list > .aside-list-item:not(:last-child) {    border-bottom: 0 dashed var(--anzhiyu-background) !important;}#aside-content .aside-list > .aside-list-item .thumbnail {    border-radius: 8px;    border: var(--style-border);}#aside-content .aside-list > .aside-list-item:hover {    background: var(--anzhiyu-blue-main);    color: var(--anzhiyu-white);    transition: 0.3s;    box-shadow: var(--anzhiyu-shadow-main);}#aside-content .aside-list > .aside-list-item:hover a {    color: var(--anzhiyu-white) !important;}.card-widget.card-recent-post {    padding: 0.4rem 0.6rem !important;}.pace {    -webkit-pointer-events: none;    pointer-events: none;    -webkit-user-select: none;    -moz-user-select: none;    user-select: none;    z-index: 2000;    position: fixed;    margin: auto;    top: 10px;    left: 0;    right: 0;    height: 8px;    border-radius: 8px;    width: 4rem;    background: #eaecf2;    border: 1px #e3e8f7;    overflow: hidden;}.pace-inactive .pace-progress {    opacity: 0;    transition: 0.3s ease-in;}.pace .pace-progress {    -webkit-box-sizing: border-box;    -moz-box-sizing: border-box;    -ms-box-sizing: border-box;    -o-box-sizing: border-box;    box-sizing: border-box;    -webkit-transform: translate3d(0, 0, 0);    -moz-transform: translate3d(0, 0, 0);    -ms-transform: translate3d(0, 0, 0);    -o-transform: translate3d(0, 0, 0);    transform: translate3d(0, 0, 0);    max-width: 200px;    position: absolute;    z-index: 2000;    display: block;    top: 0;    right: 100%;    height: 100%;    width: 100%;    background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);    animation: gradient 1.5s ease infinite;    background-size: 200%;}#card-info-btn {    border-radius: 10px;}/*侧边栏个人卡片渐变色*//*#aside-content > .card-widget.card-info {    background: linear-gradient(-45deg, var(--anzhiyu-main), #031764, #150136, #67044d);    background-size: 400%;    box-shadow: var(--anzhiyu-shadow-black);    animation: gradient 15s ease infinite;    position: relative;    color: var(--anzhiyu-white);}.site-data > a .headline,.site-data > a .length-num {    color: var(--anzhiyu-white);}*/]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/ali_font.js"/>
      <url>/js/ali_font.js</url>
      
        <content type="html"><![CDATA[!(function (c) {    var l,        h,        a,        t,        i,        v =            '<svg><symbol id="icon-dragon_chen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-498.122105 265.620211L431.157895 754.526316V485.052632h-66.074948c-14.470737 110.645895-44.355368 197.066105-102.696421 260.742736l-39.747368-36.432842C306.526316 617.876211 323.368421 462.901895 323.368421 242.526316V215.578947h377.263158v53.894737H377.182316c-0.404211 58.260211-2.209684 112.128-6.359579 161.684211H700.631579v53.894737h-122.152421a481.172211 481.172211 0 0 0 76.826947 119.70021l66.479158-39.855158 27.728842 46.214737-54.460631 32.687158c29.507368 24.953263 63.757474 45.675789 102.80421 58.098526l-16.303158 51.361684c-134.224842-42.711579-222.773895-167.073684-261.551158-268.207157H485.052632v221.857684l68.985263-41.391158 27.728842 46.214737-109.783579 65.886316zM646.736842 377.263158h-215.578947v-53.894737h215.578947v53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-dog_xu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-375.592421 150.393263c33.684211 44.544 75.210105 74.698105 124.739369 90.812632l11.425684 3.718737 10.401684-6.009264C781.204211 727.740632 808.421053 622.565053 808.421053 592.842105h-53.894737c0 22.069895-19.132632 80.869053-33.711158 103.504842-34.816-14.605474-64.538947-39.262316-89.249684-74.13221 48.316632-55.269053 92.079158-117.328842 120.535579-179.900632l-49.044211-22.285473c-23.767579 52.250947-59.742316 104.717474-100.055579 152.656842-24.010105-50.930526-41.148632-115.927579-51.658105-195.395369H700.631579v-53.894737h-155.189895A1848.050526 1848.050526 0 0 1 538.947368 161.684211h-53.894736c0 58.206316 2.155789 112.074105 6.494315 161.68421H323.368421v26.947368c0 216.549053-13.177263 263.545263-100.702316 359.046737l39.747369 36.432842c63.326316-69.093053 92.806737-118.272 105.714526-206.848H485.052632v-53.894736h-111.319579a1742.147368 1742.147368 0 0 0 3.449263-107.789474h120.158316c12.611368 98.250105 35.031579 177.475368 67.395368 238.187789-61.978947 65.536-128.053895 117.975579-173.298526 142.282106l25.519158 47.481263c47.589053-25.573053 114.095158-77.446737 177.55621-142.821053z m125.170526-411.971368l-80.842105-80.842106-38.103579 38.103579 80.842105 80.842106 38.103579-38.103579z" fill="#231F20" ></path></symbol><symbol id="icon-dog" viewBox="0 0 1024 1024"><path d="M894.814316 904.434526l83.240421-183.134315-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939369-185.263158-0.134737-7.922526-0.134737-33.953684-0.134736-55.996631-30.693053 15.306105-70.090105 19.887158-106.09179 19.887157-92.752842 0-163.624421-23.983158-210.647579-71.275789a192.512 192.512 0 0 1-27.944421-36.513684H377.263158v377.263158c342.662737 0 403.105684 51.092211 494.592 128.377263 7.922526 6.682947 15.521684 13.312 22.959158 19.86021z" fill="#85C3DE" ></path><path d="M326.063158 282.947368c0 34.250105-13.231158 44.463158-29.642105 44.463158s-29.642105-10.213053-29.642106-44.463158c0-34.223158 13.231158-44.463158 29.642106-44.463157s29.642105 10.24 29.642105 44.463157zM269.473684 430.295579v311.646316L190.275368 916.210526h59.203369L323.368421 753.637053V377.263158h-26.947368c-119.403789 0-172.732632-53.382737-185.505685-107.789474h35.624421c51.092211 0 68.581053-15.764211 120.535579-62.544842 12.773053-11.506526 28.079158-25.276632 47.023158-41.741474l18.351158-15.952842-69.658947-99.139368-44.085895 30.989474 41.768421 59.472842c-11.183158 9.862737-20.884211 18.593684-29.480421 26.327579C180.736 212.156632 176.235789 215.578947 146.539789 215.578947H53.894737v26.947369c0 88.710737 66.910316 178.149053 215.578947 187.769263z m216.710737-161.414737c2.290526 71.733895 28.698947 136.326737 75.048421 182.918737C618.711579 509.628632 702.437053 538.947368 810.091789 538.947368c18.593684 0 36.190316-1.158737 52.628211-3.449263 3.745684 111.265684 33.630316 170.334316 51.496421 196.015158l-38.507789 84.722526C782.174316 742.049684 688.774737 700.631579 377.263158 700.631579v53.894737c34.277053 0 65.697684 0.512 94.639158 1.509052L374.595368 970.105263h59.203369l96.013474-211.240421c66.182737 4.338526 117.005474 11.829895 157.911578 22.016L626.229895 916.210526h59.176421l54.16421-119.134315c47.616 18.405053 79.737263 42.091789 113.125053 69.739789L805.753263 970.105263h59.203369l113.071157-248.778105-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939368-185.263158C985.168842 498.553263 1024 447.811368 1024 377.263158c0-95.205053-66.506105-161.684211-161.684211-161.684211v53.894737c65.482105 0 107.789474 42.307368 107.789474 107.789474 0 89.088-87.013053 107.789474-160.013474 107.789474-92.752842 0-163.624421-23.983158-210.647578-71.27579-30.315789-30.504421-45.891368-65.832421-53.35579-98.735158 11.210105 6.952421 22.932211 13.338947 35.274105 19.186527l23.04-48.720843c-92.106105-43.654737-148.992-128.646737-219.243789-243.981473l-46.026105 28.05221c49.448421 81.246316 92.968421 148.506947 147.051789 199.302737z" fill="#231F20" ></path></symbol><symbol id="icon-goat" viewBox="0 0 1024 1024"><path d="M548.378947 646.736842a952.32 952.32 0 0 1 140.90779-161.68421H107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L66.721684 754.526316h417.172211c20.345263-41.472 43.654737-77.446737 64.485052-107.789474z" fill="#F7C768" ></path><path d="M608.256 144.734316C555.762526 115.577263 506.098526 107.789474 485.052632 107.789474V53.894737c32.579368 0 91.270737 11.452632 149.369263 43.735579 75.290947 41.822316 130.694737 94.531368 171.385263 150.878316C755.873684 288.013474 697.101474 323.368421 646.736842 323.368421h-107.789474v-53.894737h107.789474c20.506947 0 48.424421-11.210105 80.437895-31.285895a471.04 471.04 0 0 0-118.918737-93.453473zM832.673684 342.231579c-16.384 0-29.642105 10.24-29.642105 44.463158 0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642105-44.463158c0-34.223158-13.231158-44.463158-29.642105-44.463158zM1024 619.789474C1024 347.109053 901.066105 122.448842 686.753684 3.395368l-26.165895 47.104C914.324211 191.461053 964.688842 440.400842 969.647158 592.842105h-84.506947c-17.92-35.624421-45.352421-69.12-87.013053-101.995789l-16.788211-13.285053-16.734315 13.392842c-66.128842 52.897684-134.629053 127.083789-187.311158 209.677474H102.965895l-8.272842-20.318316C159.043368 617.013895 161.684211 603.109053 161.684211 485.052632v-53.894737h485.052631v-53.894737H161.684211c0-80.384 14.309053-110.026105 66.586947-137.916632l-25.384421-47.535158C123.365053 234.226526 107.789474 291.920842 107.789474 377.263158v107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L110.618947 862.315789h58.206316l-43.897263-107.789473h103.477895l43.897263 107.789473h58.206316l-43.897263-107.789473h259.47621C508.981895 824.939789 485.052632 899.152842 485.052632 970.105263h53.894736c0-68.688842 27.270737-144.060632 68.958316-215.578947H687.157895c7.410526 0 13.473684 6.063158 13.473684 13.473684V862.315789h53.894737v-94.315789c0-37.160421-30.208-67.368421-67.368421-67.368421h-44.65179c40.771368-58.017684 89.438316-111.427368 138.913684-153.626947C841.512421 600.037053 862.315789 655.225263 862.315789 754.526316h53.894737c0-38.912-2.748632-74.482526-11.102315-107.789474H1024v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-goat_wei" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 50.202947c52.304842 70.925474 136.973474 152.144842 232.528843 190.383158l19.994947-50.041263c-109.271579-43.708632-202.805895-152.629895-238.780632-217.49221H808.421053v-53.894737H538.947368v-53.894737h215.578948v-53.894737h-215.578948V161.684211h-53.894736v161.68421h-215.578948v53.894737h215.578948v53.894737H215.578947v53.894737h255.757474c-35.974737 64.862316-129.536 173.783579-238.807579 217.49221l20.021895 50.041263c95.528421-38.238316 180.197053-119.484632 232.501895-190.383158V808.421053h53.894736v-246.218106z" fill="#231F20" ></path></symbol><symbol id="icon-dragon" viewBox="0 0 1024 1024"><path d="M366.376421 344.441263l152.980211-152.98021c43.142737-43.142737 141.204211-9.216 270.201263 115.738947-15.225263 9.835789-25.114947 15.818105-44.13979 32.256s-38.076632 35.489684-59.418947 56.832c-4.203789 4.203789-51.173053 53.221053-78.740211 82.027789-10.805895-12.126316-22.743579-24.171789-34.654315-36.082526L493.136842 362.792421l-54.218105 54.218105-72.542316-72.569263zM862.315789 512c0 46.834526-45.352421 80.842105-107.789473 80.842105-108.948211 0-189.359158-28.806737-267.129263-56.697263C414.100211 509.871158 344.872421 485.052632 258.182737 485.052632 80.788211 485.052632 0 588.126316 0 683.897263h53.894737C73.216 659.779368 135.302737 646.736842 177.340632 646.736842c77.338947 0 223.124211 23.282526 291.893894 47.912421C547.462737 722.701474 615.989895 754.526316 734.315789 754.526316 862.315789 754.526316 916.210526 670.315789 916.210526 512h-53.894737z" fill="#FF8787" ></path><path d="M552.421053 1024c-69.766737 0-113.825684-13.958737-156.402527-27.459368-54.487579-17.273263-110.807579-35.004632-232.421052-26.516211l-3.826527-53.733053c131.718737-9.458526 195.934316 10.967579 252.52379 28.887579 42.226526 13.365895 78.686316 24.926316 140.126316 24.926316 92.752842 0 148.210526-57.936842 148.210526-113.960421 0-16.949895-5.524211-101.618526-114.634105-101.618526-64.970105 0-112.747789 23.336421-163.328 48.02021C365.325474 830.571789 300.301474 862.315789 204.288 862.315789 85.908211 862.315789 0 787.294316 0 683.897263 0 588.126316 80.788211 485.052632 258.182737 485.052632c86.689684 0 155.917474 24.818526 229.214316 51.09221 45.810526 16.410947 92.564211 33.172211 145.488842 44.166737 9.000421-7.033263 13.850947-16.276211 13.850947-26.758737 0-37.187368-37.672421-74.859789-74.13221-111.265684l-3.287579-3.287579 38.103579-38.103579 3.260631 3.287579C652.853895 446.275368 700.631579 494.026105 700.631579 553.552842c0 12.719158-2.802526 24.926316-7.976421 36.109474A594.997895 594.997895 0 0 0 754.526316 592.842105c62.437053 0 107.789474-34.007579 107.789473-80.842105 0-58.853053-52.870737-110.268632-108.840421-164.702316l-8.057263-7.841684c-19.024842 16.437895-38.076632 35.489684-59.418947 56.832l-38.103579-38.103579c74.805895-74.832842 134.898526-134.898526 268.314947-141.931789V55.619368c-63.407158 7.787789-120.993684 39.424-121.667368 39.801264l-15.818105 8.811789-14.120421-11.344842C731.701895 66.452211 709.712842 53.894737 673.684211 53.894737c-41.418105 0-74.347789 25.869474-109.190737 53.301895-26.624 20.911158-54.137263 42.549895-86.851369 53.194105L469.342316 161.684211h-69.093053l-105.525895 105.525894-38.103579-38.130526L324.015158 161.684211H161.684211V107.789474h303.104c22.231579-8.272842 43.708632-25.168842 66.398315-42.981053C569.829053 34.438737 613.618526 0 673.684211 0c48.909474 0 81.408 17.946947 110.888421 40.097684C813.702737 26.300632 877.729684 0 943.157895 0h26.947368v323.368421h-53.894737v-53.167158c-54.164211 3.098947-92.914526 15.845053-127.002947 36.675369l1.832421 1.778526C852.587789 368.505263 916.210526 430.376421 916.210526 512c0 60.928-43.708632 109.945263-107.789473 127.622737V700.631579h53.894736v-53.894737h53.894737v53.894737h53.894737v53.894737h-53.894737v53.894737h-53.894737v-53.894737h-53.894736c-29.722947 0-53.894737-24.171789-53.894737-53.894737v-53.894737c-118.325895 0-207.063579-31.797895-285.318737-59.877053C400.437895 562.229895 335.494737 538.947368 258.182737 538.947368 117.059368 538.947368 53.894737 611.732211 53.894737 683.897263 53.894737 757.221053 115.738947 808.421053 204.288 808.421053c11.910737 0 23.228632-0.538947 34.034526-1.536C248.454737 796.321684 269.473684 770.640842 269.473684 739.166316c0-33.118316-43.088842-70.979368-58.152421-81.596632l30.935579-44.139789c8.299789 5.793684 81.111579 58.664421 81.111579 125.736421 0 19.429053-4.527158 37.052632-10.994526 52.304842 30.773895-10.051368 58.314105-23.498105 86.662737-37.349053C452.877474 727.848421 508.577684 700.631579 585.997474 700.631579 702.410105 700.631579 754.526316 778.725053 754.526316 856.144842 754.526316 938.657684 678.912 1024 552.421053 1024z m-21.180632-623.104L493.136842 362.792421l137.889684-137.889684 38.103579 38.103579-137.889684 137.889684z m-126.760421-18.351158l-38.103579-38.103579 152.980211-152.98021 38.103579 38.103579-152.980211 152.98021z m282.004211-218.624c15.494737-9.754947 43.331368-31.447579 43.331368-31.447579-25.734737-27.809684-49.556211-33.333895-67.368421-29.07621-19.240421 4.608-37.753263 24.602947-37.753263 24.602947s42.253474 22.447158 61.790316 35.920842z" fill="#231F20" ></path></symbol><symbol id="icon-horse" viewBox="0 0 1024 1024"><path d="M776.003368 646.736842c16.599579-99.947789 43.439158-181.086316 83.213474-256.538947l6.817684-12.934737H269.473684c-36.756211 0-53.894737 54.945684-53.894737 92.05221 0 46.753684 6.656 77.527579 70.278737 176.074106l84.533895 128.269473L498.876632 646.736842h277.126736z" fill="#FFAF6E" ></path><path d="M1024 0v404.210526c0 33.333895 0 134.736842-92.079158 134.736842h-13.824l-78.362947-109.056c-22.743579 49.906526-40.340211 103.046737-53.490527 162.950737h115.092211C937.310316 592.842105 970.105263 625.637053 970.105263 661.638737c0 60.631579-69.389474 154.300632-77.312 164.75621l-43.008-32.471579C875.466105 759.861895 916.210526 693.813895 916.210526 661.638737c0-5.982316-8.919579-14.901895-14.901894-14.901895h-125.332211C761.128421 736.121263 754.526316 840.569263 754.526316 970.105263h-53.894737c0-283.971368 31.097263-453.605053 110.888421-605.049263l20.318316-38.534737 112.801684 156.995369c14.443789-4.419368 25.465263-20.938105 25.465263-79.306106V0h53.894737z m-161.684211 161.684211h53.894737V0h-53.894737v80.842105c-17.381053-14.955789-38.184421-26.947368-80.842105-26.947368h-134.736842v53.894737h134.736842c37.672421 0 80.842105 40.906105 80.842105 53.894737z m-107.789473 0h-215.578948v53.894736h161.684211l53.894737-53.894736zM300.894316 766.544842L400.680421 916.210526h64.754526l-95.043368-142.551579L498.876632 646.736842h167.855157a1212.631579 1212.631579 0 0 1 9.431579-53.894737h-199.383579l-175.885473 173.702737z m109.97221-184.400842l-37.861052-38.319158-132.419369 130.802526C173.729684 571.095579 161.684211 529.812211 161.684211 469.315368 161.684211 398.578526 199.464421 323.368421 269.473684 323.368421h323.368421l53.894737-53.894737H269.473684c-6.709895 0-13.258105 0.565895-19.698526 1.482105C234.927158 249.451789 204.638316 215.578947 160.633263 215.578947 65.967158 215.578947 0 349.291789 0 469.315368c0 70.170947 16.141474 136.650105 49.232842 202.671158L6.197895 723.833263l41.472 34.41179 66.128842-79.737264-8.704-16.033684C83.105684 622.133895 53.894737 558.214737 53.894737 469.315368 53.894737 368.451368 106.765474 269.473684 160.633263 269.473684c13.231158 0 25.815579 9.889684 35.43579 20.533895C142.874947 321.967158 107.789474 388.500211 107.789474 469.315368c0 78.201263 19.698526 130.937263 93.642105 243.981474l-55.296 54.622316L280.899368 970.105263h64.754527l-130.048-195.072 195.260631-192.889263z" fill="#231F20" ></path></symbol><symbol id="icon-monkey_shen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 134.736842h161.684211v53.894737h53.894737V269.473684h-215.578948V161.684211h-53.894736v107.789473h-215.578948v431.157895h53.894737v-53.894737h161.684211v215.578947h53.894736v-215.578947z m0-161.68421h161.684211v107.789473h-161.684211v-107.789473z m-215.578947 0h161.684211v107.789473h-161.684211v-107.789473z m215.578947-161.684211h161.684211v107.789474h-161.684211v-107.789474z m-215.578947 0h161.684211v107.789474h-161.684211v-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-ox_chou" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-161.68421 188.631579h-159.555369c13.985684-172.813474 43.115789-357.429895 70.817684-385.158737L700.631579 269.473684H323.368421v53.894737h107.169684c-1.940211 45.756632-8.192 103.962947-15.76421 161.684211H323.368421v53.894736h83.968c-9.862737 68.446316-20.264421 130.128842-25.734737 161.684211H215.578947v53.894737h592.842106v-53.894737z m-346.543158-161.684211h149.800421a3313.717895 3313.717895 0 0 0-16.842105 161.684211h-158.477474c6.036211-35.247158 16.114526-95.636211 25.519158-161.684211z m22.608842-215.578947h171.735579c-15.198316 41.121684-27.405474 100.594526-36.890948 161.684211h-150.123789c7.383579-57.505684 13.419789-115.361684 15.279158-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-monkey" viewBox="0 0 1024 1024"><path d="M757.733053 485.052632H565.894737a80.842105 80.842105 0 0 0-80.842105 80.842105v215.578947c0 40.96 43.546947 99.678316 77.446736 139.210105C596.426105 960.215579 603.055158 970.105263 603.055158 970.105263H754.526316s15.144421-18.674526 45.891368-58.071579S862.315789 809.984 862.315789 717.608421c0-89.573053-47.993263-166.346105-104.582736-232.555789z" fill="#C3D686" ></path><path d="M538.947368 1024h-53.894736c0-32.794947 25.869474-87.417263 77.446736-103.316211C528.599579 881.152 485.052632 822.433684 485.052632 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h80.842105v53.894737h-80.842105a26.947368 26.947368 0 0 0-26.947369 26.947368c0 19.725474 36.675368 77.473684 92.133053 134.736842h88.602947c20.210526-14.147368 88.737684-71.464421 88.737685-198.602105 0-108.382316-93.237895-202.967579-168.151579-278.986105-49.502316-50.202947-88.576-89.842526-98.735158-128.61979-11.749053-44.732632-21.584842-112.586105-26.327579-148.318315H377.263158c-45.136842 0-89.519158 8.434526-121.802105 53.894736H431.157895v53.894737c-97.28 0-107.789474 113.071158-107.789474 161.684211v53.894737h53.894737v161.68421h-53.894737v-107.789474h-26.947368c-170.253474 0-188.631579-94.234947-188.631579-134.736842 0-31.043368 35.220211-72.326737 55.727158-93.722947 2.694737-14.686316 5.847579-28.348632 9.431579-41.013895H161.684211V215.578947h31.528421C239.642947 120.993684 317.224421 107.789474 377.263158 107.789474h185.640421l2.802526 23.794526c0.134737 1.050947 12.719158 106.657684 27.944421 164.756211 6.494316 24.872421 44.624842 63.514947 84.965053 104.448C760.481684 483.813053 862.315789 587.129263 862.315789 717.608421c0 92.375579-31.124211 155.028211-61.898105 194.425263C904.919579 892.146526 970.105263 803.004632 970.105263 673.684211c0-91.405474-42.819368-154.381474-84.237474-215.255579C847.791158 402.458947 808.421053 344.576 808.421053 269.473684c0-119.349895 87.093895-161.684211 161.68421-161.68421v53.894737c-32.417684 0-107.789474 10.509474-107.789474 107.789473 0 58.502737 31.555368 104.933053 68.096 158.639158C974.282105 492.597895 1024 565.679158 1024 673.684211c0 177.286737-108.301474 296.421053-269.473684 296.421052h-161.684211c-37.672421 0-53.894737 40.906105-53.894737 53.894737zM229.214316 269.473684a384.808421 384.808421 0 0 0-14.012632 58.341053l-1.401263 8.488421-6.090105 6.117053c-22.878316 22.932211-44.813474 52.601263-46.026105 62.275368 0 56.805053 53.76 75.264 107.789473 79.386947V431.157895c0-58.691368 13.473684-119.619368 46.511158-161.684211h-86.770526zM323.368421 1024h-53.894737c0-32.794947 25.869474-87.417263 77.446737-103.316211C313.020632 881.152 269.473684 822.433684 269.473684 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h45.16379A188.847158 188.847158 0 0 1 565.894737 592.842105h134.736842v53.894737h-134.736842c-74.293895 0-134.736842 60.442947-134.736842 134.736842v26.516211l-53.894737 0.377263V781.473684c0-9.162105 0.646737-18.135579 1.913263-26.947368H350.315789c-14.848 0-26.947368 12.072421-26.947368 26.947368 0 19.725474 36.675368 77.473684 92.133053 134.736842H431.157895v53.894737h-53.894737c-37.672421 0-53.894737 40.906105-53.894737 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-horse_wu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 26.947368h269.473685v-53.894736H538.947368v-161.684211h161.684211v-53.894737H411.001263c12.045474-33.28 20.156632-69.793684 20.156632-107.789473h-53.894737c0 121.963789-105.364211 233.391158-106.415158 234.496l38.858105 37.349052c2.883368-3.018105 43.816421-46.133895 77.392842-110.160842H485.052632v161.684211H215.578947v53.894736h269.473685v323.368421h53.894736V538.947368z" fill="#231F20" ></path></symbol><symbol id="icon-ox" viewBox="0 0 1025 1024"><path d="M540.294737 754.526316h215.578947c20.210526 0 35.112421 1.374316 53.894737 4.581052 91.863579 15.656421 145.354105 67.691789 161.684211 86.069895V916.210526h53.894736V635.580632l-7.895579-7.895579c-9.269895-9.269895-36.513684-49.232842-44.032-196.527158H540.294737a161.684211 161.684211 0 0 0-161.684211 161.68421v131.098948c43.304421 20.210526 97.28 30.585263 161.684211 30.585263z" fill="#FFAF6E" ></path><path d="M1025.347368 635.580632V916.210526h-53.894736v-71.033263c-16.330105-18.405053-69.820632-70.413474-161.684211-86.069895V916.210526h-53.894737v-161.68421h-107.789473v215.578947h-53.894737V700.631579h161.68421c100.998737 0 172.570947 38.669474 215.578948 71.868632v-115.738948c-33.684211-43.627789-51.712-137.458526-53.706106-279.498105H701.978947c-76.934737 0-127.218526-26.219789-175.804631-51.550316a1556.048842 1556.048842 0 0 0-26.839579-13.743158c-26.839579 26.004211-66.209684 44.921263-115.738948 55.511579 24.441263 22.986105 60.874105 52.116211 106.469053 72.838737l-22.312421 49.044211c-76.584421-34.816-129.589895-88.926316-150.824421-113.125053-10.644211 0.619789-21.477053 1.024-32.687158 1.024a473.734737 473.734737 0 0 1-123.365053-15.952842l-93.022315 186.314105 68.581052 53.86779C167.882105 579.557053 237.891368 538.947368 324.715789 538.947368v53.894737c-95.986526 0-170.361263 62.490947-171.088842 63.137684l-16.78821 14.282106-136.838737-107.358316 109.729684-219.809684C46.430316 314.448842 1.347368 267.371789 1.347368 199.868632 1.347368 89.815579 121.586526 53.894737 163.031579 53.894737v53.894737c-14.120421 0-107.789474 17.165474-107.789474 92.079158C55.242105 290.465684 192.188632 323.368421 284.240842 323.368421c67.907368 0 122.421895-12.988632 157.696-35.624421-42.711579-14.336-95.097263-23.120842-169.337263-18.324211l-3.503158-53.786947c95.878737-6.117053 160.148211 8.515368 211.429053 28.833684C484.244211 235.439158 486.4 225.818947 486.4 215.578947c0-48.855579-57.829053-76.288-58.394947-76.557473l22.393263-49.017263C454.063158 91.648 540.294737 131.826526 540.294737 215.578947c0 18.566737-3.422316 35.84-9.997474 51.631158 7.060211 3.584 13.985684 7.168 20.776421 10.698106C597.854316 302.322526 638.248421 323.368421 701.978947 323.368421h269.473685v26.947368c0 214.689684 35.220211 266.590316 45.999157 277.369264l7.895579 7.895579z m-729.384421 25.141894l-98.789052 118.541474 86.797473 137.835789 45.594948-28.725894-65.913263-104.690527 37.052631-44.43621C358.642526 785.192421 439.080421 808.421053 540.294737 808.421053v-53.894737c-99.893895 0-175.077053-24.549053-223.474526-72.946527l-20.857264-20.857263z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit_mao" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-377.263158-188.631579h107.789474v323.368421c-20.48 0-39.936-11.264-40.016842-11.317895l-27.728842 46.214737c3.206737 1.940211 32.660211 18.997895 67.745684 18.997895 30.746947 0 53.894737-23.147789 53.894737-53.894737V269.473684h-215.578948v538.947369h53.894737V323.368421z m-107.789473 242.526316v-242.526316h-53.894737v196.904421l-107.789474 40.421053v-243.927579l169.094737-48.316632-14.821053-51.819789L269.473684 276.102737v304.801684l-36.405895 13.662316 18.917053 50.472421 178.741895-67.018105c-5.039158 69.928421-55.269053 106.981053-165.133474 122.933894l7.733895 53.328842C325.712842 746.657684 485.052632 723.536842 485.052632 565.894737z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit" viewBox="0 0 1024 1024"><path d="M680.96 488.744421a1666.667789 1666.667789 0 0 0-54.433684-23.95621c-16.006737 12.234105-33.899789 20.264421-60.631579 20.264421h-80.842105c-36.810105 0-83.644632 30.396632-104.394106 67.772631-42.819368 77.123368-53.409684 117.813895-11.021473 201.701053C397.096421 808.879158 431.157895 876.409263 431.157895 970.105263h338.539789l68.338527-138.859789c20.129684-40.96 24.252632-73.701053 24.252631-110.349474 0.026947-57.397895-25.061053-159.717053-181.328842-232.151579z" fill="#FFBDD8" ></path><path d="M862.315789 720.896c0 36.621474-4.122947 69.389474-24.252631 110.349474L769.697684 970.105263H485.052632v-53.894737h48.370526C507.877053 880.074105 485.052632 833.509053 485.052632 781.473684c0-59.418947 24.171789-113.313684 63.218526-152.360421l38.103579 38.103579A161.091368 161.091368 0 0 0 538.947368 781.473684c0 54.784 35.381895 104.043789 63.514948 134.736842h133.712842l53.490526-108.759579c15.710316-31.851789 18.755368-55.834947 18.755369-86.554947 0-80.976842-63.434105-150.096842-178.607158-195.503158-17.542737 8.138105-38.292211 13.554526-63.919158 13.554526h-80.842105c-13.958737 0-43.924211 15.979789-57.290106 40.016843l-47.104-26.165895C401.408 515.449263 448.242526 485.052632 485.052632 485.052632h80.842105c37.268211 0 57.478737-15.440842 79.090526-36.45979C625.367579 336.195368 549.753263 269.473684 485.052632 269.473684h-107.789474a21.288421 21.288421 0 0 0-5.955369 2.021053A683.762526 683.762526 0 0 0 302.187789 194.021053c-35.84-34.223158-61.763368-58.933895-94.908631-79.440842A42.442105 42.442105 0 0 0 185.478737 107.789474a22.824421 22.824421 0 0 0-17.381053 7.194947c-10.913684 11.425684-6.063158 28.240842 1.428211 39.181474 21.989053 32.121263 47.912421 56.858947 83.752421 91.109052 20.614737 19.671579 49.259789 43.169684 77.392842 63.08379C281.007158 367.400421 215.578947 484.432842 215.578947 592.842105c0 74.482526 24.791579 124.065684 51.065264 176.586106C294.534737 825.209263 323.368421 882.903579 323.368421 970.105263h-53.894737c0-74.482526-24.791579-124.065684-51.065263-176.586105C190.517895 737.738105 161.684211 680.043789 161.684211 592.842105c0-90.866526 42.226526-197.685895 93.453473-274.485894a803.759158 803.759158 0 0 1-39.046737-34.115369C177.852632 247.754105 150.231579 221.399579 125.035789 184.616421c-24.441263-35.759158-22.797474-78.686316 4.069053-106.819368 26.300632-27.567158 70.898526-31.043368 106.522947-9.000421 37.941895 23.444211 65.562947 49.798737 103.774316 86.258526 9.970526 9.512421 33.037474 32.309895 56.93979 60.550737h68.634947c-27.621053-37.780211-60.416-72.730947-88.522105-99.543579-28.833684-27.540211-54.730105-52.116211-84.533895-74.024421L326.305684 0.296421c31.232 23.228632 57.802105 48.532211 87.309474 76.719158 53.840842 51.388632 94.450526 100.594526 121.74821 146.83621 82.836211 26.650947 150.042947 116.870737 165.025685 230.750316l1.724631 13.177263-9.404631 9.404632c-3.772632 3.772632-7.706947 7.653053-11.802948 11.587368C837.227789 561.178947 862.315789 663.498105 862.315789 720.896zM309.463579 754.526316c3.934316 8.057263 7.895579 16.087579 11.991579 24.144842C348.887579 832.970105 377.263158 889.128421 377.263158 970.105263h53.894737c0-93.696-34.061474-161.226105-61.520842-215.578947h-60.173474z m597.90821 53.894737c-3.422316 9.404632-7.814737 19.806316-13.770105 31.959579L829.790316 970.105263h60.065684l52.143158-105.957052c10.778947-21.935158 17.515789-40.016842 21.90821-55.727158h-56.535579zM514.694737 390.736842c0-34.223158-13.231158-44.463158-29.642105-44.463158s-29.642105 10.24-29.642106 44.463158c0 34.250105 13.231158 44.463158 29.642106 44.463158s29.642105-10.213053 29.642105-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rat_zi" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 188.631579v-215.578947h269.473685v-53.894737H538.947368v-39.585684c26.543158-18.081684 94.585263-65.050947 177.852632-127.488L700.631579 215.578947H323.368421v53.894737h295.316211a4221.008842 4221.008842 0 0 1-121.640421 85.369263l-11.991579 8.003369V431.157895H242.526316v53.894737h242.526316v215.578947c0 48.343579-13.850947 53.894737-134.736843 53.894737v53.894737c105.391158 0 188.631579 0 188.631579-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-rat" viewBox="0 0 1024 1024"><path d="M727.659789 431.157895c-132.581053 0-220.348632 47.454316-285.803789 154.354526-19.779368 32.309895-15.845053 76.503579-9.404632 96.579368 3.260632 10.159158 7.760842 18.647579 12.422737 25.546106C464.761263 737.010526 499.927579 754.526316 538.947368 754.526316h66.829474c1.158737 17.893053-1.967158 34.762105-15.144421 53.975579-12.692211 18.539789-37.807158 40.151579-56.32 54.810947 25.249684-0.673684 52.709053-0.997053 83.240421-0.997053C877.487158 862.315789 970.105263 711.922526 970.105263 571.176421 936.421053 512 882.364632 431.157895 727.659789 431.157895z" fill="#85C3DE" ></path><path d="M210.432 1012.897684l-43.573895-31.690105c106.954105-147.051789 185.317053-171.196632 423.828211-172.705684 21.396211-31.258947 16.249263-56.266105 9.377684-89.70779-3.557053-17.138526-7.221895-34.842947-7.221895-54.433684 0-68.958316 25.330526-104.636632 63.407158-136.973474l34.896842 41.040842c-29.453474 25.061053-44.409263 46.780632-44.409263 95.932632 0 14.093474 2.937263 28.402526 6.063158 43.546947 5.901474 28.510316 12.8 62.032842-1.131789 99.462737 166.373053-10.24 264.542316-96.902737 264.542315-236.193684C916.210526 418.330947 827.580632 323.368421 684.921263 323.368421c-83.644632 0-153.303579 29.696-174.187789 39.612632a224.875789 224.875789 0 0 1-20.533895 31.339789l-41.741474-34.115368 20.884211 17.057684-20.911158-16.976842C448.781474 359.828211 485.052632 314.287158 485.052632 262.736842c0-34.816-8.946526-60.766316-26.570106-77.069474-17.515789-16.249263-44.786526-24.602947-81.219368-24.953263V323.368421h-53.894737V109.783579l24.872421-1.913263c64.700632-4.931368 114.095158 7.895579 146.863158 38.238316C524.207158 173.056 538.947368 212.291368 538.947368 262.736842c0 11.102316-1.131789 21.908211-3.072 32.202105 37.268211-12.584421 89.842526-25.465263 149.045895-25.465263C858.165895 269.473684 970.105263 387.907368 970.105263 571.176421 970.105263 711.922526 877.487158 862.315789 617.552842 862.315789c-258.667789 0-311.942737 19.698526-407.120842 150.581895z m19.105684-256.835368c-12.045474 0-24.387368-0.565895-37.025684-1.64379l-22.096842-1.859368-2.425263-22.016C167.747368 728.144842 161.684211 672.444632 161.684211 631.026526c0-103.585684 21.450105-178.903579 53.894736-259.045052V107.789474h53.894737v274.782315l-2.021052 4.904422C235.439158 465.758316 215.578947 533.800421 215.578947 631.026526c0 22.878316 2.101895 51.442526 3.826527 70.979369 99.678316 2.802526 172.813474-35.408842 222.450526-116.493474l48.020211 24.090947c-11.237053 28.133053-11.371789 51.577263-0.377264 67.853474 9.701053 14.282105 28.645053 23.174737 49.448421 23.174737v53.894737c-39.019789 0-74.186105-17.515789-94.073263-46.888421a100.244211 100.244211 0 0 1-12.422737-25.546106c-53.221053 49.178947-121.128421 73.943579-202.913684 73.970527zM379.957895 525.473684c0-34.223158-13.231158-44.463158-29.642106-44.463158s-29.642105 10.24-29.642105 44.463158c0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642106-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rooster_you" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-215.578947-188.631579h-161.684211v-26.947368h161.684211V242.526316H269.473684v53.894737h161.684211v26.947368h-161.684211v485.052632h53.894737v-53.894737h377.263158v53.894737h53.894737V323.368421zM323.368421 646.736842h377.263158v53.894737H323.368421v-53.894737z m0-269.473684h107.789474c0 103.316211-72.784842 107.654737-81.084632 107.789474L350.315789 538.947368c46.592 0 134.736842-33.792 134.736843-161.68421h53.894736v107.789474c0 29.722947 24.171789 53.894737 53.894737 53.894736h107.789474v53.894737H323.368421v-215.578947z m377.263158 0v107.789474h-107.789474v-107.789474h107.789474z m-215.578947-80.842105h53.894736v26.947368h-53.894736v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-rooster" viewBox="0 0 1024 1024"><path d="M891.688421 506.421895C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V116.224l-323.368421 195.745684V323.368421c0 78.524632 14.928842 131.664842 29.372632 183.053474 12.611368 44.894316 24.522105 87.282526 24.522105 140.314947 0 101.618526-77.931789 176.693895-168.286316 203.991579l5.416422 11.587368h215.578947c24.333474 0 43.385263-0.242526 58.556631-2.128842C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947z" fill="#FF8787" ></path><path d="M673.684211 354.357895c-16.384 0-29.642105-10.213053-29.642106-44.463158 0-34.223158 13.231158-44.463158 29.642106-44.463158s29.642105 10.24 29.642105 44.463158c0 34.250105-13.258105 44.463158-29.642105 44.463158zM540.106105 970.105263l-50.58021-107.789474h156.05221l50.607158 107.789474h59.553684l-51.60421-109.918316C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V107.789474c0-59.445895-48.343579-107.789474-107.789473-107.789474a107.924211 107.924211 0 0 0-107.789474 106.172632 100.890947 100.890947 0 0 0-24.117895-3.314527 88.710737 88.710737 0 0 0-88.602947 88.602948c0 20.668632 5.227789 39.720421 10.671158 53.921684l-99.489684 59.688421 93.749894 14.470737V377.263158c0 14.416842-5.901474 21.692632-33.360842 49.152l-11.129263 11.129263C398.228211 326.521263 324.985263 269.473684 215.740632 269.473684 96.768 269.473684 0 366.241684 0 485.214316V646.736842h53.894737v-161.522526A162.007579 162.007579 0 0 1 215.740632 323.368421c82.081684 0 140.422737 36.244211 240.64 152.252632l-38.615579 38.615579C367.804632 461.285053 323.098947 431.157895 259.584 431.157895A151.983158 151.983158 0 0 0 107.789474 582.952421V754.526316h53.894737v-171.573895A98.007579 98.007579 0 0 1 259.584 485.052632c46.322526 0 79.629474 20.911158 137.027368 86.016l18.970948 21.530947 128.080842-128.080842C572.200421 435.981474 592.842105 415.366737 592.842105 377.263158v-97.926737l23.309474-14.120421-13.662316-23.04c-0.161684-0.242526-14.578526-24.899368-14.578526-50.688 0-19.132632 15.575579-34.708211 34.70821-34.708211 5.093053 0 26.785684 3.179789 39.558737 18.647579l26.327579 46.026106 39.774316-24.090948-20.372211-49.367579C704.754526 140.449684 700.631579 117.517474 700.631579 107.789474c0-29.722947 24.171789-53.894737 53.894737-53.894737s53.894737 24.171789 53.894737 53.894737v215.578947c0 85.935158 16.680421 145.300211 31.366736 197.632C851.887158 564.008421 862.315789 601.141895 862.315789 646.736842c0 95.285895-99.408842 161.684211-188.631578 161.684211h-209.461895l-68.419369-145.704421C375.242105 618.954105 338.108632 592.842105 296.448 592.842105A80.976842 80.976842 0 0 0 215.578947 673.711158V862.315789h53.894737v-188.604631c0-14.874947 12.099368-26.974316 26.974316-26.974316 20.533895 0 38.965895 14.147368 50.553263 38.858105L480.579368 970.105263h59.526737z" fill="#231F20" ></path></symbol><symbol id="icon-snake_si" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-242.041263 180.762947l-52.116211-13.797052C657.219368 749.864421 651.425684 754.526316 619.789474 754.526316h-242.526316V485.052632h269.473684v53.894736h53.894737V215.578947H323.368421v538.947369c0 29.722947 24.171789 53.894737 53.894737 53.894737h242.526316c77.689263 0 91.189895-51.065263 108.274526-115.658106zM377.263158 269.473684h269.473684v161.684211H377.263158v-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-tiger_yin" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-257.42821 299.250526l-107.789474-53.894737-24.117895 48.208843 107.789474 53.894736 24.117895-48.208842z m-269.473685-5.658947l-24.117894-48.208842-107.789474 53.894737 24.117895 48.208842 107.789473-53.894737zM700.631579 431.157895h-161.684211v-53.894737h107.789474v-53.894737H377.263158v53.894737h107.789474v53.894737h-161.684211v323.368421h53.894737v-53.894737h269.473684v53.894737h53.894737V431.157895z m-161.684211 161.68421h107.789474v53.894737h-107.789474v-53.894737z m-161.68421 0h107.789474v53.894737h-107.789474v-53.894737z m161.68421-107.789473h107.789474v53.894736h-107.789474v-53.894736z m-161.68421 0h107.789474v53.894736h-107.789474v-53.894736zM754.526316 215.578947h-223.097263l-20.803369-62.410105-51.119158 17.057684L474.624 215.578947H269.473684v107.789474h53.894737v-53.894737h377.263158v53.894737h53.894737V215.578947z" fill="#231F20" ></path></symbol><symbol id="icon-snake" viewBox="0 0 1024 1024"><path d="M107.789474 790.474105c0-72.434526 67.880421-91.513263 121.451789-91.513263 74.401684 0 153.815579 34.438737 237.891369 70.925474 50.580211 21.935158 104.609684 45.325474 162.250105 63.083789-52.412632 44.786526-118.784 74.347789-195.152842 83.078737-143.171368 16.357053-326.440421 7.006316-326.440421-125.574737zM377.263158 215.578947c-15.575579 0-30.288842 3.449263-43.654737 9.377685A250.691368 250.691368 0 0 0 323.368421 296.421053c0 115.550316 76.422737 169.391158 137.83579 212.614736 8.138105 5.712842 16.141474 11.371789 23.848421 17.057685V323.368421a107.789474 107.789474 0 0 0-107.789474-107.789474z" fill="#C3D686" ></path><path d="M671.528421 788.857263c44.328421 11.964632 89.626947 19.563789 136.892632 19.56379 89.168842 0 161.684211-60.442947 161.68421-134.736842s-72.515368-134.736842-161.68421-134.736843c-19.078737 0-37.025684 1.509053-54.218106 4.015158-0.754526-101.402947-38.211368-172.355368-79.413894-219.648L673.684211 323.368421a1749.962105 1749.962105 0 0 1-79.036632-1.751579c45.702737 35.866947 108.705684 107.870316 105.984 232.367158 0 0.431158-0.080842 0.808421-0.10779 1.239579-34.923789 10.994526-66.155789 26.731789-95.097263 45.190737a163.085474 163.085474 0 0 0-15.845052-42.388211c-21.557895-39.639579-60.065684-66.775579-97.360842-93.022316C433.098105 423.343158 377.263158 384 377.263158 296.421053c0-130.290526 108.274526-188.631579 215.578947-188.631579 64.134737 0 132.715789 12.045474 214.366316 37.807158C802.330947 180.250947 780.099368 209.381053 700.631579 214.635789V161.684211h-53.894737v53.679157c-63.272421-1.024-104.528842-5.200842-104.986947-5.254736l-5.578106 53.598315C538.408421 263.949474 592.357053 269.473684 673.684211 269.473684c125.170526 0 188.631579-48.128 188.631578-143.063579V106.981053l-18.432-6.144C747.789474 68.823579 668.025263 53.894737 592.842105 53.894737c-158.666105 0-269.473684 99.732211-269.473684 242.526316 0 115.550316 76.422737 169.391158 137.83579 212.614736 33.684211 23.713684 65.509053 46.106947 81.003789 74.698106 9.539368 17.542737 13.285053 33.414737 12.341895 47.750737 21.153684 9.108211 42.118737 17.839158 62.949052 25.977263C671.151158 620.193684 729.977263 592.842105 808.421053 592.842105c59.445895 0 107.789474 36.271158 107.789473 80.842106s-48.343579 80.842105-107.789473 80.842105c-105.472 0-203.237053-42.388211-297.768421-83.429053-94.800842-41.094737-184.346947-79.952842-281.411369-79.952842C122.718316 591.171368 53.894737 644.715789 53.894737 727.578947c0 79.063579 67.098947 136.434526 159.555368 136.434527 142.174316 0 230.426947-66.883368 306.79579-129.886316 31.420632 13.419789 62.787368 26.058105 94.450526 37.133474-47.077053 49.637053-110.969263 82.566737-186.610526 91.270736l5.066105 53.625264c93.453474-7.006316 143.144421 9.350737 195.718737 26.543157 46.457263 15.225263 94.127158 30.854737 169.822316 30.854737 19.994947 0 41.957053-1.077895 66.344421-3.557052l-5.416421-53.625263c-105.283368 10.778947-158.100211-6.548211-213.935158-24.872422-22.150737-7.275789-44.624842-14.632421-70.305684-20.345263a334.848 334.848 0 0 0 96.14821-82.297263z m-458.078316 21.261474C162.573474 810.118737 107.789474 784.276211 107.789474 727.578947c0-60.847158 62.733474-82.539789 121.451789-82.539789 77.850947 0 154.731789 30.288842 235.250526 64.943158-66.263579 52.924632-139.722105 100.136421-251.041684 100.136421z" fill="#231F20" ></path></symbol><symbol id="icon-tiger" viewBox="0 0 1024 1024"><path d="M431.157895 162.250105V134.736842c0-41.552842-39.289263-80.842105-80.842106-80.842105-28.833684 0-57.128421 4.661895-58.314105 4.850526L269.473684 62.490947v83.887158C144.788211 223.824842 89.222737 346.839579 66.991158 431.157895h266.051368c240.747789 0 415.851789 107.789474 415.85179 269.473684-14.848-25.114947-43.924211-53.894737-88.68379-53.894737-67.988211 0-121.263158 71.033263-121.263158 161.684211 0 66.802526 30.477474 119.888842 60.712421 156.16 12.638316 15.171368 36.055579 37.726316 59.014737 58.88 5.066105 0.107789 9.781895 0.538947 15.009685 0.538947 219.297684 0 350.315789-191.811368 350.315789-377.263158C1024 327.545263 679.855158 172.813474 431.157895 162.250105z" fill="#F7C768" ></path><path d="M673.684211 1024c-114.768842 0-188.820211-33.333895-254.167579-62.787368-53.625263-24.144842-99.974737-45.002105-161.28-45.002106-40.448 0-83.590737 23.255579-103.639579 45.16379l-39.747369-36.432842C142.497684 894.787368 199.168 862.315789 258.236632 862.315789c68.392421 0 119.861895 21.288421 172.921263 45.056V673.684211c0-35.166316-17.542737-64.107789-30.639158-80.815158-15.198316 9.835789-32.067368 18.890105-50.741895 26.947368l-21.342316-49.475368C469.800421 509.413053 485.052632 377.317053 485.052632 323.368421V221.642105A597.827368 597.827368 0 0 0 404.210526 215.578947h-26.947368V134.736842c0-12.099368-14.848-26.947368-26.947369-26.947368-9.377684 0-18.836211 0.592842-26.947368 1.347368V269.473684h-53.894737V211.671579c-136.030316 102.912-158.450526 266.886737-161.306947 295.882105 9.135158 9.108211 38.992842 25.061053 71.976421 38.669474l38.103579-59.365053 12.449684-1.589894C321.212632 473.653895 377.263158 392.192 377.263158 323.368421h53.894737c0 88.333474-68.796632 192.242526-180.870737 213.342316l-48.397474 75.398737-20.291368-7.437474C53.894737 557.756632 53.894737 523.317895 53.894737 512c0-50.041263 37.025684-254.733474 215.578947-365.621895V62.490947l22.528-3.745684C293.187368 58.556632 321.482105 53.894737 350.315789 53.894737c41.552842 0 80.842105 39.289263 80.842106 80.842105v27.513263c248.697263 10.563368 592.842105 165.295158 592.842105 484.486737 0 185.451789-131.018105 377.263158-350.315789 377.263158z m-13.473685-323.368421c-36.513684 0-67.368421 49.367579-67.368421 107.789474 0 85.746526 68.096 145.084632 89.465263 161.549473 91.540211-2.533053 164.378947-45.487158 213.827369-107.654737H700.631579v-53.894736h230.238316c8.919579-17.273263 16.357053-35.354947 22.285473-53.894737h-239.885473l-6.467369-17.650527C706.290526 735.582316 692.439579 700.631579 660.210526 700.631579zM485.052632 931.112421c33.926737 14.066526 70.521263 26.597053 114.607157 33.468632C569.424842 928.309895 538.947368 875.223579 538.947368 808.421053c0-90.650947 53.274947-161.684211 121.263158-161.684211 44.759579 0 73.835789 28.779789 88.68379 53.894737h217.007158c2.775579-17.866105 4.203789-35.920842 4.203789-53.894737 0-38.938947-5.658947-74.752-15.925895-107.627789l-126.706526 126.679579-38.103579-38.103579L932.001684 485.052632a367.939368 367.939368 0 0 0-57.775158-81.596632l-154.543158 154.543158-38.103579-38.103579 153.573053-153.573053a537.869474 537.869474 0 0 0-82.593684-56.751158l-140.665263 140.638316-38.103579-38.103579 128.134737-128.134737A794.731789 794.731789 0 0 0 538.947368 231.046737V323.368421c0 50.149053-11.102316 156.698947-95.932631 236.328421 18.378105 23.417263 42.037895 63.407158 42.037895 113.987369v257.42821zM215.578947 431.157895v-53.894737c39.774316 0 53.894737-29.022316 53.894737-53.894737h53.894737c0 53.571368-37.025684 107.789474-107.789474 107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-boar" viewBox="0 0 1024 1024"><path d="M732.079158 377.263158c-107.789474 0-186.421895 31.393684-281.869474 126.841263L180.331789 773.982316C257.724632 807.909053 348.725895 808.421053 485.052632 808.421053h96.013473c55.834947-34.411789 133.551158-53.894737 227.354948-53.894737h121.344L970.105263 680.555789V572.631579c0-94.315789-130.236632-195.368421-238.026105-195.368421z" fill="#FFBDD8" ></path><path d="M808.421053 700.631579v53.894737c-196.446316 0-323.368421 84.641684-323.368421 215.578947h-53.894737c0-163.705263 148.075789-269.473684 377.263158-269.473684z m-323.368421 107.789474v-53.894737c-158.342737 0-245.598316 0-319.649685-49.367579L158.612211 700.631579H80.842105c-21.692632 0-26.624-14.821053-26.947368-26.947368v-82.620632c84.156632-11.183158 161.684211-74.913684 161.68421-186.853053V215.578947H161.684211v161.684211H134.736842c-66.964211 0-134.736842 37.025684-134.736842 107.789474h53.894737c0-42.630737 52.870737-53.894737 80.842105-53.894737h24.629895C147.132632 504.912842 85.153684 538.947368 26.947368 538.947368H0v134.736843c0 32.498526 21.530947 80.842105 80.842105 80.842105h61.682527c32.687158 20.506947 67.125895 33.145263 105.957052 41.013895A232.879158 232.879158 0 0 0 215.578947 916.210526h53.894737c0-41.930105 14.012632-80.303158 39.424-112.505263C358.885053 808.151579 415.959579 808.421053 485.052632 808.421053z m-72.946527-342.420211L323.368421 554.738526V431.157895h-53.894737v253.682526l180.736-180.736-38.103579-38.103579zM323.368421 161.684211h-53.894737v190.032842a769.536 769.536 0 0 1 53.894737-49.098106V161.684211z m323.368421-53.894737c-72.623158 0-146.809263 23.336421-215.578947 58.637473V107.789474h-53.894737v154.138947C458.832842 205.392842 555.331368 161.684211 646.736842 161.684211c148.587789 0 269.473684 120.885895 269.473684 269.473684v235.654737L809.579789 862.315789h61.359158L970.105263 680.555789V431.157895c0-178.310737-145.057684-323.368421-323.368421-323.368421z" fill="#231F20" ></path></symbol><symbol id="icon-boar_hai" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M309.975579 804.756211l-27.136-46.592c103.073684-60.011789 183.026526-132.473263 241.475368-219.24379H350.315789l-13.473684-50.283789c58.88-33.980632 99.435789-117.571368 118.703158-165.295158H242.526316v-53.894737h538.947368v53.894737h-268.18021c-12.395789 34.088421-42.469053 106.603789-90.435369 161.68421h134.009263a680.555789 680.555789 0 0 0 46.349474-107.708631l51.092211 17.057684c-58.421895 175.265684-171.034947 309.490526-344.333474 410.381474z m192.350316-2.937264L467.806316 760.454737c88.414316-73.728 154.516211-158.773895 202.105263-259.907369l48.801684 22.959158a797.372632 797.372632 0 0 1-82.351158 137.781895c32.741053 15.009684 83.456 44.867368 137.647158 101.591579l-38.938947 37.268211c-57.236211-59.877053-109.325474-85.557895-133.766737-95.178106a850.997895 850.997895 0 0 1-98.977684 96.848842z m48.613052-536.872421l-80.842105-53.894737 29.884632-44.840421 80.842105 53.894737-29.884632 44.840421zM512 53.894737C259.395368 53.894737 53.894737 259.395368 53.894737 512s205.500632 458.105263 458.105263 458.105263c9.081263 0 17.973895-0.835368 26.947368-1.374316v-53.894736c-8.946526 0.619789-17.866105 1.374316-26.947368 1.374315-222.881684 0-404.210526-181.328842-404.210526-404.210526S289.118316 107.789474 512 107.789474s404.210526 181.328842 404.210526 404.210526c0 195.206737-139.075368 358.507789-323.368421 396.045474v54.460631c214.096842-38.346105 377.263158-225.549474 377.263158-450.533052C970.105263 259.395368 764.604632 53.894737 512 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-bilibili1" viewBox="0 0 1129 1024"><path d="M234.909 9.656a80.468 80.468 0 0 1 68.398 0 167.374 167.374 0 0 1 41.843 30.578l160.937 140.82h115.07l160.936-140.82a168.983 168.983 0 0 1 41.843-30.578A80.468 80.468 0 0 1 930.96 76.445a80.468 80.468 0 0 1-17.703 53.914 449.818 449.818 0 0 1-35.406 32.187 232.553 232.553 0 0 1-22.531 18.508h100.585a170.593 170.593 0 0 1 118.289 53.109 171.397 171.397 0 0 1 53.914 118.288v462.693a325.897 325.897 0 0 1-4.024 70.007 178.64 178.64 0 0 1-80.468 112.656 173.007 173.007 0 0 1-92.539 25.75H212.377a341.186 341.186 0 0 1-72.421-4.024A177.835 177.835 0 0 1 28.91 939.065a172.202 172.202 0 0 1-27.36-92.539V388.662a360.498 360.498 0 0 1 0-66.789A177.03 177.03 0 0 1 162.487 178.64h105.414c-16.899-12.07-31.383-26.555-46.672-39.43a80.468 80.468 0 0 1-25.75-65.984 80.468 80.468 0 0 1 39.43-63.57M216.4 321.873a80.468 80.468 0 0 0-63.57 57.937 108.632 108.632 0 0 0 0 30.578v380.615a80.468 80.468 0 0 0 55.523 80.469 106.218 106.218 0 0 0 34.601 5.632h654.208a80.468 80.468 0 0 0 76.444-47.476 112.656 112.656 0 0 0 8.047-53.109v-354.06a135.187 135.187 0 0 0 0-38.625 80.468 80.468 0 0 0-52.304-54.719 129.554 129.554 0 0 0-49.89-7.242H254.22a268.764 268.764 0 0 0-37.82 0z m0 0" fill="#20B0E3" ></path><path d="M348.369 447.404a80.468 80.468 0 0 1 55.523 18.507 80.468 80.468 0 0 1 28.164 59.547v80.468a80.468 80.468 0 0 1-16.094 51.5 80.468 80.468 0 0 1-131.968-9.656 104.609 104.609 0 0 1-10.46-54.719v-80.468a80.468 80.468 0 0 1 70.007-67.593z m416.02 0a80.468 80.468 0 0 1 86.102 75.64v80.468a94.148 94.148 0 0 1-12.07 53.11 80.468 80.468 0 0 1-132.773 0 95.757 95.757 0 0 1-12.875-57.133V519.02a80.468 80.468 0 0 1 70.007-70.812z m0 0" fill="#20B0E3" ></path></symbol><symbol id="icon-yinle" viewBox="0 0 1024 1024"><path d="M512.2976 0a531.2 531.2 0 0 0-512 548.48V960h128V548.48a398.72 398.72 0 0 1 384-411.52 398.72 398.72 0 0 1 384 411.52V960h128V548.48A531.2 531.2 0 0 0 512.2976 0z" fill="#5c8add" ></path><path d="M64.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path><path d="M704.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path></symbol><symbol id="icon-icon-test-copy" viewBox="0 0 1024 1024"><path d="M512 512m-229.517241 0a229.517241 229.517241 0 1 0 459.034482 0 229.517241 229.517241 0 1 0-459.034482 0Z" fill="#5c8add" ></path><path d="M512 1024A512 512 0 1 1 1024 512 512 512 0 0 1 512 1024z m0-141.241379A370.758621 370.758621 0 1 0 141.241379 512 370.758621 370.758621 0 0 0 512 882.758621z" fill="#5c8add" ></path></symbol><symbol id="icon-V" viewBox="0 0 1024 1024"><path d="M1012.47774251 492.58192592L544.94137566 87.22962963a49.96686561 49.96686561 0 0 0-65.88275132 0L11.63784127 492.6975097c-21.03624691 18.26223633-23.3479224 49.93219048-5.08568606 70.96843739 18.03106878 21.03624691 49.93219048 23.3479224 70.96843738 5.08568607L512 191.83294532l434.71057495 376.91868784c9.47786949 8.20644797 21.26741446 12.25188008 32.82579189 12.13629629 14.10122046 0 27.97127337-5.77918871 38.02706173-17.33756613 18.14665256-20.92066314 15.95056084-52.70620106-5.08568606-70.9684374z" fill="#5c8add" ></path><path d="M109.30613051 567.59579541V896.89396825c0 42.53482892 34.90629982 77.44112875 77.44112875 77.44112875h220.76500882V666.30433862c0-25.54401411 20.92066314-46.46467725 46.46467724-46.46467724h116.16169313c25.54401411 0 46.46467725 20.92066314 46.46467725 46.46467724V974.335097h220.76500882c42.53482892 0 77.44112875-34.90629982 77.44112874-77.44112875l0.11558377-329.29817284L512 218.18604586 109.30613051 567.59579541zM848.00203175 197.49655027h-63.91782716c-12.82979894 0-23.23233862 10.40253968-23.23233863 23.23233862v24.27259259l110.49808818 95.70336508V220.72888889h-0.11558377c0-12.82979894-10.40253968-23.23233862-23.23233862-23.23233862zM905.44716754 83.18419754s-34.90629982 56.86721693-89.11508994 100.32671603c152.68616579 13.98563668 127.83565432-133.26809171 127.83565432-133.2680917-134.07717813-10.28695591-132.92134039 102.29164021-131.072 127.83565432 20.92066314-20.92066314 49.70102293-62.64640564 92.35143562-94.89427865zM798.53217637 174.61096297c-19.64924162-16.52847972-40.56990476-43.45949912-51.203612-53.97762258 0 0 32.94137566 20.57391182 56.40488184 49.3542716 2.42725926-18.37782011 6.47269135-93.3916896-93.16052205-85.3008254 0 0-13.98563668 104.71889947 87.95925221 89.92417638z" fill="#5c8add" ></path></symbol><symbol id="icon-zhifeiji" viewBox="0 0 1167 1024"><path d="M41.201759 463.52493L1110.665064 30.117647c10.32605-4.159104 21.942857 0.860504 26.101961 11.043137 1.434174 3.728852 1.864426 7.744538 1.003921 11.616807L949.033691 978.823529c-2.151261 10.89972-12.764146 17.927171-23.663865 15.632493-2.72493-0.573669-5.306443-1.721008-7.601121-3.298599L634.80624 789.79944l-163.065546 133.951821c-16.492997 13.62465-40.87395 11.186555-54.498599-5.306443-3.011765-3.728852-5.306443-7.887955-6.884034-12.477311l-102.973669-313.080112-265.178712-91.787115c-10.469468-3.585434-16.062745-15.058824-12.333893-25.528291 1.864426-5.44986 6.023529-9.895798 11.329972-12.047059z" fill="#FCFDFC" ></path><path d="M929.385512 1023.569748c-3.155182 0-6.453782-0.286835-9.752381-1.003922-6.740616-1.434174-12.907563-4.015686-18.50084-8.031372L635.953579 825.940616l-146.142297 120.040336c-13.911485 11.473389-31.408403 16.779832-49.335574 15.058824-17.927171-1.721008-34.133333-10.32605-45.463305-24.237535-5.306443-6.453782-9.322129-13.768067-11.903642-21.79944l-98.527731-299.598879-251.697479-87.19776c-12.333894-4.302521-22.229692-13.05098-27.966386-24.811204s-6.453782-24.954622-2.151261-37.288515c4.589356-13.337815 14.771989-23.9507 27.82297-29.257143L1099.908761 3.585434c24.954622-10.039216 53.351261 2.007843 63.533894 26.819048 3.585434 8.891877 4.445938 18.644258 2.581513 28.109804L977.143495 984.560224c-4.732773 23.090196-25.098039 39.009524-47.757983 39.009524z m-294.579272-233.770308l282.962465 201.357983c2.294678 1.577591 4.87619 2.72493 7.601121 3.298599 10.89972 2.151261 21.512605-4.87619 23.663865-15.632493L1137.914364 52.777591c0.860504-3.872269 0.430252-7.887955-1.003922-11.616807-4.159104-10.32605-15.919328-15.202241-26.101961-11.043137L41.201759 463.52493c-5.306443 2.151261-9.465546 6.597199-11.47339 12.047059-1.721008 5.019608-1.434174 10.469468 0.860505 15.345658 2.294678 4.87619 6.453782 8.461625 11.473389 10.182633l265.178711 91.787115L410.214644 905.967507c1.434174 4.589356 3.872269 8.748459 6.884033 12.477311 6.597199 8.031373 15.919328 12.907563 26.101961 13.911485 10.32605 1.003922 20.365266-2.007843 28.396639-8.605042l163.208963-133.951821z" fill="#4A4A4A" ></path><path d="M307.097557 592.743978l105.698599 316.091876c6.310364 18.787675 26.532213 28.970308 45.319888 22.659944 4.159104-1.434174 7.887955-3.442017 11.186555-6.166946l164.786555-133.951821-165.360224-118.892997c297.017367-287.982073 447.462185-433.980952 451.191036-437.853222 0.573669-0.573669 2.581513-3.442017 0.430252-7.027451-1.290756-1.577591-3.298599-3.298599-7.027451-2.15126-202.218487 120.327171-404.293557 242.805602-606.22521 367.291877z" fill="#CAE0EE" ></path><path d="M446.786072 934.794398c-5.736695 0-11.329972-1.290756-16.636414-3.872269-8.891877-4.445938-15.632493-12.047059-18.787675-21.512605L305.376549 592.313725l1.003921-0.573669C507.308201 467.684034 711.391114 344.058263 912.60568 224.161345l0.286835-0.143418c3.585434-1.147339 6.310364-0.286835 8.605042 2.581513l0.143417 0.143417c2.438095 4.015686 0.573669 7.457703-0.573669 8.74846-3.872269 4.015686-155.177591 150.87507-450.043698 436.705882l165.503642 119.036414-166.220728 135.09916c-3.442017 2.868347-7.457703 5.019608-11.760225 6.453782-3.728852 1.290756-7.744538 2.007843-11.760224 2.007843z m-137.967507-341.333334l105.268348 314.944538c2.868347 8.748459 9.035294 15.77591 17.210084 19.935014 8.17479 4.159104 17.496919 4.732773 26.245378 1.864426 3.872269-1.290756 7.60112-3.298599 10.756302-5.880112l163.352381-132.804482L466.434252 672.627451l1.290756-1.147339C763.308201 384.932213 915.043775 237.642577 918.772627 233.626891c0 0 2.007843-2.294678 0.286835-5.306443-1.003922-1.290756-2.438095-2.438095-5.306443-1.577591-200.784314 119.610084-404.293557 242.94902-604.934454 366.718207z" fill="#CAE0EE" ></path><path d="M460.840974 924.898599l7.457703-253.561904 165.933894 119.896918-168.658824 135.959664c-1.290756 1.003922-3.011765 0.860504-4.015686-0.430252-0.430252-0.430252-0.717087-1.147339-0.717087-1.864426z" fill="#94C3E2" ></path><path d="M463.709322 929.344538c-1.290756 0-2.438095-0.573669-3.2986-1.577591-0.573669-0.860504-1.003922-1.864426-1.003921-2.868348l7.60112-256.286834 169.519328 122.621848-1.434174 1.147339-168.658823 135.959664c-0.860504 0.717087-1.721008 1.003922-2.72493 1.003922z m6.023529-255.282913l-7.457703 250.836974c0 0.286835 0.143417 0.717087 0.286835 1.003922 0.430252 0.573669 1.434174 0.717087 2.007843 0.286835l167.22465-134.812325-162.061625-117.315406z" fill="#94C3E2" ></path></symbol><symbol id="icon-lianjie" viewBox="0 0 1079 1024"><path d="M695.355535 432.666896c-0.553495-1.10699-0.885592-2.186305-1.383737-3.265619-0.193723-0.193723-0.193723-0.359772-0.359771-0.719543-12.508983-26.318678-39.436506-43.366319-69.325226-41.013966-39.076734 3.265619-68.439634 39.021384-65.312388 79.841627 0.857917 10.516401 3.653066 20.147211 7.998 28.83708 19.78744 46.659613 11.097571 103.448181-25.377737 141.750022l-191.094085 199.950001a118.088119 118.088119 0 0 1-171.998513 0c-47.434506-49.537786-47.434506-130.098956 0-179.636742l71.234782-74.389703-0.52582-0.553494a75.911814 75.911814 0 0 0 24.326097-61.880721c-3.127246-40.820243-37.3609-71.51153-76.437634-68.24591a69.463599 69.463599 0 0 0-46.908685 23.966325l-0.166049-0.193723-72.618519 75.856464c-103.226783 107.793115-103.226783 282.36538 0 390.158495 103.171433 107.793115 270.299193 107.793115 373.498301 0l191.619904-200.1714c80.256748-83.992838 97.636485-208.307773 52.83108-310.289193z" fill="#5c8add" ></path><path d="M1002.047012 80.865592c-103.226783-107.82079-270.382217-107.82079-373.581325 0l-191.619905 200.199075c-80.284423 83.854464-97.66416 208.197074-52.997128 310.233843 0.52582 1.079315 0.857917 2.15863 1.383737 3.26562 0.166048 0.166048 0.166048 0.359772 0.332097 0.719543 12.536658 26.291004 39.46418 43.366319 69.3529 41.013966 39.076734-3.265619 68.439634-39.021384 65.312388-79.869302a78.679288 78.679288 0 0 0-7.998-28.864755c-19.78744-46.631938-11.097571-103.448181 25.377737-141.750022l191.287808-199.839302a118.088119 118.088119 0 0 1 172.026188 0c47.434506 49.537786 47.434506 130.126631 0 179.692091l-71.234782 74.417378 0.52582 0.553495a75.939489 75.939489 0 0 0-24.353772 61.88072c3.15492 40.847917 37.3609 71.51153 76.465309 68.245911a69.463599 69.463599 0 0 0 46.908685-23.938651l0.166049 0.166048 72.646194-75.856464c103.03306-107.82079 103.03306-282.642127 0-390.269194z" fill="#5c8add" ></path></symbol><symbol id="icon-liaotian" viewBox="0 0 1171 1024"><path d="M1068.71699 0.243751H102.193768C46.228437 0.243751 0.500666 45.045267 0.500666 99.74309v696.251622c0 54.697824 45.727771 99.450589 101.693102 99.450589h329.113198l120.851966 114.465677a48.652788 48.652788 0 0 0 66.641644 0l120.851966-114.465677h329.064448c55.965331 0 101.741852-44.752765 101.741852-99.450589V99.74309C1170.458842 45.045267 1124.682321 0.243751 1068.71699 0.243751z m-439.776354 596.849784h-370.989696c-27.933915 0-50.846551-22.425133-50.846551-49.774045 0-27.348912 22.912636-49.725294 50.846551-49.725294h370.989696c27.933915 0 50.846551 22.376382 50.846551 49.725294 0 27.348912-22.912636 49.774045-50.846551 49.774045z m287.18795-211.381252H254.782171a50.456549 50.456549 0 0 1-50.846551-49.725294c0-27.397662 22.912636-49.774045 50.846551-49.774045h661.346415c27.933915 0 50.846551 22.376382 50.846551 49.774045 0 27.348912-22.912636 49.725294-50.846551 49.725294z" fill="#5C8ADD" ></path></symbol><symbol id="icon-xinfeng" viewBox="0 0 1400 1024"><path d="M1301.63733163 214.78520234a207.81921797 207.81921797 0 0 1 7.02423018 52.42036465v489.73590176a205.10753818 205.10753818 0 0 1-205.05853125 205.05853125H283.05853124A205.15654424 205.15654424 0 0 1 77.99999999 756.79444971V267.20556699a201.36672685 201.36672685 0 0 1 7.02423106-52.42036465L586.24393329 562.1905874c69.44187217 51.96297217 146.36536612 49.13694404 214.1736961 0zM1103.60303056 62.0000167H283.05853124A204.50312753 204.50312753 0 0 0 106.37462518 163.41030547l489.71956641 335.75823018c62.43397646 50.77048623 127.85733457 50.31309463 194.62019765 0L1280.28693749 163.41030547A204.68281729 204.68281729 0 0 0 1103.60303056 62.0000167z m0 0" fill="#5c8add" ></path></symbol><symbol id="icon-QQ1" viewBox="0 0 1024 1024"><path d="M0 512a512 512 0 1 0 1024 0A512 512 0 1 0 0 512z" fill="#18ACFC" ></path><path d="M500.113 228.39c118.396-1.518 178.924 61.004 201 156 3.497 15.048 0.15 34.807 0 50 27.143 5.682 33.087 60.106 10 75v1h1c8.26 14.33 19.04 28.125 26 44 7.332 16.723 9.306 35.16 14 55 4.024 17.01-2.287 51.505-10 57-0.771 0.683-2.231 1.312-3 2-14.601-3.016-30.377-16.865-38-27-3.065-4.074-5.275-9.672-10-12-0.395 21.568-12.503 41.15-22 55-3.514 5.123-14.073 13.217-14 18 3.691 2.836 8.305 2.956 13 5 10.513 4.577 25.449 13.168 32 22 2.334 3.146 5.548 7.555 7 11 16.193 38.414-36.527 48.314-63 54-27.185 5.839-77.818-10.224-92-19-8.749-5.414-16.863-18.573-29-19-3.666 2.389-14.438 1.132-20 1-16.829 32.804-101.913 47.868-148 31-14.061-5.146-43.398-17.695-38-40 4.437-18.327 19.947-29.224 35-37 5.759-2.975 18.915-4.419 22-10-13.141-8.988-24.521-28.659-31-44-3.412-8.077-4.193-25.775-9-32-7.789 12.245-32.097 36.91-52 33-3.071-4.553-7.213-9.097-9-15-4.792-15.835-1.81-40.379 2-54 8.117-29.02 16.965-50.623 32-72 4.672-6.643 11.425-12.135 16-19-8.945-9.733-6.951-37.536-1-49 4.002-7.709 9.701-7.413 10-20-1.92-3.022-0.071-8.604-1-13-4.383-20.75 3.273-47.552 9-63 19.8-53.421 53.712-90.466 105-112 11.986-5.033 25.833-7.783 39-11 5.322-1.3 11.969 0.518 16-2z" fill="#FFFFFF" ></path></symbol><symbol id="icon-rss" viewBox="0 0 1024 1024"><path d="M749.61196492 908.06119793C749.61196492 560.41848146 463.58151854 274.36328126 115.93880207 274.36328126V115.93880207c434.50388795 0 792.12239584 357.61850789 792.12239586 792.12239586zM224.55858562 690.72261555a108.91682943 108.91682943 0 0 1 108.69404499 108.74355267C333.25263061 859.29616292 284.24005737 908.06119793 224.31104736 908.06119793 164.48105265 908.06119793 115.96355592 859.41993206 115.96355592 799.46616822s48.69077351-108.71879883 108.61978351-108.74355267zM641.01693522 908.06119793h-153.96879069c0-203.60020956-167.50913289-371.13409627-371.10934246-371.13409629v-153.96879068c288.03550619 0 525.07813313 237.11688843 525.07813315 525.10288697z" fill="#FFA500" ></path></symbol><symbol id="icon-youxiang" viewBox="0 0 1024 1024"><path d="M583.60666667 972h-68.08c-8.43333333 0-15.33333333-6.9-15.33333334-15.33333333V609.52c0-8.43333333 6.9-15.33333333 15.33333334-15.33333333h68.08c8.43333333 0 15.33333333 6.9 15.33333333 15.33333333V956.66666667c0 8.43333333-6.9 15.33333333-15.33333333 15.33333333z" fill="#629FF9" ></path><path d="M294.42 167c-113.62 0-205.77333333 92-205.77333333 205.31333333v336.72h411.39333333V372.31333333c0.15333333-113.31333333-92-205.31333333-205.62-205.31333333z" fill="#2166CC" ></path><path d="M519.97333333 627H216.98666667c-25.45333333 0-46-20.54666667-46-46V393.78c0-25.45333333 20.54666667-46 46-46h302.98666666c25.45333333 0 46 20.54666667 46 46V581c0 25.45333333-20.54666667 46-46 46z" fill="#D2E4FF" ></path><path d="M565.97333333 397a49.22 49.22 0 0 0-49.37333333-49.22H220.36c-27.29333333 0-49.37333333 22.08-49.37333333 49.22v10.27333333l179.4 94.60666667c11.34666667 5.98 24.84 5.98 36.18666666 0l179.4-94.60666667v-10.27333333z" fill="#FFFFFF" ></path><path d="M730.5 167h-427.8v0.46c109.78666667 4.29333333 197.49333333 94.3 197.49333333 205.00666667v336.72h411.39333334c27.29333333 0 49.37333333-22.08 49.37333333-49.22V397c0-126.96-103.19333333-230-230.46-230z" fill="#4E8DF6" ></path><path d="M845.80666667 52H681.12666667c-9.04666667 0-16.40666667 7.36-16.40666667 16.40666667v336.72a24.67133333 24.67133333 0 1 0 49.37333333 0V134.18666667h131.71333334c9.04666667 0 16.40666667-7.36 16.40666666-16.40666667V68.40666667c0-9.04666667-7.36-16.40666667-16.40666666-16.40666667z" fill="#2166CC" ></path><path d="M896.25333333 659.81333333h-35.11333333c-8.43333333 0-15.33333333-6.9-15.33333333-15.33333333v-35.11333333c0-8.43333333 6.9-15.33333333 15.33333333-15.33333334h35.11333333c8.43333333 0 15.33333333 6.9 15.33333334 15.33333334v35.11333333c0 8.58666667-6.9 15.33333333-15.33333334 15.33333333z" fill="#FFFFFF" ></path><path d="M88.8 709.18666667l-24.22666667 131.40666666c-9.66 54.43333333 26.83333333 98.59333333 81.26666667 98.59333334h213.9c54.58666667 0 106.56666667-44.16 116.22666667-98.59333334l23.15333333-131.40666666H88.8z" fill="#2974CE" ></path></symbol><symbol id="icon-gitHub" viewBox="0 0 1049 1024"><path d="M523.6581816 52C262.83923907 52 52 262.8401375 52 523.6581816c0 208.49703047 135.09433812 384.97758117 322.50789391 447.44906532 23.42658172 4.68531653 32.01647887-10.15136894 32.01647796-22.64584583 0-10.93210574-0.78163433-48.41463703-0.78163433-87.45953855-131.18885996 28.11189824-158.5200223-56.22379738-158.52002231-56.22379739-21.08437312-54.66232469-52.3201152-68.71827336-52.3201152-68.71827335-42.94858371-28.89353348 3.12384382-28.89353348 3.12384384-28.89353348 47.63479867 3.12384382 72.62285398 48.41643391 72.62285398 48.4164339 42.16784782 71.84121875 110.10538527 51.53758242 137.43654672 39.04400399 3.90457972-30.45500618 16.3990566-51.5393793 29.67427028-63.25222094-104.64023039-10.93300418-214.74561566-51.53848086-214.74561657-232.70524742 0-51.53848086 18.74126609-93.70632867 48.4164339-126.50444187-4.68621496-11.71284164-21.08527156-60.12837711 4.6844181-124.94207075 0 0 39.82563922-12.49447688 129.62738726 48.41463704 37.48253129-10.15136894 78.08980484-15.61742227 117.91454562-15.61742137s80.43201433 5.46605242 117.91454473 15.61742137c89.80264648-60.90911391 129.62828571-48.41463703 129.62828571-48.41463704 25.76879122 64.81369363 9.37063305 113.22922911 4.68531651 124.94207075 30.45410773 32.79721477 48.41463703 74.96506258 48.41463703 126.50444187 0 181.16676656-110.10538527 220.99150644-215.52545401 232.70524742 17.1797934 14.83668547 32.01647887 42.94858371 32.01647886 87.45953946 0 63.25222094-0.78163433 114.009965-0.78163523 129.62738636 0 12.49447688 8.59079468 27.33116234 32.01737731 22.64584583 187.41265734-62.4705866 322.50699547-238.95203574 322.50699546-447.44996375C995.31636231 262.8401375 783.69369203 52 523.6581816 52z" fill="#663399" ></path><path d="M230.82365863 729.03136735c-0.7807359 2.34310703-4.68531653 3.12384382-7.80916035 1.56237113s-5.46605242-4.68531653-3.90368129-7.02842356c0.7807359-2.34220859 4.68531653-3.12384382 7.80826192-1.56147269s4.68531653 4.68531653 3.90457972 7.02752512z m18.7412661 21.08437312c-2.34220859 2.34220859-7.02752512 0.78163433-9.37063305-2.34310703-3.12294539-3.12294539-3.90457972-7.80826192-1.5614727-10.15136894 2.34220859-2.34220859 6.24678922-0.7807359 9.37063305 2.34310702 3.12384382 3.90457972 3.90457972 8.58899782 1.5614727 10.15136895zM268.30618992 777.44690281c-3.12294539 2.34220859-7.80826192 0-10.15136895-3.90457972-3.12384382-3.90457972-3.12384382-9.37063305 0-10.93210574 3.12384382-2.34310703 7.80916035 0 10.15226739 3.90457972 3.12294539 3.90368129 3.12294539 8.58899782 0 10.93210574z m25.76968965 26.55042555c-2.34220859 3.12294539-7.80916035 2.34220859-12.49447688-1.56237113-3.90457972-3.90368129-5.46605242-9.37063305-2.34220859-11.71284164 2.34220859-3.12384382 7.80826192-2.34310703 12.49447687 1.56147269 3.90368129 3.12384382 4.68531653 8.58989625 2.3422086 11.71374008z m35.1403227 14.83668637c-0.78163433 3.90457972-6.24768766 5.46605242-11.71374008 3.90457972-5.46605242-1.5614727-8.58899782-6.24768766-7.80916036-9.37063305 0.78163433-3.90457972 6.24768766-5.46605242 11.71374009-3.90457972 5.46605242 1.5614727 8.58899782 5.46605242 7.80916035 9.37063305z m38.26416562 3.12384382c0 3.90457972-4.68621496 7.02752512-10.15226738 7.02752512-5.46605242 0-10.15226738-3.12294539-10.15226739-7.02752512s4.68621496-7.02842356 10.15226739-7.02842445c5.46605242 0 10.15226738 3.12384382 10.15226738 7.02842445z m35.92016106-6.24768766c0.78163433 3.90457972-3.12384382 7.80916035-8.58899872 8.58989625-5.46695086 0.78163433-10.15226738-1.5614727-10.93390172-5.46605241-0.77983747-3.90457972 3.12384382-7.80916035 8.5907947-8.58899872 5.46605242-0.78163433 10.15136894 1.56057426 10.93210574 5.46515488z m0 0" fill="#663399" ></path></symbol><symbol id="icon-bilibili" viewBox="0 0 1024 1024"><path d="M832.61667555 181.33447111h-164.32545185l74.45617778-74.45617778c12.84020148-12.84020148 12.84020148-30.8140563 0-43.65425778-12.84020148-12.84020148-30.8140563-12.84020148-43.65425778 0L573.2882963 189.04101925H450.04420741L324.2272237 63.23617185c-10.26730667-12.84020148-25.68040297-15.40096-41.08136295-7.70654815-2.57289482 0-2.57289482 2.57289482-5.13365334 5.13365333-12.84020148 12.84020148-12.84020148 30.8140563 0 43.65425779l77.02907259 77.02907259h-164.32545185c-89.86927408 0-164.32545185 74.45617778-164.32545185 164.32545184v408.24073483c0 87.29637925 74.45617778 161.75255703 164.32545185 161.75255703h25.68040296c0 30.8140563 25.68040297 53.92156445 53.92156444 53.92156444s53.92156445-25.68040297 53.92156445-53.92156444H704.23893333c2.57289482 30.8140563 28.24116148 53.92156445 59.05521778 51.34866964 28.24116148-2.57289482 48.78791111-23.10750815 51.34866964-51.34866964h20.53461333c89.86927408 0 164.32545185-74.45617778 164.32545184-164.32545186V343.09916445c-2.56075852-89.86927408-77.02907259-161.76469333-166.88621037-161.76469334z m-5.13365333 634.19429926H200.99527111c-33.37481482 0-59.05521778-28.24116148-61.61597629-61.61597629l-2.57289482-415.94728297c0-33.37481482 28.24116148-61.6159763 61.6159763-61.61597629h626.48775111c33.37481482 0 59.05521778 28.24116148 61.61597629 61.61597629l2.57289482 415.94728297c-2.57289482 35.93557333-28.24116148 61.6159763-61.6159763 61.61597629z" fill="#ff7299" ></path><path d="M403.82919111 417.55534222l15.40096 77.0290726-205.40681481 38.50846815-15.40096-77.0290726 205.40681481-38.50846815z m197.70026667 77.0290726l15.40096-77.0290726 205.40681481 38.50846815-15.40096 77.0290726-205.40681481-38.50846815z m41.08136297 161.75255703c0 2.57289482 0 7.70654815-2.57289483 10.26730667-12.84020148 28.24116148-41.08136297 46.2150163-74.45617777 48.78791111-20.53461333 0-41.08136297-10.26730667-53.92156445-25.68040296-15.40096 15.40096-33.37481482 25.68040297-53.92156445 25.68040296-30.8140563-2.57289482-59.05521778-20.53461333-74.45617777-48.78791111 0-2.57289482-2.57289482-5.13365333-2.57289481-10.26730667 0-10.26730667 7.70654815-17.97385482 17.97385481-20.53461333h2.57289482c7.70654815 0 12.84020148 2.57289482 15.40096 10.26730666 0 0 20.53461333 28.24116148 38.50846815 28.24116149 35.94770963 0 35.94770963-30.8140563 56.48232296-53.92156445 23.10750815 25.68040297 23.10750815 53.92156445 56.48232296 53.92156445 23.10750815 0 38.50846815-28.24116148 38.50846815-28.24116149 2.57289482-5.13365333 10.26730667-10.26730667 15.40096-10.26730666 10.26730667-2.57289482 17.97385482 5.13365333 20.53461333 15.40096v5.13365333h0.0364089z" fill="#ff7299" ></path></symbol></svg>',        o = (o = document.getElementsByTagName("script"))[o.length - 1].getAttribute("data-injectcss"),        p = function (c, l) {            l.parentNode.insertBefore(c, l);        };    if (o && !c.__iconfont__svg__cssinject__) {        c.__iconfont__svg__cssinject__ = !0;        try {            document.write(                "<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>"            );        } catch (c) {            console && console.log(c);        }    }    function d() {        i || ((i = !0), a());    }    function m() {        try {            t.documentElement.doScroll("left");        } catch (c) {            return void setTimeout(m, 50);        }        d();    }    (l = function () {        var c,            l = document.createElement("div");        (l.innerHTML = v),            (v = null),        (l = l.getElementsByTagName("svg")[0]) &&        (l.setAttribute("aria-hidden", "true"),            (l.style.position = "absolute"),            (l.style.width = 0),            (l.style.height = 0),            (l.style.overflow = "hidden"),            (l = l),            (c = document.body).firstChild ? p(l, c.firstChild) : c.appendChild(l));    }),        document.addEventListener            ? ~["complete", "loaded", "interactive"].indexOf(document.readyState)                ? setTimeout(l, 0)                : ((h = function () {                    document.removeEventListener("DOMContentLoaded", h, !1), l();                }),                    document.addEventListener("DOMContentLoaded", h, !1))            : document.attachEvent &&            ((a = l),                (t = c.document),                (i = !1),                m(),                (t.onreadystatechange = function () {                    "complete" == t.readyState && ((t.onreadystatechange = null), d());                }));})(window);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/title.js"/>
      <url>/js/title.js</url>
      
        <content type="html"><![CDATA[//动态标题var OriginTitile = document.title;var titleTime;document.addEventListener("visibilitychange", function () {    if (document.hidden) {        //离开当前页面时标签显示内容        document.title = "w(ﾟДﾟ)w 不要走！再看看嘛！";        clearTimeout(titleTime);    } else {        //返回当前页面时标签显示内容        document.title = "♪(^∇^*)欢迎肥来！" + OriginTitile;        //两秒后变回正常标题        titleTime = setTimeout(function () {            document.title = OriginTitile;        }, 2000);    }});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[    <div id="aplayer-lvzXSlFA" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="8032485835" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="100" data-preload="none" data-theme="#ad7a86"    ></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/runtime/runtime.min.css"/>
      <url>/css/runtime/runtime.min.css</url>
      
        <content type="html"><![CDATA[div#runtime{width:180px;margin:auto;color:#fff;padding-inline:5px;border-radius:10px;background-color:rgba(0,0,0,.7)}#workboard{font-size:12px}[data-theme=dark] div#runtime{color:#28b4c8;box-shadow:0 0 5px rgba(28,69,218,.71);animation:flashlight 1s linear infinite alternate}#ghbdages .github-badge img{height:20px}@-moz-keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}@-webkit-keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}@-o-keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}@keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.min.js"/>
      <url>/js/runtime/runtime.min.js</url>
      
        <content type="html"><![CDATA[var now = new Date();function createtime() {    var grt = new Date("06/11/2022 00:00:00");    now.setTime(now.getTime() + 250);    var days = (now - grt) / 1e3 / 60 / 60 / 24,        dnum = Math.floor(days),        hours = (now - grt) / 1e3 / 60 / 60 - 24 * dnum,        hnum = Math.floor(hours);    1 == String(hnum).length && (hnum = "0" + hnum);    var minutes = (now - grt) / 1e3 / 60 - 1440 * dnum - 60 * hnum,        mnum = Math.floor(minutes);    1 == String(mnum).length && (mnum = "0" + mnum);    var seconds = (now - grt) / 1e3 - 86400 * dnum - 3600 * hnum - 60 * mnum,        snum = Math.round(seconds);    1 == String(snum).length && (snum = "0" + snum);    let currentTimeHtml = "";    (currentTimeHtml =        hnum < 18 && hnum >= 9            ? `<img class='boardsign' src='https://npm.elemecdn.com/anzhiyu-blog@2.0.4/img/badge/安知鱼-上班摸鱼中.svg' title='距离月入25k也就还差一个大佬带我~'><span class='textTip'> <br> 本站居然运行了 ${dnum} 天</span><span id='runtime'> ${hnum} 小时 ${mnum} 分 ${snum} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`            : `<img class='boardsign' src='https://npm.elemecdn.com/anzhiyu-blog@2.0.4/img/badge/安知鱼-下班啦.svg' title='下班了就该开开心心的玩耍，嘿嘿~'><span class='textTip'> <br> 本站居然运行了 ${dnum} 天</span><span id='runtime'> ${hnum} 小时 ${mnum} 分 ${snum} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`),    document.getElementById("workboard") && (document.getElementById("workboard").innerHTML = currentTimeHtml);}setInterval(() => {    createtime();}, 250);]]></content>
      
    </entry>
    
    
  
</search>
